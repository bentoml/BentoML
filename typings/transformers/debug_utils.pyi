from .file_utils import ExplicitEnum, is_torch_available

if is_torch_available(): ...
logger = ...

class DebugUnderflowOverflow:
    def __init__(
        self,
        model,
        max_frames_to_save=...,
        trace_batch_nums=...,
        abort_after_batch_num=...,
    ) -> None: ...
    def save_frame(self, frame=...): ...
    def expand_frame(self, line): ...
    def trace_frames(self): ...
    def reset_saved_frames(self): ...
    def dump_saved_frames(self): ...
    def analyse_model(self): ...
    def analyse_variable(self, var, ctx): ...
    def batch_start_frame(self): ...
    def batch_end_frame(self): ...
    def create_frame(self, module, input, output): ...
    def register_forward_hook(self): ...
    def forward_hook(self, module, input, output): ...

def get_abs_min_max(var, ctx): ...
def detect_overflow(var, ctx): ...

class DebugOption(ExplicitEnum):
    UNDERFLOW_OVERFLOW = ...
    TPU_METRICS_DEBUG = ...
