[build-system]
requires = ["setuptools", "setuptools-scm[toml]>=6.2.3", "wheel"]
build-backend = "setuptools.build_meta:__legacy__"

[tool.setuptools_scm]
write_to = "bentoml/_version.py"
git_describe_command = "git describe --dirty --tags --long --first-parent"
version_scheme = "post-release"
fallback_version = "0.0.0"

[tool.coverage.paths]
source = ["bentoml"]

[tool.coverage.run]
branch = true
source = ["bentoml", "bentoml_cli"]
omit = [
  "bentoml/**/*_pb2.py",
  "bentoml/__main__.py",
  "bentoml/_internal/types.py",
  "bentoml/_internal/external_typing/*",
  "bentoml/testing/*",
  "bentoml/io.py",
]

[tool.coverage.report]
show_missing = true
precision = 2
omit = [
  "bentoml/**/*_pb2*.py",
  "bentoml/_internal/external_typing/*",
  "bentoml/_internal/types.py",
  "bentoml/testing/*",
  'bentoml/__main__.py',
  "bentoml/io.py",
]
exclude_lines = [
  "pragma: no cover",
  "def __repr__",
  "raise AssertionError",
  "raise NotImplementedError",
  "raise MissingDependencyException",
  "except ImportError",
  "if __name__ == .__main__.:",
  "if TYPE_CHECKING:",
]

[tool.black]
line-length = 88
exclude = '''
(
  /(
      \.eggs
    | \.git
    | \.tox
    | \.venv
    | _build
    | build
    | dist
    | typings
    | bentoml/grpc
  )/
  | bentoml/_version.py
)
'''
extend-exclude = "(_pb2.py$|_pb2_grpc.py$)"

[tool.pytest.ini_options]
addopts = "-rfEX -p pytester -p no:warnings -x"
python_files = ["test_*.py", "*_test.py"]
testpaths = ["tests"]
markers = ["gpus"]

[tool.pylint.main]
recursive = true
extension-pkg-allow-list = [
  "numpy",
  "tensorflow",
  "torch",
  "paddle",
  "onnxruntime",
  "onnx",
  "pydantic.schema",
]
ignore-paths = ["typings", "bentoml/_internal/external_typing", "bentoml/grpc"]
disable = [
  "import-error",
  "print-statement",
  "parameter-unpacking",
  "unpacking-in-except",
  "old-raise-syntax",
  "backtick",
  "raw-checker-failed",
  "bad-inline-option",
  "locally-disabled",
  "file-ignored",
  "suppressed-message",
  "useless-suppression",
  "deprecated-pragma",
  "apply-builtin",
  "basestring-builtin",
  "buffer-builtin",
  "cmp-builtin",
  "coerce-builtin",
  "execfile-builtin",
  "file-builtin",
  "long-builtin",
  "raw_input-builtin",
  "reduce-builtin",
  "standarderror-builtin",
  "coerce-method",
  "delslice-method",
  "getslice-method",
  "setslice-method",
  "no-absolute-import",
  "old-division",
  "dict-iter-method",
  "dict-view-method",
  "next-method-called",
  "metaclass-assignment",
  "indexing-exception",
  "raising-string",
  "reload-builtin",
  "oct-method",
  "hex-method",
  "nonzero-method",
  "cmp-method",
  "input-builtin",
  "round-builtin",
  "intern-builtin",
  "unichr-builtin",
  "map-builtin-not-iterating",
  "zip-builtin-not-iterating",
  "range-builtin-not-iterating",
  "filter-builtin-not-iterating",
  "using-cmp-argument",
  "exception-message-attribute",
  "invalid-str-codec",
  "sys-max-int",
  "bad-python3-import",
  "deprecated-string-function",
  "deprecated-str-translate-call",
  "deprecated-itertools-function",
  "deprecated-types-field",
  "next-method-defined",
  "dict-items-not-iterating",
  "dict-keys-not-iterating",
  "dict-values-not-iterating",
  "deprecated-operator-function",
  "deprecated-urllib-function",
  "xreadlines-attribute",
  "deprecated-sys-function",
  "exception-escape",
  "comprehension-escape",
  "logging-fstring-interpolation",
  "logging-format-interpolation",
  "logging-not-lazy",
  "C",
  "R",
  "fixme",
  "protected-access",
  "no-member",
  "unsubscriptable-object",
  "raise-missing-from",
  "isinstance-second-argument-not-valid-type",
]
enable = ["c-extension-no-member"]
evaluation = "10.0 - ((float(5 * error + warning + refactor + convention) / statement) * 10)"
msg-template = "{msg_id}:{symbol} [{line:0>3d}:{column:0>2d}] {obj}: {msg}"
output-format = "colorized"
score = true

[tool.pylint.classes]
valid-metaclass-classmethod-first-arg = ["cls", "mcls", "kls"]

[tool.pylint.logging]
logging-format-style = "new" # using f-string formatter for logging.

[tool.pylint.miscellaneous]
notes = ["FIXME", "XXX", "TODO", "NOTE", "WARNING"]

[tool.pylint.refactoring]
# specify functions that should not return
never-returning-functions = ["sys.exit"]

[tool.pylint.spelling]
spelling-ignore-comment-directives = "fmt: on,fmt: off,noqa:,noqa,nosec,isort:skip,mypy:,pylint:,type:"

[tool.pylint.variables]
allowed-redefined-builtins = ["create_bento_servicer.BentoServiceServicer.Call"]
init-import = true

[tool.isort]
profile = "black"
line_length = 88
length_sort = true
force_single_line = true
order_by_type = true
force_alphabetical_sort_within_sections = true
skip_glob = ["typings/*", "test/*", "**/*_pb2.py", "**/*_pb2_grpc.py"]

[tool.pyright]
pythonVersion = "3.10"
include = ["bentoml"]
exclude = [
  'bentoml/_version.py',
  'bentoml/__main__.py',
  'bentoml/_internal/external_typing',
  'bentoml/grpc',
  '**/*_pb2.py',
  "**/*_pb2_grpc.py",
]
analysis.useLibraryCodeForTypes = true
strictListInference = true
strictDictionaryInference = true
strictSetInference = true
strictParameterNoneValue = true
enableTypeIgnoreComments = true
reportGeneralTypeIssues = "error"
reportPropertyTypeMismatch = "error"
reportFunctionMemberAccess = "error"
reportMissingImports = "warning"
reportMissingModuleSource = "warning"
reportMissingTypeStubs = "warning"
reportUnusedImport = "error"
reportUnusedClass = "error"
reportUnusedFunction = "error"
reportUnusedVariable = "error"
reportDuplicateImport = "error"
reportWildcardImportFromLibrary = "error"
reportOptionalSubscript = "error"
reportOptionalMemberAccess = "error"
reportOptionalCall = "error"
reportOptionalIterable = "error"
reportOptionalContextManager = "error"
reportOptionalOperand = "error"
reportTypedDictNotRequiredAccess = "error"
reportUntypedFunctionDecorator = "error"
reportUntypedClassDecorator = "error"
reportUntypedBaseClass = "error"
reportUntypedNamedTuple = "error"
reportPrivateUsage = "error"
reportPrivateImportUsage = "error"
reportConstantRedefinition = "error"
reportIncompatibleMethodOverride = "error"
reportIncompatibleVariableOverride = "error"
reportOverlappingOverload = "error"
reportUninitializedInstanceVariable = "none"
reportInvalidStringEscapeSequence = "error"
reportUnknownParameterType = "error"
reportUnknownArgumentType = "error"
reportUnknownLambdaType = "error"
reportUnknownVariableType = "error"
reportUnknownMemberType = "warning"
reportMissingParameterType = "error"
reportMissingTypeArgument = "error"
reportInvalidTypeVarUse = "error"
reportCallInDefaultInitializer = "none"
reportUnnecessaryIsInstance = "warning"
reportUnnecessaryCast = "error"
reportUnnecessaryComparison = "error"
reportAssertAlwaysTrue = "error"
reportSelfClsParameterName = "error"
reportImplicitStringConcatenation = "none"
reportUndefinedVariable = "error"
reportUnboundVariable = "error"
reportInvalidStubStatement = "error"
reportIncompleteStub = "error"
reportUnsupportedDunderAll = "error"
reportUnusedCallResult = "none"
reportUnusedCoroutine = "error"
