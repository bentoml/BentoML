from distutils.command import build_ext

""" Build swig and f2py sources.
"""

def subst_vars(target, source, d):
    """Substitute any occurrence of @foo@ by d['foo'] from source file into
    target."""
    ...

class build_src(build_ext.build_ext):
    description = ...
    user_options = ...
    boolean_options = ...
    help_options = ...
    def initialize_options(self): ...
    def finalize_options(self): ...
    def run(self): ...
    def build_sources(self): ...
    def build_data_files_sources(self): ...
    def build_npy_pkg_config(self): ...
    def build_py_modules_sources(self): ...
    def build_library_sources(self, lib_name, build_info): ...
    def build_extension_sources(self, ext): ...
    def generate_sources(self, sources, extension): ...
    def filter_py_files(self, sources): ...
    def filter_h_files(self, sources): ...
    def filter_files(self, sources, exts=...): ...
    def template_sources(self, sources, extension): ...
    def pyrex_sources(self, sources, extension):
        """Pyrex not supported; this remains for Cython support (see below)"""
        ...
    def generate_a_pyrex_source(self, base, ext_name, source, extension):
        """Pyrex is not supported, but some projects monkeypatch this method.

        That allows compiling Cython code, see gh-6955.
        This method will remain here for compatibility reasons.
        """
        ...
    def f2py_sources(self, sources, extension): ...
    def swig_sources(self, sources, extension): ...

_f_pyf_ext_match = ...
_header_ext_match = ...
_swig_module_name_match = ...
_has_c_header = ...
_has_cpp_header = ...

def get_swig_target(source): ...
def get_swig_modulename(source): ...

_f2py_module_name_match = ...
_f2py_user_module_name_match = ...

def get_f2py_modulename(source): ...
