{{ metadata.header }}

{% set cached = ['arm32v5', 'arm32v6'] %}

ARG XX_VERSION={{ xx_version }}

FROM --platform=$BUILDPLATFORM {{ xx_image }}:${XX_VERSION} AS xx

FROM {{ metadata.base_image }} as base

{% if "amd64" in cuda %}
{% do cached.append("amd64") %}
FROM base as base-amd64
ENV NVARCH x86_64

    {% if "requires" in cuda.amd64 %}
ENV NVIDIA_REQUIRE_CUDA "{{ cuda.amd64.requires }}"
    {% endif %}

ENV NVIDIA_CUDA_CUDART_VERSION {{ cuda.amd64.components.cudart.version }}
ENV NVIDIA_CUDA_COMPAT_PACKAGE cuda-compat-{{ cuda.version.major }}-{{ cuda.version.minor }}

ENV NVIDIA_ML_REPO_ENABLED 1
ENV NVIDIA_ML_REPO_URL {{ cuda.ml_repo_url }}/${NVARCH}
{% endif %}

{% if "arm64v8" in cuda %}
{% do cached.append("arm64v8") %}
FROM base as base-arm64
ENV NVARCH sbsa

    {% if "requires" in cuda.arm64v8 %}
ENV NVIDIA_REQUIRE_CUDA "{{ cuda.arm64v8.requires }}"
    {% endif %}

ENV NVIDIA_CUDA_CUDART_VERSION {{ cuda.arm64v8.components.cudart.version }}

ENV NVIDIA_ML_REPO_ENABLED 1
ENV NVIDIA_ML_REPO_URL {{ cuda.ml_repo_url }}/${NVARCH}
{% endif -%}

{% for key in metadata.arch_ctx if key not in cached %}
    {% if 'arm' in key %}

FROM base as base-arm
    {% elif 'i386' in key %}

FROM base as base-386
    {% else %}

FROM base as base-{{ key }}
    {% endif %}
{% endfor %}

FROM base-${TARGETARCH}

COPY --from=xx / /

ARG TARGETPLATFORM

ARG TARGETARCH

LABEL maintainer "BentoML Team <contact@bentoml.com>"

# setup ENV and ARG
{% for key, value in metadata.envars.items() if key != "BENTOML_VERSION" %}
{% if key in ["PYTHON_VERSION"] %}
ARG {{ key }}
{% else %}
ENV {{ key }}={{ value }}
{% endif %}
{% endfor %}

ENV PATH /opt/conda/bin:$PATH

ENV DEBIAN_FRONTEND noninteractive

# needed for string substitution
SHELL ["/bin/bash","-exo", "pipefail", "-c"]

RUN xx-apt-get update && \
    xx-apt-get install -q -y --no-install-recommends \
    ca-certificates bash curl gcc wget git gnupg build-essential && \
    xx-apt-get clean && \
    rm -rf /var/lib/apt/lists/*

# Leave these args here to better use the Docker build cache
ARG CONDA_VERSION=latest

RUN set -x && \
    UNAME_M="$(uname -m)" && \
    if [ "${UNAME_M}" = "x86_64" ]; then \
        MINICONDA_URL="https://repo.anaconda.com/miniconda/Miniconda3-${CONDA_VERSION}-Linux-x86_64.sh"; \
        SHA256SUM="1ea2f885b4dbc3098662845560bc64271eb17085387a70c2ba3f29fff6f8d52f"; \
    elif [ "${UNAME_M}" = "s390x" ]; then \
        MINICONDA_URL="https://repo.anaconda.com/miniconda/Miniconda3-${CONDA_VERSION}-Linux-s390x.sh"; \
        SHA256SUM="1faed9abecf4a4ddd4e0d8891fc2cdaa3394c51e877af14ad6b9d4aadb4e90d8"; \
    elif [ "${UNAME_M}" = "aarch64" ]; then \
        MINICONDA_URL="https://repo.anaconda.com/miniconda/Miniconda3-${CONDA_VERSION}-Linux-aarch64.sh"; \
        SHA256SUM="4879820a10718743f945d88ef142c3a4b30dfc8e448d1ca08e019586374b773f"; \
    elif [ "${UNAME_M}" = "ppc64le" ]; then \
        MINICONDA_URL="https://repo.anaconda.com/miniconda/Miniconda3-${CONDA_VERSION}-Linux-ppc64le.sh"; \
        SHA256SUM="fa92ee4773611f58ed9333f977d32bbb64769292f605d518732183be1f3321fa"; \
    fi && \
    wget "${MINICONDA_URL}" -O miniconda.sh -q && \
    echo "${SHA256SUM} miniconda.sh" > shasum && \
    if [ "${CONDA_VERSION}" != "latest" ]; then sha256sum --check --status shasum; fi && \
    mkdir -p /opt && \
    sh miniconda.sh -b -p /opt/conda && \
    rm miniconda.sh shasum && \
    ln -s /opt/conda/etc/profile.d/conda.sh /etc/profile.d/conda.sh && \
    echo ". /opt/conda/etc/profile.d/conda.sh" >> ~/.bashrc && \
    find /opt/conda/ -follow -type f -name '*.a' -delete && \
    find /opt/conda/ -follow -type f -name '*.js.map' -delete && \
    /opt/conda/bin/conda clean -afy


# Install python via conda
RUN conda create -n bentoml-python${PYTHON_VERSION} python=$PYTHON_VERSION && \
    conda install -y pip && \
	conda clean -afy

RUN echo "conda activate bentoml-python${PYTHON_VERSION}" >> ~/.bashrc
