from dataclasses import dataclass
from typing import List, Optional, Tuple
import tensorflow as tf
from .file_utils import ModelOutput

@dataclass
class TFBaseModelOutput(ModelOutput):
    last_hidden_state: tf.Tensor = ...
    hidden_states: Optional[Tuple[tf.Tensor]] = ...
    attentions: Optional[Tuple[tf.Tensor]] = ...

@dataclass
class TFBaseModelOutputWithPooling(ModelOutput):
    last_hidden_state: tf.Tensor = ...
    pooler_output: tf.Tensor = ...
    hidden_states: Optional[Tuple[tf.Tensor]] = ...
    attentions: Optional[Tuple[tf.Tensor]] = ...

@dataclass
class TFBaseModelOutputWithPast(ModelOutput):
    last_hidden_state: tf.Tensor = ...
    past_key_values: Optional[List[tf.Tensor]] = ...
    hidden_states: Optional[Tuple[tf.Tensor]] = ...
    attentions: Optional[Tuple[tf.Tensor]] = ...

@dataclass
class TFBaseModelOutputWithCrossAttentions(ModelOutput):
    last_hidden_state: tf.Tensor = ...
    hidden_states: Optional[Tuple[tf.Tensor]] = ...
    attentions: Optional[Tuple[tf.Tensor]] = ...
    cross_attentions: Optional[Tuple[tf.Tensor]] = ...

@dataclass
class TFBaseModelOutputWithPastAndCrossAttentions(ModelOutput):
    last_hidden_state: tf.Tensor = ...
    past_key_values: Optional[List[tf.Tensor]] = ...
    hidden_states: Optional[Tuple[tf.Tensor]] = ...
    attentions: Optional[Tuple[tf.Tensor]] = ...
    cross_attentions: Optional[Tuple[tf.Tensor]] = ...

@dataclass
class TFSeq2SeqModelOutput(ModelOutput):
    last_hidden_state: tf.Tensor = ...
    past_key_values: Optional[List[tf.Tensor]] = ...
    decoder_hidden_states: Optional[Tuple[tf.Tensor]] = ...
    decoder_attentions: Optional[Tuple[tf.Tensor]] = ...
    cross_attentions: Optional[Tuple[tf.Tensor]] = ...
    encoder_last_hidden_state: Optional[tf.Tensor] = ...
    encoder_hidden_states: Optional[Tuple[tf.Tensor]] = ...
    encoder_attentions: Optional[Tuple[tf.Tensor]] = ...

@dataclass
class TFCausalLMOutput(ModelOutput):
    loss: Optional[tf.Tensor] = ...
    logits: tf.Tensor = ...
    hidden_states: Optional[Tuple[tf.Tensor]] = ...
    attentions: Optional[Tuple[tf.Tensor]] = ...

@dataclass
class TFCausalLMOutputWithPast(ModelOutput):
    loss: Optional[tf.Tensor] = ...
    logits: tf.Tensor = ...
    past_key_values: Optional[List[tf.Tensor]] = ...
    hidden_states: Optional[Tuple[tf.Tensor]] = ...
    attentions: Optional[Tuple[tf.Tensor]] = ...

@dataclass
class TFMaskedLMOutput(ModelOutput):
    loss: Optional[tf.Tensor] = ...
    logits: tf.Tensor = ...
    hidden_states: Optional[Tuple[tf.Tensor]] = ...
    attentions: Optional[Tuple[tf.Tensor]] = ...

@dataclass
class TFSeq2SeqLMOutput(ModelOutput):
    loss: Optional[tf.Tensor] = ...
    logits: tf.Tensor = ...
    past_key_values: Optional[List[tf.Tensor]] = ...
    decoder_hidden_states: Optional[Tuple[tf.Tensor]] = ...
    decoder_attentions: Optional[Tuple[tf.Tensor]] = ...
    cross_attentions: Optional[Tuple[tf.Tensor]] = ...
    encoder_last_hidden_state: Optional[tf.Tensor] = ...
    encoder_hidden_states: Optional[Tuple[tf.Tensor]] = ...
    encoder_attentions: Optional[Tuple[tf.Tensor]] = ...

@dataclass
class TFNextSentencePredictorOutput(ModelOutput):
    loss: Optional[tf.Tensor] = ...
    logits: tf.Tensor = ...
    hidden_states: Optional[Tuple[tf.Tensor]] = ...
    attentions: Optional[Tuple[tf.Tensor]] = ...

@dataclass
class TFSequenceClassifierOutput(ModelOutput):
    loss: Optional[tf.Tensor] = ...
    logits: tf.Tensor = ...
    hidden_states: Optional[Tuple[tf.Tensor]] = ...
    attentions: Optional[Tuple[tf.Tensor]] = ...

@dataclass
class TFSeq2SeqSequenceClassifierOutput(ModelOutput):
    loss: Optional[tf.Tensor] = ...
    logits: tf.Tensor = ...
    past_key_values: Optional[List[tf.Tensor]] = ...
    decoder_hidden_states: Optional[Tuple[tf.Tensor]] = ...
    decoder_attentions: Optional[Tuple[tf.Tensor]] = ...
    encoder_last_hidden_state: Optional[tf.Tensor] = ...
    encoder_hidden_states: Optional[Tuple[tf.Tensor]] = ...
    encoder_attentions: Optional[Tuple[tf.Tensor]] = ...

@dataclass
class TFMultipleChoiceModelOutput(ModelOutput):
    loss: Optional[tf.Tensor] = ...
    logits: tf.Tensor = ...
    hidden_states: Optional[Tuple[tf.Tensor]] = ...
    attentions: Optional[Tuple[tf.Tensor]] = ...

@dataclass
class TFTokenClassifierOutput(ModelOutput):
    loss: Optional[tf.Tensor] = ...
    logits: tf.Tensor = ...
    hidden_states: Optional[Tuple[tf.Tensor]] = ...
    attentions: Optional[Tuple[tf.Tensor]] = ...

@dataclass
class TFQuestionAnsweringModelOutput(ModelOutput):
    loss: Optional[tf.Tensor] = ...
    start_logits: tf.Tensor = ...
    end_logits: tf.Tensor = ...
    hidden_states: Optional[Tuple[tf.Tensor]] = ...
    attentions: Optional[Tuple[tf.Tensor]] = ...

@dataclass
class TFSeq2SeqQuestionAnsweringModelOutput(ModelOutput):
    loss: Optional[tf.Tensor] = ...
    start_logits: tf.Tensor = ...
    end_logits: tf.Tensor = ...
    past_key_values: Optional[List[tf.Tensor]] = ...
    decoder_hidden_states: Optional[Tuple[tf.Tensor]] = ...
    decoder_attentions: Optional[Tuple[tf.Tensor]] = ...
    encoder_last_hidden_state: Optional[tf.Tensor] = ...
    encoder_hidden_states: Optional[Tuple[tf.Tensor]] = ...
    encoder_attentions: Optional[Tuple[tf.Tensor]] = ...

@dataclass
class TFSequenceClassifierOutputWithPast(ModelOutput):
    loss: Optional[tf.Tensor] = ...
    logits: tf.Tensor = ...
    past_key_values: Optional[List[tf.Tensor]] = ...
    hidden_states: Optional[Tuple[tf.Tensor]] = ...
    attentions: Optional[Tuple[tf.Tensor]] = ...
