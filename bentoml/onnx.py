import typing as t

from simple_di import Provide, inject

from ._internal.configuration.containers import BentoMLContainer
from ._internal.models import SAVE_NAMESPACE
from ._internal.runner import Runner
from .exceptions import MissingDependencyException

if t.TYPE_CHECKING:  # pragma: no cover
    # pylint: disable=unused-import
    from _internal.models.store import ModelStore

try:
    ...
except ImportError:  # pragma: no cover
    raise MissingDependencyException("")


@inject
def load(
    tag: str,
    model_store: "ModelStore" = Provide[BentoMLContainer.model_store],
):
    """
    Load a model from BentoML local modelstore with given name.

    Args:
        tag (`str`):
            Tag of a saved model in BentoML local modelstore.
        model_store (`~bentoml._internal.models.store.ModelStore`, default to `BentoMLContainer.model_store`):
            BentoML modelstore, provided by DI Container.

    Returns:
        an instance of `xgboost.core.Booster` from BentoML modelstore.

    Examples::
    """  # noqa


@inject
def save(
    name: str,
    model: t.Any,
    *,
    metadata: t.Union[None, t.Dict[str, t.Any]] = None,
    model_store: "ModelStore" = Provide[BentoMLContainer.model_store],
) -> str:
    """
    Save a model instance to BentoML modelstore.

    Args:
        name (`str`):
            Name for given model instance. This should pass Python identifier check.
        model (`xgboost.core.Booster`):
            Instance of model to be saved
        metadata (`t.Optional[t.Dict[str, t.Any]]`, default to `None`):
            Custom metadata for given model.
        model_store (`~bentoml._internal.models.store.ModelStore`, default to `BentoMLContainer.model_store`):
            BentoML modelstore, provided by DI Container.

    Returns:
        tag (`str` with a format `name:version`) where `name` is the defined name user
        set for their models, and version will be generated by BentoML.

    Examples::
    """  # noqa


class _ONNXRunner(Runner):
    @inject
    def __init__(
        self,
        tag: str,
        resource_quota: t.Dict[str, t.Any],
        batch_options: t.Dict[str, t.Any],
        model_store: "ModelStore" = Provide[BentoMLContainer.model_store],
    ):
        super().__init__(tag, resource_quota, batch_options)

    @property
    def required_models(self) -> t.List[str]:
        ...

    @property
    def num_concurrency_per_replica(self) -> int:
        ...

    @property
    def num_replica(self) -> int:
        ...

    # pylint: disable=arguments-differ,attribute-defined-outside-init
    def _setup(self) -> None:
        ...

    # pylint: disable=arguments-differ,attribute-defined-outside-init
    def _run_batch(self, input_data) -> t.Any:
        ...


@inject
def load_runner(
    tag: str,
    *,
    resource_quota: t.Union[None, t.Dict[str, t.Any]] = None,
    batch_options: t.Union[None, t.Dict[str, t.Any]] = None,
    model_store: "ModelStore" = Provide[BentoMLContainer.model_store],
) -> "_ONNXRunner":
    """
    Runner represents a unit of serving logic that can be scaled horizontally to
    maximize throughput. `bentoml.xgboost.load_runner` implements a Runner class that
    wrap around a Xgboost booster model, which optimize it for the BentoML runtime.

    Args:
        tag (`str`):
            Model tag to retrieve model from modelstore
        resource_quota (`t.Dict[str, t.Any]`, default to `None`):
            Dictionary to configure resources allocation for runner.
        batch_options (`t.Dict[str, t.Any]`, default to `None`):
            Dictionary to configure batch options for runner in a service context.
        model_store (`~bentoml._internal.models.store.ModelStore`, default to `BentoMLContainer.model_store`):
            BentoML modelstore, provided by DI Container.

    Returns:
        Runner instances for `bentoml.xgboost` model

    Examples::
    """  # noqa
    return _ONNXRunner(
        tag=tag,
        resource_quota=resource_quota,
        batch_options=batch_options,
        model_store=model_store,
    )


# import os
# import shutil
# import typing as t
#
# import bentoml._internal.constants as _const
#
# from ._internal.models.base import MODEL_NAMESPACE, Model
# from ._internal.types import GenericDictType, PathType
# from ._internal.utils import LazyLoader
# from .exceptions import BentoMLException
#
# _exc = _const.IMPORT_ERROR_MSG.format(
#     fwr="onnxruntime & onnx",
#     module=__name__,
#     inst="Refers to https://onnxruntime.ai/"
#     " to correctly install backends options"
#     " and platform suitable for your application usecase.",
# )
#
# if t.TYPE_CHECKING:  # pylint: disable=unused-import # pragma: no cover
#     import onnx
#     import onnxruntime
# else:
#     onnx = LazyLoader("onnx", globals(), "onnx", exc_msg=_exc)
#     onnxruntime = LazyLoader("onnxruntime", globals(), "onnxruntime", exc_msg=_exc)
#
#
# def _yield_first_val(iterable):
#     if isinstance(iterable, tuple):
#         yield iterable[0]
#     elif isinstance(iterable, str):
#         yield iterable
#     else:
#         yield from iterable
#
#
# def flatten_list(lst) -> t.List[str]:
#     if not isinstance(lst, list):
#         raise AttributeError
#     return [k for i in lst for k in _yield_first_val(i)]
#
#
# class ONNXModel(Model):
#     """
#     Model class for saving/loading :obj:`onnx` models.
#
#     Args:
#         model (`str`):
#             Given filepath or protobuf of converted model.
#             Make sure to use corresponding library to convert
#             model from different frameworks to ONNX format.
#         backend (`str`, `optional`, default to `onnxruntime`):
#             Name of ONNX inference runtime. ["onnxruntime", "onnxruntime-gpu"]
#         metadata (`GenericDictType`,  `optional`, default to `None`):
#             Class metadata.
#
#     Raises:
#         MissingDependencyException:
#             :obj:`onnx` is required by ONNXModel
#         NotImplementedError:
#             :obj:`backend` as onnx runtime is not supported by ONNX
#         BentoMLException:
#             :obj:`backend` as onnx runtime is not supported by ONNXModel
#         InvalidArgument:
#             :obj:`path` passed in :meth:`~save` is not either
#              a :obj:`onnx.ModelProto` or filepath
#
#     Example usage under :code:`train.py`::
#
#         TODO:
#
#     One then can define :code:`bento.py`::
#
#         TODO:
#     """
#
#     SUPPORTED_ONNX_BACKEND: t.List[str] = ["onnxruntime", "onnxruntime-gpu"]
#     ONNX_EXTENSION: str = ".onnx"
#
#     def __init__(
#         self,
#         model: t.Union[PathType, "onnx.ModelProto"],
#         backend: t.Optional[str] = "onnxruntime",
#         metadata: t.Optional[GenericDictType] = None,
#     ):
#         super(ONNXModel, self).__init__(model, metadata=metadata)
#         if backend not in self.SUPPORTED_ONNX_BACKEND:
#             raise BentoMLException(
#                 f'"{backend}" runtime is currently not supported for ONNXModel'
#             )
#         self._backend = backend
#
#     @classmethod
#     def __get_model_fpath(cls, path: PathType) -> PathType:
#         return os.path.join(path, f"{MODEL_NAMESPACE}{cls.ONNX_EXTENSION}")
#
#     @classmethod
#     def load(  # pylint: disable=arguments-differ
#         cls,
#         path: t.Union[PathType, "onnx.ModelProto"],
#         backend: t.Optional[str] = "onnxruntime",
#         providers: t.List[t.Union[str, t.Tuple[str, dict]]] = None,
#         sess_opts: t.Optional["onnxruntime.SessionOptions"] = None,
#     ) -> "onnxruntime.InferenceSession":
#         if backend not in cls.SUPPORTED_ONNX_BACKEND:
#             raise BentoMLException(
#                 f'"{backend}" runtime is currently not supported for ONNXModel'
#             )
#         if providers is not None:
#             if not all(
#                 i in onnxruntime.get_all_providers() for i in flatten_list(providers)
#             ):
#                 raise BentoMLException(
#                     f"'{providers}' can't be parsed by `onnxruntime`"
#                 )
#         else:
#             providers = onnxruntime.get_available_providers()
#         if isinstance(path, onnx.ModelProto):
#             return onnxruntime.InferenceSession(
#                 path.SerializeToString(), sess_options=sess_opts, providers=providers
#             )
#         else:
#             _get_path = str(cls.__get_model_fpath(path))
#             return onnxruntime.InferenceSession(
#                 _get_path, sess_options=sess_opts, providers=providers
#             )
#
#     def save(self, path: t.Union[PathType, "onnx.ModelProto"]) -> None:
#         if isinstance(self._model, onnx.ModelProto):
#             onnx.save_model(self._model, self.__get_model_fpath(path))
#         else:
#             shutil.copyfile(self._model, str(self.__get_model_fpath(path)))
