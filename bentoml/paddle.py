import typing as t

from simple_di import Provide, inject

from ._internal.configuration.containers import BentoMLContainer
from ._internal.models import SAVE_NAMESPACE
from ._internal.runner import Runner
from .exceptions import MissingDependencyException

if t.TYPE_CHECKING:  # pragma: no cover
    # pylint: disable=unused-import
    from _internal.models.store import ModelStore

try:
    ...
except ImportError:  # pragma: no cover
    raise MissingDependencyException("")


@inject
def load(
    tag: str,
    model_store: "ModelStore" = Provide[BentoMLContainer.model_store],
):
    """
    Load a model from BentoML local modelstore with given name.

    Args:
        tag (`str`):
            Tag of a saved model in BentoML local modelstore.
        model_store (`~bentoml._internal.models.store.ModelStore`, default to `BentoMLContainer.model_store`):
            BentoML modelstore, provided by DI Container.

    Returns:
        an instance of `xgboost.core.Booster` from BentoML modelstore.

    Examples::
    """  # noqa


@inject
def save(
    name: str,
    model: t.Any,
    *,
    metadata: t.Union[None, t.Dict[str, t.Any]] = None,
    model_store: "ModelStore" = Provide[BentoMLContainer.model_store],
) -> str:
    """
    Save a model instance to BentoML modelstore.

    Args:
        name (`str`):
            Name for given model instance. This should pass Python identifier check.
        model (`xgboost.core.Booster`):
            Instance of model to be saved
        metadata (`t.Optional[t.Dict[str, t.Any]]`, default to `None`):
            Custom metadata for given model.
        model_store (`~bentoml._internal.models.store.ModelStore`, default to `BentoMLContainer.model_store`):
            BentoML modelstore, provided by DI Container.

    Returns:
        tag (`str` with a format `name:version`) where `name` is the defined name user
        set for their models, and version will be generated by BentoML.

    Examples::
    """  # noqa


class _PaddlePaddleRunner(Runner):
    @inject
    def __init__(
        self,
        tag: str,
        resource_quota: t.Dict[str, t.Any],
        batch_options: t.Dict[str, t.Any],
        model_store: "ModelStore" = Provide[BentoMLContainer.model_store],
    ):
        super().__init__(tag, resource_quota, batch_options)

    @property
    def required_models(self) -> t.List[str]:
        ...

    @property
    def num_concurrency_per_replica(self) -> int:
        ...

    @property
    def num_replica(self) -> int:
        ...

    # pylint: disable=arguments-differ,attribute-defined-outside-init
    def _setup(self) -> None:
        ...

    # pylint: disable=arguments-differ,attribute-defined-outside-init
    def _run_batch(self, input_data) -> t.Any:
        ...


@inject
def load_runner(
    tag: str,
    *,
    resource_quota: t.Union[None, t.Dict[str, t.Any]] = None,
    batch_options: t.Union[None, t.Dict[str, t.Any]] = None,
    model_store: "ModelStore" = Provide[BentoMLContainer.model_store],
) -> "_PaddlePaddleRunner":
    """
    Runner represents a unit of serving logic that can be scaled horizontally to
    maximize throughput. `bentoml.xgboost.load_runner` implements a Runner class that
    wrap around a Xgboost booster model, which optimize it for the BentoML runtime.

    Args:
        tag (`str`):
            Model tag to retrieve model from modelstore
        resource_quota (`t.Dict[str, t.Any]`, default to `None`):
            Dictionary to configure resources allocation for runner.
        batch_options (`t.Dict[str, t.Any]`, default to `None`):
            Dictionary to configure batch options for runner in a service context.
        model_store (`~bentoml._internal.models.store.ModelStore`, default to `BentoMLContainer.model_store`):
            BentoML modelstore, provided by DI Container.

    Returns:
        Runner instances for `bentoml.xgboost` model

    Examples::
    """  # noqa
    return _PaddlePaddleRunner(
        tag=tag,
        resource_quota=resource_quota,
        batch_options=batch_options,
        model_store=model_store,
    )


# import os
# import typing as t
# from distutils.dir_util import copy_tree
#
# import bentoml._internal.constants as _const
#
# from ._internal.models.base import MODEL_NAMESPACE, Model
# from ._internal.types import GenericDictType, PathType
# from ._internal.utils import LazyLoader
#
# _paddle_exc = _const.IMPORT_ERROR_MSG.format(
#     fwr="paddlepaddle",
#     module=__name__,
#     inst="`pip install paddlepaddle` for CPU options"
#     " or `pip install paddlepaddle-gpu` for GPU options.",
# )
#
# _hub_exc = _const.IMPORT_ERROR_MSG.format(
#     fwr="paddlehub",
#     module=__name__,
#     inst="`pip install paddlepaddle`," " then `pip install paddlehub`",
# )
#
# if t.TYPE_CHECKING:  # pylint: disable=unused-import # pragma: no cover
#     import paddle
#     import paddle.inference as pi
#     import paddlehub as hub
# else:
#     paddle = LazyLoader("paddle", globals(), "paddle", exc_msg=_paddle_exc)
#     pi = LazyLoader("pi", globals(), "paddle.inference", exc_msg=_paddle_exc)
#     hub = LazyLoader("hub", globals(), "paddlehub", exc_msg=_hub_exc)
#
#
# class PaddlePaddleModel(Model):
#     """
#     Model class for saving/loading :obj:`paddlepaddle` models.
#
#     Args:
#         model (`Union[paddle.nn.Layer, paddle.inference.Predictor]`):
#             Every PaddlePaddle model is of type :obj:`paddle.nn.Layer`
#         metadata (`GenericDictType`, `optional`, default to `None`):
#             Class metadata
#
#     Raises:
#         MissingDependencyException:
#             :obj:`paddlepaddle` is required by PaddlePaddleModel
#
#     Example usage under :code:`train.py`::
#
#         TODO:
#
#     One then can define :code:`bento.py`::
#
#         TODO:
#     """
#
#     PADDLE_MODEL_EXTENSION: str = ".pdmodel"
#     PADDLE_PARAMS_EXTENSION: str = ".pdiparams"
#
#     _model: t.Union["paddle.nn.Layer", "pi.Predictor"]
#
#     def __init__(
#         self,
#         model: t.Union["paddle.nn.Layer", "pi.Predictor"],
#         metadata: t.Optional[GenericDictType] = None,
#     ):
#         super(PaddlePaddleModel, self).__init__(model, metadata=metadata)
#
#     @classmethod
#     def load(  # pylint: disable=arguments-differ
#         cls, path: PathType, config: t.Optional["pi.Config"] = None
#     ) -> "pi.Predictor":
#         # https://github.com/PaddlePaddle/Paddle/blob/develop/paddle/fluid/inference/api/analysis_config.cc
#         if config is None:
#             config = pi.Config(
#                 os.path.join(path, f"{MODEL_NAMESPACE}{cls.PADDLE_MODEL_EXTENSION}"),
#                 os.path.join(path, f"{MODEL_NAMESPACE}{cls.PADDLE_PARAMS_EXTENSION}"),
#             )
#             config.enable_memory_optim()
#         return pi.create_predictor(config)
#
#     def save(self, path: PathType) -> None:
#         # Override the model path if temp dir was set
#         # TODO(aarnphm): What happens if model is a paddle.inference.Predictor?
#         paddle.jit.save(self._model, os.path.join(path, MODEL_NAMESPACE))
#
#
# class PaddleHubModel(Model):
#     """
#     Model class for saving/loading :obj:`paddlehub` models.
#
#     Args:
#         model (`Union[str, bytes, os.PathLike]`):
#             Either a custom :obj:`paddlehub.Module` directory, or
#             pretrained model from PaddleHub registry.
#         metadata (`GenericDictType`, `optional`, default to `None`):
#             Class metadata
#
#     Raises:
#         MissingDependencyException:
#             :obj:`paddlehub` and :obj:`paddlepaddle` are required by PaddleHubModel
#
#     Example usage under :code:`train.py`::
#
#         TODO:
#
#     One then can define :code:`bento.py`::
#
#         TODO:
#
#     """
#
#     def __init__(self, model: PathType, metadata: t.Optional[GenericDictType] = None):
#         if os.path.isdir(model):
#             module = hub.Module(directory=model)
#             self._dir = str(model)
#         else:
#             # TODO: refactor to skip init Module in memory
#             module = hub.Module(name=model)
#             self._dir = ""
#         super(PaddleHubModel, self).__init__(module, metadata=metadata)
#
#     def save(self, path: PathType) -> None:
#         if self._dir != "":
#             copy_tree(self._dir, str(path))
#         else:
#             self._model.save_inference_model(path)
#
#     @classmethod
#     def load(cls, path: PathType) -> t.Any:
#         # https://github.com/PaddlePaddle/PaddleHub/blob/release/v2.1/paddlehub/module/module.py#L233
#         # we don't have a custom name, so this should be stable
#         # TODO: fix a bug when loading as module
#         model_fpath = os.path.join(path, "__model__")
#         if os.path.isfile(model_fpath):
#             import paddlehub.module.manager as manager  # noqa
#
#             man = manager.LocalModuleManager()
#             module_class = man.install(directory=str(path))
#             module_class.directory = str(path)
#             return module_class
#         else:
#             # custom module that installed from directory
#             return hub.Module(directory=str(path))
