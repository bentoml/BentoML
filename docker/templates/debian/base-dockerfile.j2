{{ metadata.header }}
{% set cached = ['arm32v5', 'arm32v6'] %}
{% if '11-slim' in metadata.base_image %}
{% set py_img = 'slim-bullseye' %}
{% elif '10-slim' in metadata.base_image %}
{% set py_img = 'slim-buster' %}
{% endif %}
ARG XX_VERSION={{ xx_version }}

FROM --platform=$BUILDPLATFORM {{ xx_image }}:${XX_VERSION} AS xx

ARG PYTHON_VERSION

FROM --platform=$BUILDPLATFORM python:${PYTHON_VERSION}-{{ py_img }} as base

{% if "amd64" in cuda %}
{% do cached.append("amd64") %}
FROM base as base-amd64
ENV NVARCH x86_64

    {% if "requires" in cuda.amd64 %}
ENV NVIDIA_REQUIRE_CUDA "{{ cuda.amd64.requires }}"
    {% endif %}

ENV NVIDIA_CUDA_CUDART_VERSION {{ cuda.amd64.components.cudart.version }}
ENV NVIDIA_CUDA_COMPAT_PACKAGE cuda-compat-{{ cuda.version.major }}-{{ cuda.version.minor }}

ENV NVIDIA_ML_REPO_ENABLED 1
ENV NVIDIA_ML_REPO_URL {{ cuda.ml_repo_url }}/${NVARCH}
{% endif %}

{% if "arm64v8" in cuda %}
{% do cached.append("arm64v8") %}
FROM base as base-arm64
ENV NVARCH sbsa

    {% if "requires" in cuda.arm64v8 %}
ENV NVIDIA_REQUIRE_CUDA "{{ cuda.arm64v8.requires }}"
    {% endif %}

ENV NVIDIA_CUDA_CUDART_VERSION {{ cuda.arm64v8.components.cudart.version }}

ENV NVIDIA_ML_REPO_ENABLED 1
ENV NVIDIA_ML_REPO_URL {{ cuda.ml_repo_url }}/${NVARCH}
{% endif -%}
{% for key in metadata.arch_context if key not in cached -%}
    {% if 'arm' in key %}

FROM base as base-arm
    {% elif 'i386' in key %}

FROM base as base-386
    {% else %}

FROM base as base-{{ key }}
    {% endif %}
{% endfor %}

FROM base-${TARGETARCH}

COPY --from=xx / /

ARG TARGETPLATFORM

ARG TARGETARCH
{% for key, value in metadata.envars.items() if key != "BENTOML_VERSION" %}
{% if key in ["PYTHON_VERSION"] %}

ARG {{ key }}
{% else %}

ENV {{ key }}={{ value }}
{% endif %}
{% endfor %}

ENV DEBIAN_FRONTEND noninteractive

# needed for string substitution
SHELL ["/bin/bash","-exo", "pipefail", "-c"]

RUN xx-apt-get update \
    && xx-apt-get install -q -y --no-install-recommends gcc python3-dev \
    && xx-apt-get clean \
    && rm -rf /var/lib/{apt,dpkg,cache,log}
