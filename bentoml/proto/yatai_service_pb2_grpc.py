# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import common_pb2 as common__pb2
import deployment_pb2 as deployment__pb2
import repository_pb2 as repository__pb2
import yatai_service_pb2 as yatai__service__pb2


class YataiStub(object):
  """BentoML deployment and management service
  Config DeployTarget
  yatai start --deploy-taget-config
  [aws][sagemaker]
  [google]
  [kubecfg]
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.HealthCheck = channel.unary_unary(
        '/bentoml.Yatai/HealthCheck',
        request_serializer=common__pb2.Empty.SerializeToString,
        response_deserializer=yatai__service__pb2.HealthCheckResponse.FromString,
        )
    self.ApplyDeployment = channel.unary_unary(
        '/bentoml.Yatai/ApplyDeployment',
        request_serializer=deployment__pb2.ApplyDeploymentRequest.SerializeToString,
        response_deserializer=deployment__pb2.ApplyDeploymentResponse.FromString,
        )
    self.DeleteDeployment = channel.unary_unary(
        '/bentoml.Yatai/DeleteDeployment',
        request_serializer=deployment__pb2.DeleteDeploymentRequest.SerializeToString,
        response_deserializer=deployment__pb2.DeleteDeploymentResponse.FromString,
        )
    self.GetDeployment = channel.unary_unary(
        '/bentoml.Yatai/GetDeployment',
        request_serializer=deployment__pb2.GetDeploymentRequest.SerializeToString,
        response_deserializer=deployment__pb2.GetDeploymentResponse.FromString,
        )
    self.DescribeDeployment = channel.unary_unary(
        '/bentoml.Yatai/DescribeDeployment',
        request_serializer=deployment__pb2.DescribeDeploymentRequest.SerializeToString,
        response_deserializer=deployment__pb2.DescribeDeploymentResponse.FromString,
        )
    self.AddBentoService = channel.unary_unary(
        '/bentoml.Yatai/AddBentoService',
        request_serializer=repository__pb2.AddBentoServiceRequest.SerializeToString,
        response_deserializer=repository__pb2.AddBentoServiceResponse.FromString,
        )
    self.RemoveBentoService = channel.unary_unary(
        '/bentoml.Yatai/RemoveBentoService',
        request_serializer=repository__pb2.RemoveBentoServiceRequest.SerializeToString,
        response_deserializer=repository__pb2.RemoveBentoServiceResponse.FromString,
        )
    self.GetBentoService = channel.unary_unary(
        '/bentoml.Yatai/GetBentoService',
        request_serializer=repository__pb2.GetBentoServiceRequest.SerializeToString,
        response_deserializer=repository__pb2.GetBentoServiceResponse.FromString,
        )


class YataiServicer(object):
  """BentoML deployment and management service
  Config DeployTarget
  yatai start --deploy-taget-config
  [aws][sagemaker]
  [google]
  [kubecfg]
  """

  def HealthCheck(self, request, context):
    """Common RPC
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def ApplyDeployment(self, request, context):
    """Deployment Management RPC
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def DeleteDeployment(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def GetDeployment(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def DescribeDeployment(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def AddBentoService(self, request, context):
    """BentoService Repository RPC
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def RemoveBentoService(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def GetBentoService(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_YataiServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'HealthCheck': grpc.unary_unary_rpc_method_handler(
          servicer.HealthCheck,
          request_deserializer=common__pb2.Empty.FromString,
          response_serializer=yatai__service__pb2.HealthCheckResponse.SerializeToString,
      ),
      'ApplyDeployment': grpc.unary_unary_rpc_method_handler(
          servicer.ApplyDeployment,
          request_deserializer=deployment__pb2.ApplyDeploymentRequest.FromString,
          response_serializer=deployment__pb2.ApplyDeploymentResponse.SerializeToString,
      ),
      'DeleteDeployment': grpc.unary_unary_rpc_method_handler(
          servicer.DeleteDeployment,
          request_deserializer=deployment__pb2.DeleteDeploymentRequest.FromString,
          response_serializer=deployment__pb2.DeleteDeploymentResponse.SerializeToString,
      ),
      'GetDeployment': grpc.unary_unary_rpc_method_handler(
          servicer.GetDeployment,
          request_deserializer=deployment__pb2.GetDeploymentRequest.FromString,
          response_serializer=deployment__pb2.GetDeploymentResponse.SerializeToString,
      ),
      'DescribeDeployment': grpc.unary_unary_rpc_method_handler(
          servicer.DescribeDeployment,
          request_deserializer=deployment__pb2.DescribeDeploymentRequest.FromString,
          response_serializer=deployment__pb2.DescribeDeploymentResponse.SerializeToString,
      ),
      'AddBentoService': grpc.unary_unary_rpc_method_handler(
          servicer.AddBentoService,
          request_deserializer=repository__pb2.AddBentoServiceRequest.FromString,
          response_serializer=repository__pb2.AddBentoServiceResponse.SerializeToString,
      ),
      'RemoveBentoService': grpc.unary_unary_rpc_method_handler(
          servicer.RemoveBentoService,
          request_deserializer=repository__pb2.RemoveBentoServiceRequest.FromString,
          response_serializer=repository__pb2.RemoveBentoServiceResponse.SerializeToString,
      ),
      'GetBentoService': grpc.unary_unary_rpc_method_handler(
          servicer.GetBentoService,
          request_deserializer=repository__pb2.GetBentoServiceRequest.FromString,
          response_serializer=repository__pb2.GetBentoServiceResponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'bentoml.Yatai', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
