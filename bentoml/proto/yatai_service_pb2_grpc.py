# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import common_pb2 as common__pb2
import deployment_pb2 as deployment__pb2
import repository_pb2 as repository__pb2
import yatai_service_pb2 as yatai__service__pb2


class YataiStub(object):
  """Yatai: stateful service that manages and deploys BentoService
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.HealthCheck = channel.unary_unary(
        '/bentoml.Yatai/HealthCheck',
        request_serializer=common__pb2.Empty.SerializeToString,
        response_deserializer=yatai__service__pb2.HealthCheckResponse.FromString,
        )
    self.GetYataiServiceVersion = channel.unary_unary(
        '/bentoml.Yatai/GetYataiServiceVersion',
        request_serializer=common__pb2.Empty.SerializeToString,
        response_deserializer=yatai__service__pb2.GetYataiServiceVersionResponse.FromString,
        )
    self.ApplyDeployment = channel.unary_unary(
        '/bentoml.Yatai/ApplyDeployment',
        request_serializer=deployment__pb2.ApplyDeploymentRequest.SerializeToString,
        response_deserializer=deployment__pb2.ApplyDeploymentResponse.FromString,
        )
    self.DeleteDeployment = channel.unary_unary(
        '/bentoml.Yatai/DeleteDeployment',
        request_serializer=deployment__pb2.DeleteDeploymentRequest.SerializeToString,
        response_deserializer=deployment__pb2.DeleteDeploymentResponse.FromString,
        )
    self.GetDeployment = channel.unary_unary(
        '/bentoml.Yatai/GetDeployment',
        request_serializer=deployment__pb2.GetDeploymentRequest.SerializeToString,
        response_deserializer=deployment__pb2.GetDeploymentResponse.FromString,
        )
    self.DescribeDeployment = channel.unary_unary(
        '/bentoml.Yatai/DescribeDeployment',
        request_serializer=deployment__pb2.DescribeDeploymentRequest.SerializeToString,
        response_deserializer=deployment__pb2.DescribeDeploymentResponse.FromString,
        )
    self.ListDeployments = channel.unary_unary(
        '/bentoml.Yatai/ListDeployments',
        request_serializer=deployment__pb2.ListDeploymentsRequest.SerializeToString,
        response_deserializer=deployment__pb2.ListDeploymentsResponse.FromString,
        )
    self.AddBento = channel.unary_unary(
        '/bentoml.Yatai/AddBento',
        request_serializer=repository__pb2.AddBentoRequest.SerializeToString,
        response_deserializer=repository__pb2.AddBentoResponse.FromString,
        )
    self.UploadBento = channel.stream_unary(
        '/bentoml.Yatai/UploadBento',
        request_serializer=common__pb2.Chunk.SerializeToString,
        response_deserializer=repository__pb2.UploadBentoResponse.FromString,
        )
    self.RemoveBento = channel.unary_unary(
        '/bentoml.Yatai/RemoveBento',
        request_serializer=repository__pb2.RemoveBentoRequest.SerializeToString,
        response_deserializer=repository__pb2.RemoveBentoResponse.FromString,
        )
    self.GetBento = channel.unary_unary(
        '/bentoml.Yatai/GetBento',
        request_serializer=repository__pb2.GetBentoRequest.SerializeToString,
        response_deserializer=repository__pb2.GetBentoResponse.FromString,
        )
    self.ListBento = channel.unary_unary(
        '/bentoml.Yatai/ListBento',
        request_serializer=repository__pb2.ListBentoRequest.SerializeToString,
        response_deserializer=repository__pb2.ListBentoResponse.FromString,
        )


class YataiServicer(object):
  """Yatai: stateful service that manages and deploys BentoService
  """

  def HealthCheck(self, request, context):
    """Common RPC
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def GetYataiServiceVersion(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def ApplyDeployment(self, request, context):
    """Deployment Management RPC
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def DeleteDeployment(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def GetDeployment(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def DescribeDeployment(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def ListDeployments(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def AddBento(self, request, context):
    """Bento Repository RPC
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def UploadBento(self, request_iterator, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def RemoveBento(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def GetBento(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def ListBento(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_YataiServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'HealthCheck': grpc.unary_unary_rpc_method_handler(
          servicer.HealthCheck,
          request_deserializer=common__pb2.Empty.FromString,
          response_serializer=yatai__service__pb2.HealthCheckResponse.SerializeToString,
      ),
      'GetYataiServiceVersion': grpc.unary_unary_rpc_method_handler(
          servicer.GetYataiServiceVersion,
          request_deserializer=common__pb2.Empty.FromString,
          response_serializer=yatai__service__pb2.GetYataiServiceVersionResponse.SerializeToString,
      ),
      'ApplyDeployment': grpc.unary_unary_rpc_method_handler(
          servicer.ApplyDeployment,
          request_deserializer=deployment__pb2.ApplyDeploymentRequest.FromString,
          response_serializer=deployment__pb2.ApplyDeploymentResponse.SerializeToString,
      ),
      'DeleteDeployment': grpc.unary_unary_rpc_method_handler(
          servicer.DeleteDeployment,
          request_deserializer=deployment__pb2.DeleteDeploymentRequest.FromString,
          response_serializer=deployment__pb2.DeleteDeploymentResponse.SerializeToString,
      ),
      'GetDeployment': grpc.unary_unary_rpc_method_handler(
          servicer.GetDeployment,
          request_deserializer=deployment__pb2.GetDeploymentRequest.FromString,
          response_serializer=deployment__pb2.GetDeploymentResponse.SerializeToString,
      ),
      'DescribeDeployment': grpc.unary_unary_rpc_method_handler(
          servicer.DescribeDeployment,
          request_deserializer=deployment__pb2.DescribeDeploymentRequest.FromString,
          response_serializer=deployment__pb2.DescribeDeploymentResponse.SerializeToString,
      ),
      'ListDeployments': grpc.unary_unary_rpc_method_handler(
          servicer.ListDeployments,
          request_deserializer=deployment__pb2.ListDeploymentsRequest.FromString,
          response_serializer=deployment__pb2.ListDeploymentsResponse.SerializeToString,
      ),
      'AddBento': grpc.unary_unary_rpc_method_handler(
          servicer.AddBento,
          request_deserializer=repository__pb2.AddBentoRequest.FromString,
          response_serializer=repository__pb2.AddBentoResponse.SerializeToString,
      ),
      'UploadBento': grpc.stream_unary_rpc_method_handler(
          servicer.UploadBento,
          request_deserializer=common__pb2.Chunk.FromString,
          response_serializer=repository__pb2.UploadBentoResponse.SerializeToString,
      ),
      'RemoveBento': grpc.unary_unary_rpc_method_handler(
          servicer.RemoveBento,
          request_deserializer=repository__pb2.RemoveBentoRequest.FromString,
          response_serializer=repository__pb2.RemoveBentoResponse.SerializeToString,
      ),
      'GetBento': grpc.unary_unary_rpc_method_handler(
          servicer.GetBento,
          request_deserializer=repository__pb2.GetBentoRequest.FromString,
          response_serializer=repository__pb2.GetBentoResponse.SerializeToString,
      ),
      'ListBento': grpc.unary_unary_rpc_method_handler(
          servicer.ListBento,
          request_deserializer=repository__pb2.ListBentoRequest.FromString,
          response_serializer=repository__pb2.ListBentoResponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'bentoml.Yatai', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
