"""
This type stub file was generated by pyright.
"""

import datetime
import re
import sys
from decimal import Decimal
from typing import Any, Callable, Dict, Type, Union

if sys.version_info >= (3, 7):
    Pattern = re.Pattern
else: ...
__all__ = ("pydantic_encoder", "custom_pydantic_encoder", "timedelta_isoformat")

def isoformat(o: Union[datetime.date, datetime.time]) -> str: ...
def decimal_encoder(dec_value: Decimal) -> Union[int, float]:
    """
    Encodes a Decimal as int of there's no exponent, otherwise float

    This is useful when we use ConstrainedDecimal to represent Numeric(x,0)
    where a integer (but not int typed) is used. Encoding this as a float
    results in failed round-tripping between encode and prase.
    Our Id type is a prime example of this.

    >>> decimal_encoder(Decimal("1.0"))
    1.0

    >>> decimal_encoder(Decimal("1"))
    1
    """
    ...

ENCODERS_BY_TYPE: Dict[Type[Any], Callable[[Any], Any]] = ...

def pydantic_encoder(obj: Any) -> Any: ...
def custom_pydantic_encoder(
    type_encoders: Dict[Any, Callable[[Type[Any]], Any]], obj: Any
) -> Any: ...
def timedelta_isoformat(td: datetime.timedelta) -> str:
    """
    ISO 8601 encoding for timedeltas.
    """
    ...
