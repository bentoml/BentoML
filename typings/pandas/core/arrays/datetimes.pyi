from datetime import tzinfo
from typing import TYPE_CHECKING, Literal, overload
import numpy as np
from pandas import DataFrame
from pandas.core.arrays import PeriodArray, TimedeltaArray
from pandas.core.arrays import datetimelike as dtl
from pandas.core.dtypes.dtypes import DatetimeTZDtype

if TYPE_CHECKING: ...
_midnight = ...

def tz_to_dtype(tz): ...

class DatetimeArray(dtl.TimelikeOps, dtl.DatelikeOps):
    _typ = ...
    _scalar_type = ...
    _recognized_scalars = ...
    _is_recognized_dtype = ...
    _infer_matches = ...
    _bool_ops: list[str] = ...
    _object_ops: list[str] = ...
    _field_ops: list[str] = ...
    _other_ops: list[str] = ...
    _datetimelike_ops: list[str] = ...
    _datetimelike_methods: list[str] = ...
    __array_priority__ = ...
    _dtype: np.dtype | DatetimeTZDtype
    _freq = ...
    def __init__(self, values, dtype=..., freq=..., copy: bool = ...) -> None: ...
    @property
    def dtype(self) -> np.dtype | DatetimeTZDtype: ...
    @property
    def tz(self) -> tzinfo | None: ...
    @tz.setter
    def tz(self, value): ...
    @property
    def tzinfo(self) -> tzinfo | None: ...
    @property
    def is_normalized(self) -> bool: ...
    def __array__(self, dtype=...) -> np.ndarray: ...
    def __iter__(self): ...
    def astype(self, dtype, copy: bool = ...): ...
    def tz_convert(self, tz) -> DatetimeArray: ...
    @dtl.ravel_compat
    def tz_localize(self, tz, ambiguous=..., nonexistent=...) -> DatetimeArray: ...
    def to_pydatetime(self) -> np.ndarray: ...
    def normalize(self) -> DatetimeArray: ...
    @dtl.ravel_compat
    def to_period(self, freq=...) -> PeriodArray: ...
    def to_perioddelta(self, freq) -> TimedeltaArray: ...
    def month_name(self, locale=...): ...
    def day_name(self, locale=...): ...
    @property
    def time(self) -> np.ndarray: ...
    @property
    def timetz(self) -> np.ndarray: ...
    @property
    def date(self) -> np.ndarray: ...
    def isocalendar(self) -> DataFrame: ...
    @property
    def weekofyear(self): ...
    week = ...
    year = ...
    month = ...
    day = ...
    hour = ...
    minute = ...
    second = ...
    microsecond = ...
    nanosecond = ...
    _dayofweek_doc = ...
    day_of_week = ...
    dayofweek = ...
    weekday = ...
    day_of_year = ...
    dayofyear = ...
    quarter = ...
    days_in_month = ...
    daysinmonth = ...
    _is_month_doc = ...
    is_month_start = ...
    is_month_end = ...
    is_quarter_start = ...
    is_quarter_end = ...
    is_year_start = ...
    is_year_end = ...
    is_leap_year = ...
    def to_julian_date(self) -> np.ndarray: ...
    def std(
        self,
        axis=...,
        dtype=...,
        out=...,
        ddof: int = ...,
        keepdims: bool = ...,
        skipna: bool = ...,
    ): ...

@overload
def sequence_to_datetimes(
    data, allow_object: Literal[False] = ..., require_iso8601: bool = ...
) -> DatetimeArray: ...
@overload
def sequence_to_datetimes(
    data, allow_object: Literal[True] = ..., require_iso8601: bool = ...
) -> np.ndarray | DatetimeArray: ...
def sequence_to_datetimes(
    data, allow_object: bool = ..., require_iso8601: bool = ...
) -> np.ndarray | DatetimeArray: ...
def sequence_to_dt64ns(
    data,
    dtype=...,
    copy=...,
    tz=...,
    dayfirst=...,
    yearfirst=...,
    ambiguous=...,
    *,
    allow_object: bool = ...,
    allow_mixed: bool = ...,
    require_iso8601: bool = ...
): ...
def objects_to_datetime64ns(
    data: np.ndarray,
    dayfirst,
    yearfirst,
    utc=...,
    errors=...,
    require_iso8601: bool = ...,
    allow_object: bool = ...,
    allow_mixed: bool = ...,
): ...
def maybe_convert_dtype(data, copy: bool): ...
def validate_tz_from_dtype(dtype, tz: tzinfo | None) -> tzinfo | None: ...
