import typing as t

from simple_di import Provide, inject

from ._internal.configuration.containers import BentoMLContainer
from ._internal.models import SAVE_NAMESPACE
from ._internal.runner import Runner
from .exceptions import MissingDependencyException

if t.TYPE_CHECKING:  # pragma: no cover
    # pylint: disable=unused-import
    from _internal.models.store import ModelStore

try:
    ...
except ImportError:  # pragma: no cover
    raise MissingDependencyException("")


@inject
def load(
    tag: str,
    model_store: "ModelStore" = Provide[BentoMLContainer.model_store],
):
    """
    Load a model from BentoML local modelstore with given name.

    Args:
        tag (`str`):
            Tag of a saved model in BentoML local modelstore.
        model_store (`~bentoml._internal.models.store.ModelStore`, default to `BentoMLContainer.model_store`):
            BentoML modelstore, provided by DI Container.

    Returns:
        an instance of `xgboost.core.Booster` from BentoML modelstore.

    Examples::
    """  # noqa


@inject
def save(
    name: str,
    model: t.Any,
    *,
    metadata: t.Union[None, t.Dict[str, t.Any]] = None,
    model_store: "ModelStore" = Provide[BentoMLContainer.model_store],
) -> str:
    """
    Save a model instance to BentoML modelstore.

    Args:
        name (`str`):
            Name for given model instance. This should pass Python identifier check.
        model (`xgboost.core.Booster`):
            Instance of model to be saved
        metadata (`t.Optional[t.Dict[str, t.Any]]`, default to `None`):
            Custom metadata for given model.
        model_store (`~bentoml._internal.models.store.ModelStore`, default to `BentoMLContainer.model_store`):
            BentoML modelstore, provided by DI Container.

    Returns:
        tag (`str` with a format `name:version`) where `name` is the defined name user
        set for their models, and version will be generated by BentoML.

    Examples::
    """  # noqa


class _FlaxRunner(Runner):
    @inject
    def __init__(
        self,
        tag: str,
        resource_quota: t.Dict[str, t.Any],
        batch_options: t.Dict[str, t.Any],
        model_store: "ModelStore" = Provide[BentoMLContainer.model_store],
    ):
        super().__init__(tag, resource_quota, batch_options)

    @property
    def required_models(self) -> t.List[str]:
        ...

    @property
    def num_concurrency_per_replica(self) -> int:
        ...

    @property
    def num_replica(self) -> int:
        ...

    # pylint: disable=arguments-differ,attribute-defined-outside-init
    def _setup(self) -> None:
        ...

    # pylint: disable=arguments-differ,attribute-defined-outside-init
    def _run_batch(self, input_data) -> t.Any:
        ...


@inject
def load_runner(
    tag: str,
    *,
    resource_quota: t.Union[None, t.Dict[str, t.Any]] = None,
    batch_options: t.Union[None, t.Dict[str, t.Any]] = None,
    model_store: "ModelStore" = Provide[BentoMLContainer.model_store],
) -> "_FlaxRunner":
    """
    Runner represents a unit of serving logic that can be scaled horizontally to
    maximize throughput. `bentoml.xgboost.load_runner` implements a Runner class that
    wrap around a Xgboost booster model, which optimize it for the BentoML runtime.

    Args:
        tag (`str`):
            Model tag to retrieve model from modelstore
        resource_quota (`t.Dict[str, t.Any]`, default to `None`):
            Dictionary to configure resources allocation for runner.
        batch_options (`t.Dict[str, t.Any]`, default to `None`):
            Dictionary to configure batch options for runner in a service context.
        model_store (`~bentoml._internal.models.store.ModelStore`, default to `BentoMLContainer.model_store`):
            BentoML modelstore, provided by DI Container.

    Returns:
        Runner instances for `bentoml.xgboost` model

    Examples::
    """  # noqa
    return _FlaxRunner(
        tag=tag,
        resource_quota=resource_quota,
        batch_options=batch_options,
        model_store=model_store,
    )


# import typing as t
#
# import bentoml._internal.constants as _const
#
# from ._internal.models.base import Model
# from ._internal.types import GenericDictType, PathType
# from ._internal.utils import LazyLoader
#
# _exc = _const.IMPORT_ERROR_MSG.format(
#     fwr="flax",
#     module=__name__,
#     inst="Refers to https://flax.readthedocs.io/en/latest/installation.html",
# )
#
#
# if t.TYPE_CHECKING:  # pragma: no cover
#     # pylint: disable=unused-import
#     import flax
#     import jax
# else:
#     jax = LazyLoader("jax", globals(), "jax", exc_msg=_exc)
#     flax = LazyLoader("flax", globals(), "flax", exc_msg=_exc)
#
#
# class FlaxModel(Model):
#     """
#     Model class for saving/loading :obj:`flax` models
#
#     Args:
#         model (`flax.linen.Module`):
#             Every Flax model is of type :obj:`flax.linen.Module`
#         metadata (`GenericDictType`,  `optional`, default to `None`):
#             Class metadata
#
#     Raises:
#         MissingDependencyException:
#             :obj:`jax` and :obj:`flax` are required by FlaxModel
#
#     Example usage under :code:`train.py`::
#
#         TODO:
#
#     One then can define :code:`bento_service.py`::
#
#         TODO:
#
#     Pack bundle under :code:`bento_packer.py`::
#
#         TODO:
#     """
#
#     def __init__(
#         self,
#         model: "flax.linen.Module",
#         metadata: t.Optional[GenericDictType] = None,
#     ):
#         super(FlaxModel, self).__init__(model, metadata=metadata)
#
#     @classmethod
#     def load(cls, path: PathType) -> "flax.linen.Module":
#         ...
#
#     def save(self, path: PathType) -> None:
#         ...
