# BentoML will provide supports for CUDA 11.3 with CUDNN 8.2.0.53
ARG PYTHON_VERSION

ARG CUDA=11.3
ARG UBUNTU_VERSION=18.04

FROM nvidia/cuda:${CUDA}.0-base-ubuntu${UBUNTU_VERSION} as base
# CUDA need to redefine here since FROM resets all ARGs except default values, which are retained
ARG CUDA
ARG CUDNN=8.2.0.53
ARG CUDNN_MAJOR_RELEASE=8
ARG LIB_DIR_PREFIX=x86_64-linux-gnu

# needed for string substitutions
SHELL ["/bin/bash", "-c"]
RUN apt-get update && apt-get install -y --no-install-recommends \
    ca-certificates build-essential curl git \
    libcublas-${CUDA/./-} \
    libcurand-${CUDA/./-} \
    libcusparse-${CUDA/./-} \
    libcufft-${CUDA/./-} \
    libcusolver-${CUDA/./-} \
    libcudnn${CUDNN_MAJOR_RELEASE}=${CUDNN}-1+cuda${CUDA} \
    && apt-get clean \
    && apt-mark hold libcudnn${CUDNN_MAJOR_RELEASE} libcublas-${CUDA/./-} \
    && rm -rf /var/lib/apt/lists/*


FROM base as builder
ENV PATH /opt/conda/bin:$PATH
ENV LD_LIBRARY_PATH /usr/include/x86_64-linux-gnu:/usr/lib/x86_64-linux-gnu:$LD_LIBRARY_PATH

RUN curl -fSsL -v -o ~/miniconda.sh -O https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh && \
    chmod +x ~/miniconda.sh && \
    ~/miniconda.sh -b -p /opt/conda && \
    rm ~/miniconda.sh && \
    find /opt/conda/ -follow -type f -name '*.a' -delete && \
    find /opt/conda/ -follow -type f -name '*.js.map' -delete && \
    /opt/conda/bin/conda install -y python=${PYTHON_VERSION} pip && \
    /opt/conda/bin/conda clean -ya

FROM builder
ARG BENTOML_VERSION

# pre-install BentoML base dependencies
RUN pip install bentoml[model_server]==$BENTOML_VERSION --no-cache-dir
# Make sure we use the virtualenv

COPY entrypoint.sh /usr/local/bin/

ENTRYPOINT [ "entrypoint.sh" ]
CMD ["bentoml", "serve-gunicorn", "/bento"]

COPY bashrc /etc/bash.bashrc
RUN chmod a+r /etc/bash.bashrc