from typing import TYPE_CHECKING, Sequence
import numpy as np
from pandas._libs.tslibs import BaseOffset
from pandas._libs.tslibs.offsets import Tick
from pandas._libs.tslibs.period import Period
from pandas._typing import AnyArrayLike, Dtype, NpDtype
from pandas.core.arrays import DatetimeArray
from pandas.core.arrays import datetimelike as dtl
from pandas.core.dtypes.dtypes import PeriodDtype
from pandas.util._decorators import cache_readonly, doc

if TYPE_CHECKING: ...
_shared_doc_kwargs = ...

class PeriodArray(dtl.DatelikeOps):
    __array_priority__ = ...
    _typ = ...
    _scalar_type = ...
    _recognized_scalars = ...
    _is_recognized_dtype = ...
    _infer_matches = ...
    _other_ops: list[str] = ...
    _bool_ops: list[str] = ...
    _object_ops: list[str] = ...
    _field_ops: list[str] = ...
    _datetimelike_ops: list[str] = ...
    _datetimelike_methods: list[str] = ...
    _dtype: PeriodDtype
    def __init__(
        self, values, dtype: Dtype | None = ..., freq=..., copy: bool = ...
    ) -> None: ...
    @cache_readonly
    def dtype(self) -> PeriodDtype: ...
    @property
    def freq(self) -> BaseOffset: ...
    def __array__(self, dtype: NpDtype | None = ...) -> np.ndarray: ...
    def __arrow_array__(self, type=...): ...
    year = ...
    month = ...
    day = ...
    hour = ...
    minute = ...
    second = ...
    weekofyear = ...
    week = ...
    day_of_week = ...
    dayofweek = ...
    weekday = ...
    dayofyear = ...
    quarter = ...
    qyear = ...
    days_in_month = ...
    daysinmonth = ...
    @property
    def is_leap_year(self) -> np.ndarray: ...
    def to_timestamp(self, freq=..., how: str = ...) -> DatetimeArray: ...
    @doc(**_shared_doc_kwargs, other="PeriodIndex", other_name="PeriodIndex")
    def asfreq(self, freq=..., how: str = ...) -> PeriodArray: ...
    def astype(self, dtype, copy: bool = ...): ...
    def searchsorted(self, value, side=..., sorter=...) -> np.ndarray: ...
    def fillna(self, value=..., method=..., limit=...) -> PeriodArray: ...
    @property
    def start_time(self) -> DatetimeArray: ...
    @property
    def end_time(self) -> DatetimeArray: ...

def raise_on_incompatible(left, right): ...
def period_array(
    data: Sequence[Period | str | None] | AnyArrayLike,
    freq: str | Tick | None = ...,
    copy: bool = ...,
) -> PeriodArray: ...
def validate_dtype_freq(dtype, freq): ...
def dt64arr_to_periodarr(data, freq, tz=...): ...
