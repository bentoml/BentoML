from enum import IntEnum
from typing import Any, List, Literal, Mapping, Tuple, Dict, Union

from .onnxruntime_inference_collection import InferenceSession

def get_all_providers() -> List[str]: ...
def get_available_providers() -> List[Union[str, Tuple[str, Dict[str, Any]]]]: ...
def disable_telemetry_events() -> None: ...
def enable_telemetry_events() -> None: ...
def set_seed(seed: int) -> None: ...
def set_default_logger_severity(severity: Literal[1, 2, 3, 4]) -> None: ...
def get_device() -> str: ...
def create_and_register_allocator() -> None: ...

class ExecutionMode(IntEnum):
    ORT_SEQUENTIAL: Literal[0]
    ORT_PARALLEL: Literal[1]

class ExecutionOrder(IntEnum):
    DEFAULT: Literal[0]
    PRIORITY_BASED: Literal[1]

class GraphOptimizationLevel(IntEnum):
    ORT_DISABLE_ALL: Literal[0]
    ORT_ENABLE_BASIC: Literal[1]
    ORT_ENABLE_EXTENDED: Literal[2]
    ORT_ENABLE_ALL: Literal[99]

class OrtAllocatorType(IntEnum):
    INVALID: Literal[-1]
    ORT_DEVICE_ALLOCATOR: Literal[0]
    ORT_ARENA_ALLOCATOR: Literal[1]

class OrtMemType(IntEnum):
    CPU: Literal[-1]
    CPU_OUTPUT: Literal[-1]
    CPU_INPUT: Literal[-2]
    DEFAULT: Literal[0]

class OrtSparseFormat(IntEnum):
    ORT_SPARSE_BLOCK_SPARSE: Literal[4]
    ORT_SPARSE_CSRC: Literal[2]
    ORT_SPARSE_COO: Literal[1]
    ORT_SPARSE_UNDEFINED: Literal[0]

class ModelMetadata:
    custom_metadata_map: Mapping[str, str] = ...
    description: str = ...
    domain: Any = ...
    graph_description: str = ...
    graph_name: str = ...
    producer_name: str = ...
    version: str = ...

class NodeArg:
    name: str
    shape: Tuple[int, ...] = ...
    type: str = ...

class OrtArenaCfg:
    max_mem: int
    arena_extend_strategy: int
    initial_chunk_size_bytes: int
    max_dead_bytes_per_chunk: int
    initial_growth_chunk_size_bytes: int

class RunOptions:
    log_severity_level: Literal[1, 2, 3, 4] = ...
    log_verbosity_level: int = ...
    logid: int
    only_execute_path_to_fetches: bool = ...
    terminate: bool = ...

class SessionIOBinding:
    def __init__(self, session: InferenceSession) -> None: ...
    def bind_input(
        self, name, device_type, device_id, element_type, shape, buffer_ptr
    ): ...
    def bind_ortvalue_input(self, name, ortvalue): ...
    def bind_output(
        self,
        name,
        device_type=...,
        device_id=...,
        element_type=...,
        shape=...,
        buffer_ptr=...,
    ): ...
    def bind_ortvalue_output(self, name, ortvalue): ...
    def get_outputs(self): ...
    def copy_outputs_to_cpu(self): ...
    def clear_binding_inputs(self): ...
    def clear_binding_outputs(self): ...

class SessionOptions:
    enable_cpu_mem_arena: bool = ...
    enable_mem_pattern: bool = ...
    enable_profiling: bool = ...
    execution_mode: ExecutionMode = ...
    execution_order: ExecutionOrder = ...
    graph_optimization_level: GraphOptimizationLevel = ...
    inter_op_num_threads: int = ...
    intra_op_num_threads: int = ...
    log_severity_level: Literal[0, 1, 2, 3, 4] = ...
    log_verbosity_level: int = ...
    use_deterministic_compute: bool = ...
    logid: int
    optimized_model_filepath: str
    profile_file_prefix: str
    def register_custom_ops_library(self, arg0: str) -> None: ...
    def get_session_config_entry(self, arg0: str) -> str: ...
    def add_free_dimension_override_by_denotation(
        self, arg0: str, arg1: int
    ) -> None: ...
    def add_free_dimension_override_by_name(self, arg0: str, arg1: int) -> None: ...
    def add_initializer(self, arg0: str, arg1: object) -> None: ...
    def add_session_config_entry(self, arg0: str, arg1: str) -> None: ...
