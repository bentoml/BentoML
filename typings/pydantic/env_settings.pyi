"""
This type stub file was generated by pyright.
"""

from pathlib import Path
from typing import Any, Callable, Dict, Optional, Tuple, Union

from .fields import ModelField
from .main import BaseConfig, BaseModel

env_file_sentinel = ...
SettingsSourceCallable = Callable[["BaseSettings"], Dict[str, Any]]

class SettingsError(ValueError): ...

class BaseSettings(BaseModel):
    """
    Base class for settings, allowing values to be overridden by environment variables.

    This is useful in production for secrets you do not wish to save in code, it plays nicely with docker(-compose),
    Heroku and any 12 factor app design.
    """

    def __init__(
        __pydantic_self__,
        _env_file: Union[Path, str, None] = ...,
        _env_file_encoding: Optional[str] = ...,
        _secrets_dir: Union[Path, str, None] = ...,
        **values: Any
    ) -> None: ...
    class Config(BaseConfig):
        env_prefix = ...
        env_file = ...
        env_file_encoding = ...
        secrets_dir = ...
        validate_all = ...
        extra = ...
        arbitrary_types_allowed = ...
        case_sensitive = ...
        @classmethod
        def prepare_field(cls, field: ModelField) -> None: ...
        @classmethod
        def customise_sources(
            cls,
            init_settings: SettingsSourceCallable,
            env_settings: SettingsSourceCallable,
            file_secret_settings: SettingsSourceCallable,
        ) -> Tuple[SettingsSourceCallable, ...]: ...
    __config__: Config

class InitSettingsSource:
    __slots__ = ...
    def __init__(self, init_kwargs: Dict[str, Any]) -> None: ...
    def __call__(self, settings: BaseSettings) -> Dict[str, Any]: ...
    def __repr__(self) -> str: ...

class EnvSettingsSource:
    __slots__ = ...
    def __init__(
        self, env_file: Union[Path, str, None], env_file_encoding: Optional[str]
    ) -> None: ...
    def __call__(self, settings: BaseSettings) -> Dict[str, Any]:
        """
        Build environment variables suitable for passing to the Model.
        """
        ...
    def __repr__(self) -> str: ...

class SecretsSettingsSource:
    __slots__ = ...
    def __init__(self, secrets_dir: Union[Path, str, None]) -> None: ...
    def __call__(self, settings: BaseSettings) -> Dict[str, Any]:
        """
        Build fields from "secrets" files.
        """
        ...
    def __repr__(self) -> str: ...

def read_env_file(
    file_path: Path, *, encoding: str = ..., case_sensitive: bool = ...
) -> Dict[str, Optional[str]]: ...
