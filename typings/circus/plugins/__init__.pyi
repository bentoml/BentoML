"""
This type stub file was generated by pyright.
"""

import sys
import errno
import uuid
import argparse
import zmq
import zmq.utils.jsonapi as json
from tornado import ioloop
from zmq.eventloop import zmqstream
from circus import __version__, logger
from circus.client import cast_message, make_message
from circus.util import DEFAULT_ENDPOINT_DEALER, DEFAULT_ENDPOINT_SUB, configure_logger, debuglog, get_connection, resolve_name, to_bool, to_bytes, to_str

"""
This type stub file was generated by pyright.
"""
class CircusPlugin:
    """Base class to write plugins.

    Options:

    - **context** -- the ZMQ context to use
    - **endpoint** -- the circusd ZMQ endpoint
    - **pubsub_endpoint** -- the circusd ZMQ pub/sub endpoint
    - **check_delay** -- the configured check delay
    - **config** -- free config mapping
    """
    name = ...
    def __init__(self, endpoint, pubsub_endpoint, check_delay, ssh_server=..., **config) -> None:
        ...
    
    @debuglog
    def initialize(self):
        ...
    
    @debuglog
    def start(self):
        ...
    
    @debuglog
    def stop(self):
        ...
    
    def call(self, command, **props):
        """Sends the command to **circusd**

        Options:

        - **command** -- the command to call
        - **props** -- keyword arguments to add to the call

        Returns the JSON mapping sent back by **circusd**
        """
        ...
    
    def cast(self, command, **props):
        """Fire-and-forget a command to **circusd**

        Options:

        - **command** -- the command to call
        - **props** -- keyword arguments to add to the call
        """
        ...
    
    def handle_recv(self, data):
        """Receives every event published by **circusd**

        Options:

        - **data** -- a tuple containing the topic and the message.
        """
        ...
    
    def handle_stop(self):
        """Called right before the plugin is stopped by Circus.
        """
        ...
    
    def handle_init(self):
        """Called right before a plugin is started - in the thread context.
        """
        ...
    
    @staticmethod
    def split_data(data):
        ...
    
    @staticmethod
    def load_message(msg):
        ...
    


def get_plugin_cmd(config, endpoint, pubsub, check_delay, ssh_server, debug=..., loglevel=..., logoutput=...):
    ...

def main():
    ...

if __name__ == '__main__':
    ...
