from typing import TYPE_CHECKING
import numpy as np
import pyarrow
from pandas._typing import ArrayLike, type_t
from pandas.core.arrays.masked import BaseMaskedArray, BaseMaskedDtype
from pandas.core.dtypes.dtypes import register_extension_dtype

if TYPE_CHECKING: ...

@register_extension_dtype
class BooleanDtype(BaseMaskedDtype):
    name = ...
    @property
    def type(self) -> type: ...
    @property
    def kind(self) -> str: ...
    @property
    def numpy_dtype(self) -> np.dtype: ...
    @classmethod
    def construct_array_type(cls) -> type_t[BooleanArray]: ...
    def __repr__(self) -> str: ...
    def __from_arrow__(
        self, array: pyarrow.Array | pyarrow.ChunkedArray
    ) -> BooleanArray: ...

def coerce_to_array(
    values, mask=..., copy: bool = ...
) -> tuple[np.ndarray, np.ndarray]: ...

class BooleanArray(BaseMaskedArray):
    _internal_fill_value = ...
    _TRUE_VALUES = ...
    _FALSE_VALUES = ...
    def __init__(
        self, values: np.ndarray, mask: np.ndarray, copy: bool = ...
    ) -> None: ...
    @property
    def dtype(self) -> BooleanDtype: ...
    _HANDLED_TYPES = ...
    def __array_ufunc__(self, ufunc: np.ufunc, method: str, *inputs, **kwargs): ...
    def astype(self, dtype, copy: bool = ...) -> ArrayLike: ...
    def any(self, *, skipna: bool = ..., **kwargs): ...
    def all(self, *, skipna: bool = ..., **kwargs): ...
