import os
from typing import Any, Dict, Tuple, Union
from .file_utils import PushToHubMixin

logger = ...

class PretrainedConfig(PushToHubMixin):
    model_type: str = ...
    is_composition: bool = ...
    def __init__(self, **kwargs) -> None: ...
    @property
    def name_or_path(self) -> str: ...
    @name_or_path.setter
    def name_or_path(self, value): ...
    @property
    def use_return_dict(self) -> bool: ...
    @property
    def num_labels(self) -> int: ...
    @num_labels.setter
    def num_labels(self, num_labels: int): ...
    def save_pretrained(
        self, save_directory: Union[str, os.PathLike], push_to_hub: bool = ..., **kwargs
    ): ...
    @classmethod
    def from_pretrained(
        cls, pretrained_model_name_or_path: Union[str, os.PathLike], **kwargs
    ) -> PretrainedConfig: ...
    @classmethod
    def get_config_dict(
        cls, pretrained_model_name_or_path: Union[str, os.PathLike], **kwargs
    ) -> Tuple[Dict[str, Any], Dict[str, Any]]: ...
    @classmethod
    def from_dict(cls, config_dict: Dict[str, Any], **kwargs) -> PretrainedConfig: ...
    @classmethod
    def from_json_file(cls, json_file: Union[str, os.PathLike]) -> PretrainedConfig: ...
    def __eq__(self, other) -> bool: ...
    def __repr__(self): ...
    def to_diff_dict(self) -> Dict[str, Any]: ...
    def to_dict(self) -> Dict[str, Any]: ...
    def to_json_string(self, use_diff: bool = ...) -> str: ...
    def to_json_file(
        self, json_file_path: Union[str, os.PathLike], use_diff: bool = ...
    ): ...
    def update(self, config_dict: Dict[str, Any]): ...
    def update_from_string(self, update_str: str): ...
