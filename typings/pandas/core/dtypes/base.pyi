from typing import TYPE_CHECKING, Any
from pandas._typing import type_t
from pandas.core.arrays import ExtensionArray

if TYPE_CHECKING:
    E = ...

class ExtensionDtype:
    _metadata: tuple[str, ...] = ...
    def __str__(self) -> str: ...
    def __eq__(self, other: Any) -> bool: ...
    def __hash__(self) -> int: ...
    def __ne__(self, other: Any) -> bool: ...
    @property
    def na_value(self) -> object: ...
    @property
    def type(self) -> type_t[Any]: ...
    @property
    def kind(self) -> str: ...
    @property
    def name(self) -> str: ...
    @property
    def names(self) -> list[str] | None: ...
    @classmethod
    def construct_array_type(cls) -> type_t[ExtensionArray]: ...
    @classmethod
    def construct_from_string(cls, string: str): ...
    @classmethod
    def is_dtype(cls, dtype: object) -> bool: ...

def register_extension_dtype(cls: type[E]) -> type[E]: ...

class Registry:
    def __init__(self) -> None: ...
    def register(self, dtype: type[ExtensionDtype]) -> None: ...
    def find(
        self, dtype: type[ExtensionDtype] | str
    ) -> type[ExtensionDtype] | None: ...

_registry = ...
