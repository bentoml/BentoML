"""
This type stub file was generated by pyright.
"""

from dataclasses import dataclass
from typing import (
    Any,
    Callable,
    Dict,
    Generic,
    Optional,
    Tuple,
    TypeVar,
    Union,
    overload,
)

class GenericMeta(type):...

class _SentinelClass:
    ...

VT = TypeVar("VT")

sentinel: _SentinelClass = ...
class ProviderMeta(GenericMeta):
    def __new__(cls, class_name: str, bases: Tuple[type], attrs: Dict[str, Any], state_fields: Tuple[str, ...] = ..., **kwargs: Any) -> ProviderMeta:
        ...
    


class Provider(Generic[VT], metaclass=ProviderMeta):
    """
    The base class for Provider implementations. Could be used as the type annotations
    of all the implementations.
    """
    STATE_FIELDS: Tuple[str, ...] = ...
    def __init__(self) -> None:
        ...
    
    def set(self, value: Union[_SentinelClass, VT]) -> None:
        """
        set the value to this provider, overriding the original values
        """
        ...
    
    def get(self) -> VT:
        """
        get the value of this provider
        """
        ...
    
    def reset(self) -> None:
        """
        remove the overriding and restore the original value
        """
        ...
    
    def __getstate__(self) -> Dict[str, Any]:
        ...
    
    def __setstate__(self, state: Dict[str, Any]) -> None:
        ...
    


class _ProvideClass:
    """
    Used as the default value of a injected functool/method. Would be replaced by the
    final value of the provider when this function/method gets called.
    """
    def __getitem__(self, provider: Provider[VT]) -> VT:
        ...
    


Provide: _ProvideClass =...
WrappedCallable = Callable[..., Any]

@overload
def inject(func: WrappedCallable, squeeze_none: bool = ...) -> WrappedCallable:
    ...

@overload
def inject(func: None = ..., squeeze_none: bool = ...) -> Callable[[WrappedCallable], WrappedCallable]:
    ...

def inject(func: Optional[WrappedCallable] = ..., squeeze_none: bool = ...) -> Union[WrappedCallable, Callable[[WrappedCallable], WrappedCallable]]:
    """
    Used with `Provide`, inject values to provided defaults of the decorated
    function/method when gets called.
    """
    ...

def sync_container(from_: Any, to_: Any) -> None:
    ...

container = dataclass
skip: _SentinelClass
not_passed = skip
__all__ = ["container", "Provider", "Provide", "inject", "not_passed", "skip", "sync_container"]
