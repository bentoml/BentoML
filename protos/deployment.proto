syntax = "proto3";
package bentoml;

import "google/protobuf/any.proto";
import "google/protobuf/timestamp.proto";

import "status.proto";

// DeploymentSpec defines a model serving deployment that can be reproduced to target
// deployment target
message DeploymentSpec {
  // DeploymentOperator is a platform (Deployment Target) specific implementation
  // of how a packaged Bento can be deployed and managed
  enum DeploymentOperator {
    UNSET = 0;

    // Reserved for user-defined deployment operator
    CUSTOM = 1;

    // Built-in deployment operator types
    AWS_SAGEMAKER = 2;
    AWS_LAMBDA = 3;
    GCP_FUNCTION = 4;
    KUBERNETES = 5;
  }

  message CustomOperatorConfig {
    string name = 1;
    map<string, google.protobuf.Any> config = 2;
  }

  message SageMakerOperatorConfig {
    string region = 1;
    string instance_type = 2;
    int32 instance_count = 3;
    // API Name is required.  Each sagemaker deployment provide only /invocation path,
    // If bento service has more than one API function, user needs to define which API
    // function would like to be used for sagemaker deployment
    string api_name = 4;
    // Optional. When user didn't define gunicorn worker count, service will find the
    // current system's cpu core count and set worker equal to half of that plus 1.
    int32 num_of_gunicorn_workers_per_instance = 5;
  }

  message AwsLambdaOperatorConfig {
    string region = 1;
    string api_name = 2;
    int32 memory_size = 3;
    int32 timeout = 4;
  }

  message GcpFunctionOperatorConfig {
    string region = 1;
    string api_name = 2;
  }

  message KubernetesOperatorConfig {
    string kube_namespace = 1;
    int32 replicas = 2;
    string service_name = 3;
    string service_type = 4;
  }

  // Bento name and version are used as an reference to the saved Bento
  // in user's bentoml repository
  string bento_name = 1;
  string bento_version = 2;

  DeploymentOperator operator = 3;

  oneof deployment_operator_config {
    CustomOperatorConfig custom_operator_config = 4;
    SageMakerOperatorConfig sagemaker_operator_config = 5;
    AwsLambdaOperatorConfig aws_lambda_operator_config = 6;
    GcpFunctionOperatorConfig gcp_function_operator_config = 7;
    KubernetesOperatorConfig kubernetes_operator_config = 8;
  }
}

message DeploymentState {
  enum State {
    PENDING = 0;
    RUNNING = 1;
    SUCCEEDED = 2;
    FAILED = 3;
    UNKNOWN = 4;
    COMPLETED = 5;
    CRASH_LOOP_BACK_OFF = 6;
    ERROR = 7;
    INACTIVATED = 8;
  }

  State state = 1;
  string error_message = 2;

  // Raw json string that contains all deployment state information that is
  // platform specific
  string info_json = 3;
  google.protobuf.Timestamp timestamp = 4;
}

message Deployment {
  // Deployment namespace, usually used as a way to separate deployment stages, for
  // example a user can have 'dev', 'test', 'prod' namespaces for all model serving
  // workloads
  string namespace = 1;
  // Deployment name, unique within each namespace
  string name = 2;

  // Describes the desired deployment state
  DeploymentSpec spec = 3;

  // Optional, current deployment state
  DeploymentState state = 4;

  // Optional, used for customizing deployment operator behaviors
  map<string, string> annotations = 5;

  // Optional, used for managing deployments, this gets translate to similar 'labels'
  // concept in target deployment platform
  map<string, string> labels = 6;

  google.protobuf.Timestamp created_at = 7;
  google.protobuf.Timestamp last_updated_at = 8;
}

message DeploymentStatus {
  DeploymentState state = 1;
}


message ApplyDeploymentRequest {
  Deployment deployment = 1;
}

message ApplyDeploymentResponse {
  Status status = 1;
  Deployment deployment = 2;
}

message DeleteDeploymentRequest {
  string deployment_name = 1;
  string namespace = 2;
  
  // force delete the deployment record in database and ignore errors when deleting cloud resources
  bool force_delete = 3;
}

message DeleteDeploymentResponse {
  Status status = 1;
}

message GetDeploymentRequest {
  string deployment_name = 1;
  string namespace = 2;
}

message GetDeploymentResponse {
  Status status = 1;
  Deployment deployment = 2;
}

message DescribeDeploymentRequest {
  string deployment_name = 1;
  string namespace = 2;
}

message DescribeDeploymentResponse {
  Status status = 1;
  DeploymentState state = 2;
}

message ListDeploymentsRequest {
  string namespace = 1;
  int32 offset = 2;
  int32 limit = 3;
  string filter = 4;
  map<string, string> labels = 5;
}

message ListDeploymentsResponse {
  Status status = 1;
  repeated Deployment deployments = 2;
}