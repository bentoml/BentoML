from typing import Any, Callable
import numpy as np
from pandas._typing import ArrayLike, DtypeObj, Optional

DT64NS_DTYPE = ...
TD64NS_DTYPE = ...
INT64_DTYPE = ...
_is_scipy_sparse = ...
ensure_float64 = ...
ensure_float32 = ...

def ensure_float(arr): ...

ensure_uint64 = ...
ensure_int64 = ...
ensure_int32 = ...
ensure_int16 = ...
ensure_int8 = ...
ensure_platform_int = ...
ensure_object = ...

def ensure_str(value: bytes | Any) -> str: ...
def ensure_python_int(value: int | np.integer) -> int: ...
def classes(*klasses) -> Callable: ...
def classes_and_not_datetimelike(*klasses) -> Callable: ...
def is_object_dtype(arr_or_dtype) -> bool: ...
def is_sparse(arr) -> bool: ...
def is_scipy_sparse(arr) -> bool: ...
def is_categorical(arr) -> bool: ...
def is_datetime64_dtype(arr_or_dtype) -> bool: ...
def is_datetime64tz_dtype(arr_or_dtype) -> bool: ...
def is_timedelta64_dtype(arr_or_dtype) -> bool: ...
def is_period_dtype(arr_or_dtype) -> bool: ...
def is_interval_dtype(arr_or_dtype) -> bool: ...
def is_categorical_dtype(arr_or_dtype) -> bool: ...
def is_string_dtype(arr_or_dtype) -> bool: ...
def is_dtype_equal(source, target) -> bool: ...
def is_any_int_dtype(arr_or_dtype) -> bool: ...
def is_integer_dtype(arr_or_dtype) -> bool: ...
def is_signed_integer_dtype(arr_or_dtype) -> bool: ...
def is_unsigned_integer_dtype(arr_or_dtype) -> bool: ...
def is_int64_dtype(arr_or_dtype) -> bool: ...
def is_datetime64_any_dtype(arr_or_dtype) -> bool: ...
def is_datetime64_ns_dtype(arr_or_dtype) -> bool: ...
def is_timedelta64_ns_dtype(arr_or_dtype) -> bool: ...
def is_datetime_or_timedelta_dtype(arr_or_dtype) -> bool: ...
def is_numeric_v_string_like(a: ArrayLike, b): ...
def is_datetimelike_v_numeric(a, b): ...
def needs_i8_conversion(arr_or_dtype) -> bool: ...
def is_numeric_dtype(arr_or_dtype) -> bool: ...
def is_float_dtype(arr_or_dtype) -> bool: ...
def is_bool_dtype(arr_or_dtype) -> bool: ...
def is_extension_type(arr) -> bool: ...
def is_1d_only_ea_obj(obj: Any) -> bool: ...
def is_1d_only_ea_dtype(dtype: Optional[DtypeObj]) -> bool: ...
def is_extension_array_dtype(arr_or_dtype) -> bool: ...
def is_ea_or_datetimelike_dtype(dtype: Optional[DtypeObj]) -> bool: ...
def is_complex_dtype(arr_or_dtype) -> bool: ...
def get_dtype(arr_or_dtype) -> DtypeObj: ...
def infer_dtype_from_object(dtype) -> DtypeObj: ...
def validate_all_hashable(*args, error_name: Optional[str] = ...) -> None: ...
def pandas_dtype(dtype) -> DtypeObj: ...
