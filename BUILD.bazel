package(default_visibility = ["//:__subpackages__"])

# rules_python
load("@com_github_bazelbuild_buildtools//buildifier:def.bzl", "buildifier", "buildifier_test")
load("@rules_python//python:defs.bzl", "py_binary", "py_library")
load("@com_github_grpc_grpc//bazel:python_rules.bzl", "py_grpc_library", "py_proto_library")
load("@rules_python//python:pip.bzl", "compile_pip_requirements")
load("@pypi//:requirements.bzl", "entry_point", "requirement")

exports_files([
    "README.md",
    "package.json",
    "yarn.lock",
])

# export default pyproject.toml config
filegroup(
    name = "pyproject",
    srcs = ["pyproject.toml"],
)

compile_pip_requirements(
    name = "pypi",
    extra_args = ["--allow-unsafe"],
    requirements_in = "//requirements/bazel:pypi.txt",
    requirements_txt = "//requirements/bazel:pypi.lock.txt",
    visibility = ["//visibility:__pkg__"],
)

[
    compile_pip_requirements(
        name = "frameworks-{}".format(platform),
        extra_args = ["--allow-unsafe"],
        requirements_in = "//requirements/bazel:frameworks.txt",
        requirements_txt = "//requirements/bazel:frameworks-{}.lock.txt".format(platform),
        visibility = ["//visibility:__pkg__"],
    )
    for platform in [
        "linux",
        "macos",
        "windows",
    ]
]

[
    alias(
        name = "{}_proto".format(version),
        actual = "//src/bentoml/grpc/{}:service_proto".format(version),
        visibility = ["//visibility:public"],
    )
    for version in [
        "v1alpha1",
        "v1",
    ]
]

[
    alias(
        name = "{}_proto_lint".format(version),
        actual = "//src/bentoml/grpc/{}:service_proto_lint".format(version),
        visibility = ["//visibility:public"],
    )
    for version in [
        "v1alpha1",
        "v1",
    ]
]

## Expose public entrypoint for Bazel target.
alias(
    name = "cli",
    actual = "//src/bentoml_cli:cli",
    visibility = ["//visibility:public"],
)

alias(
    name = "sdk",
    actual = "//src/bentoml",
    visibility = ["//visibility:public"],
)

# thirdparty alias
alias(
    name = "protobuf",
    actual = "@com_google_protobuf//:protobuf_python",
)

alias(
    name = "grpcio",
    actual = "@com_github_grpc_grpc//src/python/grpcio/grpc:grpcio",
)

# mimic grpcio-health-checking rules
py_proto_library(
    name = "health_py_pb2",
    imports = ["grpc_health.v1"],
    deps = ["@com_github_grpc_grpc//src/proto/grpc/health/v1:health_proto_descriptor"],
)

py_grpc_library(
    name = "health_py_pb2_grpc",
    srcs = ["@com_github_grpc_grpc//src/proto/grpc/health/v1:health_proto_descriptor"],
    strip_prefixes = ["src.python.grpcio_health_checking."],
    deps = [":health_py_pb2"],
)

py_library(
    name = "grpc_health",
    srcs = [
        "@com_github_grpc_grpc//src/python/grpcio_health_checking/grpc_health/v1:_async.py",
        "@com_github_grpc_grpc//src/python/grpcio_health_checking/grpc_health/v1:health.py",
    ],
    imports = ["grpc_health.v1"],
    deps = [
        ":grpcio",
        ":health_py_pb2",
        ":health_py_pb2_grpc",
    ],
)

alias(
    name = "grpcio-health-checking",
    actual = ":grpc_health",
)

alias(
    name = "buildozer",
    actual = "@com_github_bazelbuild_buildtools//buildozer",
)

alias(
    name = "coveragepy",
    actual = entry_point("coverage"),
)

buildifier(
    name = "buildfmt",
)

buildifier_test(
    name = "buildcheck",
    srcs = glob([
        "**/*.bzl",
        "**/*.bazel",
    ]),
)

alias(
    name = "pyright",
    actual = "@npm//:node_modules/pyright/index.js",
)

alias(
    name = "sphinx-build",
    actual = entry_point(
        "sphinx",
        script = "sphinx-build",
    ),
)

alias(
    name = "protoc-gen-mypy",
    actual = entry_point(
        "mypy-protobuf",
        script = "protoc-gen-mypy",
    ),
)

alias(
    name = "protoc-gen-mypy_grpc",
    actual = entry_point(
        "mypy-protobuf",
        script = "protoc-gen-mypy_grpc",
    ),
)

[
    alias(
        name = tool,
        actual = entry_point(tool),
    )
    for tool in [
        "black",
        "isort",
        "pylint",
    ]
]
