import dataclasses
from abc import ABC, abstractmethod
from typing import Any, Callable, Dict, Iterable, List, Mapping, Optional
from transformers import PretrainedConfig, PreTrainedTokenizer, TensorType

DEFAULT_ONNX_OPSET = ...
EXTERNAL_DATA_FORMAT_SIZE_LIMIT = ...

@dataclasses.dataclass
class PatchingSpec:
    o: Any
    name: str
    custom_op: Callable
    orig_op: Optional[Callable] = ...
    op_wrapper: Optional[Callable] = ...

class OnnxConfig(ABC):
    DEFAULT_FIXED_BATCH = ...
    DEFAULT_FIXED_SEQUENCE = ...
    _TASKS_TO_COMMON_OUTPUTS = ...
    def __init__(
        self,
        config: PretrainedConfig,
        task: str = ...,
        patching_specs: List[PatchingSpec] = ...,
    ) -> None: ...
    @classmethod
    def from_model_config(
        cls, config: PretrainedConfig, task: str = ...
    ) -> OnnxConfig: ...
    @property
    @abstractmethod
    def inputs(self) -> Mapping[str, Mapping[int, str]]: ...
    @property
    def outputs(self) -> Mapping[str, Mapping[int, str]]: ...
    @property
    def values_override(self) -> Optional[Mapping[str, Any]]: ...
    @property
    def default_batch_size(self) -> int: ...
    @property
    def default_sequence_length(self) -> int: ...
    @property
    def default_onnx_opset(self) -> int: ...
    @staticmethod
    def use_external_data_format(num_parameters: int) -> bool: ...
    def generate_dummy_inputs(
        self,
        tokenizer: PreTrainedTokenizer,
        batch_size: int = ...,
        seq_length: int = ...,
        is_pair: bool = ...,
        framework: Optional[TensorType] = ...,
    ) -> Mapping[str, Any]: ...
    def patch_ops(self): ...
    def restore_ops(self): ...
    @staticmethod
    def flatten_output_collection_property(
        name: str, field: Iterable[Any]
    ) -> Dict[str, Any]: ...

class OnnxConfigWithPast(OnnxConfig, ABC):
    def __init__(
        self,
        config: PretrainedConfig,
        task: str = ...,
        patching_specs: List[PatchingSpec] = ...,
        use_past: bool = ...,
    ) -> None: ...
    @classmethod
    def with_past(
        cls, config: PretrainedConfig, task: str = ...
    ) -> OnnxConfigWithPast: ...
    @property
    def values_override(self) -> Optional[Mapping[str, Any]]: ...
    def generate_dummy_inputs(
        self,
        tokenizer: PreTrainedTokenizer,
        batch_size: int = ...,
        seq_length: int = ...,
        is_pair: bool = ...,
        framework: Optional[TensorType] = ...,
    ) -> Mapping[str, Any]: ...
    @staticmethod
    def flatten_output_collection_property(
        name: str, field: Iterable[Any]
    ) -> Dict[str, Any]: ...
