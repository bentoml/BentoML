import abc
from enum import Enum

class CalibrationMethod(Enum):
    MinMax = ...
    Entropy = ...

class CalibrationDataReader(metaclass=abc.ABCMeta):
    @classmethod
    def __subclasshook__(cls, subclass): ...
    @abc.abstractmethod
    def get_next(self) -> dict: ...

class CalibraterBase:
    def __init__(
        self, model, op_types_to_calibrate=..., augmented_model_path=...
    ) -> None: ...
    def set_execution_providers(self, execution_providers=...): ...
    def select_tensors_to_calibrate(self, model): ...
    def get_augment_model(self): ...
    def augment_graph(self): ...
    def collect_data(self, data_reader: CalibrationDataReader): ...
    def compute_range(self, data_reader: CalibrationDataReader): ...

class MinMaxCalibrater(CalibraterBase):
    def __init__(
        self, model, op_types_to_calibrate=..., augmented_model_path=...
    ) -> None: ...
    def augment_graph(self): ...
    def clear_collected_data(self): ...
    def collect_data(self, data_reader: CalibrationDataReader): ...
    def merge_range(self, old_range, new_range): ...
    def compute_range(self): ...

class EntropyCalibrater(CalibraterBase):
    def __init__(
        self, model, op_types_to_calibrate=..., augmented_model_path=...
    ) -> None: ...
    def augment_graph(self): ...
    def clear_collected_data(self): ...
    def collect_data(self, data_reader: CalibrationDataReader): ...
    def compute_range(self): ...

class CalibrationDataCollector(metaclass=abc.ABCMeta):
    @abc.abstractmethod
    def collect(self, name_to_arr): ...
    @abc.abstractmethod
    def get_optimal_collection_result(self): ...

class HistogramCollector(CalibrationDataCollector):
    def __init__(self, num_quantized_bins=...) -> None: ...
    def get_histogram_dict(self): ...
    def collect(self, name_to_arr): ...
    def merge_histogram(
        self, old_histogram, data_arr, new_min, new_max, new_threshold
    ): ...
    def get_optimal_collection_result(self): ...
    def get_optimal_threshold(self, histogram, num_quantized_bins): ...

def create_calibrator(
    model, op_types_to_calibrate=..., augmented_model_path=..., calibrate_method=...
): ...
