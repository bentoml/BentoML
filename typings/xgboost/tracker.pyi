class ExSocket:
    def __init__(self, sock) -> None: ...
    def recvall(self, nbytes): ...
    def recvint(self): ...
    def sendint(self, n): ...
    def sendstr(self, s): ...
    def recvstr(self): ...

kMagic = ...

def get_some_ip(host): ...
def get_family(addr): ...

class SlaveEntry:
    def __init__(self, sock, s_addr) -> None: ...
    def decide_rank(self, job_map): ...
    def assign_rank(self, rank, wait_conn, tree_map, parent_map, ring_map): ...

class RabitTracker:
    def __init__(
        self, hostIP, nslave, port=..., port_end=..., use_logger: bool = ...
    ) -> None: ...
    def __del__(self): ...
    @staticmethod
    def get_neighbor(rank, nslave): ...
    def slave_envs(self): ...
    def get_tree(self, nslave): ...
    def find_share_ring(self, tree_map, parent_map, r): ...
    def get_ring(self, tree_map, parent_map): ...
    def get_link_map(self, nslave): ...
    def accept_slaves(self, nslave): ...
    def start(self, nslave): ...
    def join(self): ...
    def alive(self): ...

def get_host_ip(hostIP=...): ...
def start_rabit_tracker(args): ...
def main(): ...

if __name__ == "__main__": ...
