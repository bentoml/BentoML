name: Frameworks

on:
  push:
    branches:
      - master
      - bentoml-1.0
      - main
  pull_request:
    branches:
      - master
      - bentoml-1.0
      - main
  schedule:
    - cron: "0 0 * * 1/2"

jobs:
  diff:
    runs-on: ubuntu-latest
    outputs:
      dependencies: ${{ steps.filter.outputs.dependencies }}
      catboost: ${{ steps.filter.outputs.catboost }}
      detectron2: ${{ steps.filter.outputs.detectron2 }}
      easyocr: ${{ steps.filter.outputs.easyocr }}
      evalml: ${{ steps.filter.outputs.evalml }}
      fastai: ${{ steps.filter.outputs.fastai }}
      fasttext: ${{ steps.filter.outputs.fasttext }}
      gluon: ${{ steps.filter.outputs.gluon }}
      h2o: ${{ steps.filter.outputs.h2o }}
      keras_tf1: ${{ steps.filter.outputs.keras_tf1 }}
      keras_tf2: ${{ steps.filter.outputs.keras_tf2 }}
      lightgbm: ${{ steps.filter.outputs.lightgbm }}
      mlflow: ${{ steps.filter.outputs.mlflow }}
      onnx: ${{ steps.filter.outputs.onnx }}
      onnxmlir: ${{ steps.filter.outputs.onnxmlir }}
      paddle: ${{ steps.filter.outputs.paddle }}
      pycaret: ${{ steps.filter.outputs.pycaret }}
      pyspark_mllib: ${{ steps.filter.outputs.pyspark_mllib }}
      pytorch: ${{ steps.filter.outputs.pytorch }}
      pytorch_lightning: ${{ steps.filter.outputs.pytorch_lightning }}
      sklearn: ${{ steps.filter.outputs.sklearn }}
      spacy: ${{ steps.filter.outputs.spacy }}
      statsmodels: ${{ steps.filter.outputs.statsmodels}}
      tf1: ${{ steps.filter.outputs.tf1 }}
      tf2: ${{ steps.filter.outputs.tf2 }}
      transformers: ${{ steps.filter.outputs.transformers }}
      xgboost: ${{ steps.filter.outputs.xgboost }}
    steps:
      - uses: actions/checkout@v2
      - uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            dependencies:
              - pyproject.toml
            related: &related
              - .github/workflows/frameworks.yml
              - scripts/ci/framework_integration_tests.sh
            runner: &runner
              - *related
              - bentoml/_internal/runner/**
              - bentoml/_internal/models/**
            catboost:
              - *runner
              - bentoml/catboost.py
              - tests/integration/frameworks/test_catboost_impl.py
            detectron2:
              - *runner
              - bentoml/detectron.py
              - tests/integration/frameworks/test_detectron2_impl.py
            easyocr:
              - *runner
              - bentoml/easyocr.py
              - tests/integration/frameworks/test_easyocr_impl.py
            evalml:
              - *runner
              - bentoml/evalml.py
              - tests/integration/frameworks/test_evalml_impl.py
            fastai:
              - *runner
              - bentoml/fastai.py
              - tests/integration/frameworks/test_fastai_impl.py
            fasttext:
              - *runner
              - bentoml/fasttext.py
              - tests/integration/frameworks/test_fasttext_impl.py
            gluon:
              - *runner
              - bentoml/gluon.py
              - tests/integration/frameworks/test_gluon_impl.py
            h2o:
              - *runner
              - bentoml/h2o.py
              - tests/integration/frameworks/test_h2o_impl.py
            keras_tf1:
              - *runner
              - bentoml/keras.py
              - tests/integration/frameworks/test_keras_impl.py
            keras_tf2:
              - *runner
              - bentoml/keras.py
              - tests/integration/frameworks/test_keras_impl.py
            lightgbm:
              - *runner
              - bentoml/lightgbm.py
              - tests/integration/frameworks/test_lightgbm_impl.py
            mlflow:
              - *runner
              - bentoml/mlflow.py
              - tests/integration/frameworks/mlflow
            onnx:
              - *runner
              - bentoml/onnx.py
              - tests/integration/frameworks/test_onnx_impl.py
            onnxmlir:
              - *runner
              - bentoml/onnxmlir.py
              - tests/integration/frameworks/test_onnxmlir_impl.py
            paddle:
              - *runner
              - bentoml/paddle.py
              - tests/integration/frameworks/paddle
            pycaret:
              - *runner
              - bentoml/pycaret.py
              - tests/integration/frameworks/test_pycaret_impl.py
            pyspark_mllib:
              - *runner
              - bentoml/pyspark.py
              - tests/integration/frameworks/test_pyspark_impl.py
            pytorch:
              - *runner
              - bentoml/pytorch.py
              - tests/integration/frameworks/test_pytorch_impl.py
            pytorch_lightning:
              - *runner
              - bentoml/pytorch.py
              - bentoml/pytorch_lightning.py
              - tests/integration/frameworks/test_pytorch_lightning_impl.py
            sklearn:
              - *runner
              - bentoml/sklearn.py
              - tests/integration/frameworks/test_sklearn_impl.py
            spacy:
              - *runner
              - bentoml/spacy.py
              - tests/integration/frameworks/spacy
            statsmodels:
              - *runner
              - bentoml/statsmodels.py
              - tests/integration/frameworks/test_statsmodels_impl.py
            tf1:
              - *runner
              - bentoml/tensorflow.py
              - tests/integration/frameworks/test_tensorflow_impl.py
            tf2:
              - *runner
              - bentoml/tensorflow.py
              - tests/integration/frameworks/test_tensorflow_impl.py
            transformers:
              - *runner
              - bentoml/transformers.py
              - tests/integration/frameworks/test_transformers_impl.py
            xgboost:
              - *runner
              - bentoml/xgboost.py
              - tests/integration/frameworks/test_xgboost_impl.py


  catboost_integration_tests:
    needs: diff
    if: ${{ (github.event_name == 'pull_request' && needs.diff.outputs.catboost == 'true') || github.event_name == 'push' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0 # fetch all tags and branches
      - name: Setup python
        uses: actions/setup-python@v2
        with:
          python-version: 3.8

      - name: Get full Python version
        id: full-python-version
        run: echo ::set-output name=version::$(python -c "import sys; print('-'.join(str(v) for v in sys.version_info))")

      - name: Bootstrap poetry
        run: |
          curl -sSL https://install.python-poetry.org | python -

      - name: Update PATH
        run: echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Configure poetry
        run: poetry config virtualenvs.in-project true

      - name: Cache pip dependencies
        uses: actions/cache@v2
        id: cache-pip
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.full-python-version.outputs.version }}-${{ hashFiles('**/pyproject.toml') }}
          restore-keys: |
            venv-${{ runner.os }}-${{ steps.full-python-version.outputs.version }}-

      - name: Ensure cache is healthy
        if: steps.cache.outputs.cache-hit == 'true'
        run: timeout 10s poetry run pip --version || rm -rf .venv

      - name: Install dependencies
        if: steps.cache.outputs.cache-hit != 'true' || needs.diff.outputs.dependencies == 'true'
        run: poetry install

      - name: Run tests and generate coverage report
        run: ./scripts/ci/run_tests.sh catboost
        shell: bash
      - name: Upload test coverage to Codecov
        if: ${{ needs.diff.outputs.catboost == 'true' }}
        uses: codecov/codecov-action@v2
        with:
          directory: ./
          files: ./catboost.xml
          flags: frameworks
          verbose: true

  detectron2_integration_tests:
    needs: diff
    if: ${{ (github.event_name == 'pull_request' && needs.diff.outputs.detectron2 == 'true') || github.event_name == 'push' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0 # fetch all tags and branches
      - name: Setup python
        uses: actions/setup-python@v2
        with:
          python-version: 3.8

      - name: Get full Python version
        id: full-python-version
        run: echo ::set-output name=version::$(python -c "import sys; print('-'.join(str(v) for v in sys.version_info))")

      - name: Bootstrap poetry
        run: |
          curl -sSL https://install.python-poetry.org | python -

      - name: Update PATH
        run: echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Configure poetry
        run: poetry config virtualenvs.in-project true

      - name: Cache pip dependencies
        uses: actions/cache@v2
        id: cache-pip
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.full-python-version.outputs.version }}-${{ hashFiles('**/pyproject.toml') }}
          restore-keys: |
            venv-${{ runner.os }}-${{ steps.full-python-version.outputs.version }}-

      - name: Ensure cache is healthy
        if: steps.cache.outputs.cache-hit == 'true'
        run: timeout 10s poetry run pip --version || rm -rf .venv

      - name: Install dependencies
        if: steps.cache.outputs.cache-hit != 'true' || needs.diff.outputs.dependencies == 'true'
        run: poetry install

      - name: Run tests and generate coverage report
        run: ./scripts/ci/run_tests.sh detectron2
        shell: bash
      - name: Upload test coverage to Codecov
        if: ${{ needs.diff.outputs.detectron2 == 'true' }}
        uses: codecov/codecov-action@v2
        with:
          directory: ./
          files: ./detectron2.xml
          flags: frameworks
          verbose: true

  easyocr_integration_tests:
    needs: diff
    if: ${{ (github.event_name == 'pull_request' && needs.diff.outputs.easyocr == 'true') || github.event_name == 'push' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0 # fetch all tags and branches
      - name: Setup python
        uses: actions/setup-python@v2
        with:
          python-version: 3.8

      - name: Get full Python version
        id: full-python-version
        run: echo ::set-output name=version::$(python -c "import sys; print('-'.join(str(v) for v in sys.version_info))")

      - name: Bootstrap poetry
        run: |
          curl -sSL https://install.python-poetry.org | python -

      - name: Update PATH
        run: echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Configure poetry
        run: poetry config virtualenvs.in-project true

      - name: Cache pip dependencies
        uses: actions/cache@v2
        id: cache-pip
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.full-python-version.outputs.version }}-${{ hashFiles('**/pyproject.toml') }}
          restore-keys: |
            venv-${{ runner.os }}-${{ steps.full-python-version.outputs.version }}-

      - name: Ensure cache is healthy
        if: steps.cache.outputs.cache-hit == 'true'
        run: timeout 10s poetry run pip --version || rm -rf .venv

      - name: Install dependencies
        if: steps.cache.outputs.cache-hit != 'true' || needs.diff.outputs.dependencies == 'true'
        run: poetry install

      - name: Run tests and generate coverage report
        run: ./scripts/ci/run_tests.sh easyocr
        shell: bash
      - name: Upload test coverage to Codecov
        if: ${{ needs.diff.outputs.easyocr == 'true' }}
        uses: codecov/codecov-action@v2
        with:
          directory: ./
          files: ./easyocr.xml
          flags: frameworks
          verbose: true

#  TODO: fix me
#  evalml_integration_tests:
#    needs: diff
#    if: ${{ (github.event_name == 'pull_request' && needs.diff.outputs.evalml == 'true') || github.event_name == 'push' }}
#    runs-on: ubuntu-latest
#    steps:
#      - uses: actions/checkout@v2
#        with:
#          fetch-depth: 0 # fetch all tags and branches
#      - name: Setup python
#        uses: actions/setup-python@v2
#        with:
#          python-version: 3.8
#
#      - name: Get full Python version
#        id: full-python-version
#        run: echo ::set-output name=version::$(python -c "import sys; print('-'.join(str(v) for v in sys.version_info))")
#
#      - name: Bootstrap poetry
#        run: |
#          curl -sSL https://install.python-poetry.org | python -
#
#      - name: Update PATH
#        run: echo "$HOME/.local/bin" >> $GITHUB_PATH
#
#      - name: Configure poetry
#        run: poetry config virtualenvs.in-project true
#
#      - name: Cache pip dependencies
#        uses: actions/cache@v2
#        id: cache-pip
#        with:
#          path: .venv
#          key: venv-${{ runner.os }}-${{ steps.full-python-version.outputs.version }}-${{ hashFiles('**/pyproject.toml') }}
#          restore-keys: |
#            venv-${{ runner.os }}-${{ steps.full-python-version.outputs.version }}-
#
#      - name: Ensure cache is healthy
#        if: steps.cache.outputs.cache-hit == 'true'
#        run: timeout 10s poetry run pip --version || rm -rf .venv
#
#      - name: Install dependencies
#        if: steps.cache.outputs.cache-hit != 'true' || needs.diff.outputs.dependencies == 'true'
#        run: poetry install
#
#      - name: Run tests and generate coverage report
#        run: ./scripts/ci/run_tests.sh evalml
#        shell: bash
#      - name: Upload test coverage to Codecov
#        if: ${{ needs.diff.outputs.evalml == 'true' }}
#        uses: codecov/codecov-action@v2
#        with:
#           directory: ./
#           files: ./evalml.xml
#           flags: frameworks
#           verbose: true

#  TODO: fix me
#  fastai_integration_tests:
#    needs: diff
#    if: ${{ (github.event_name == 'pull_request' && needs.diff.outputs.fastai == 'true') || github.event_name == 'push' }}
#    runs-on: ubuntu-latest
#    steps:
#      - uses: actions/checkout@v2
#        with:
#          fetch-depth: 0 # fetch all tags and branches
#      - name: Setup python
#        uses: actions/setup-python@v2
#        with:
#          python-version: 3.8
#
#      - name: Get full Python version
#        id: full-python-version
#        run: echo ::set-output name=version::$(python -c "import sys; print('-'.join(str(v) for v in sys.version_info))")
#
#      - name: Bootstrap poetry
#        run: |
#          curl -sSL https://install.python-poetry.org | python -
#
#      - name: Update PATH
#        run: echo "$HOME/.local/bin" >> $GITHUB_PATH
#
#      - name: Configure poetry
#        run: poetry config virtualenvs.in-project true
#
#      - name: Cache pip dependencies
#        uses: actions/cache@v2
#        id: cache-pip
#        with:
#          path: .venv
#          key: venv-${{ runner.os }}-${{ steps.full-python-version.outputs.version }}-${{ hashFiles('**/pyproject.toml') }}
#          restore-keys: |
#            venv-${{ runner.os }}-${{ steps.full-python-version.outputs.version }}-
#
#      - name: Ensure cache is healthy
#        if: steps.cache.outputs.cache-hit == 'true'
#        run: timeout 10s poetry run pip --version || rm -rf .venv
#
#      - name: Install dependencies
#        if: steps.cache.outputs.cache-hit != 'true' || needs.diff.outputs.dependencies == 'true'
#        run: poetry install
#
#      - name: Run tests and generate coverage report
#        run: ./scripts/ci/run_tests.sh fastai
#        shell: bash
#      - name: Upload test coverage to Codecov
#        if: ${{ needs.diff.outputs.fastai == 'true' }}
#        uses: codecov/codecov-action@v2
#        with:
#          directory: ./
#          files: ./fastai.xml
#          flags: frameworks
#          verbose: true

#  TODO: fix me
#  fasttext_integration_tests:
#    needs: diff
#    if: ${{ (github.event_name == 'pull_request' && needs.diff.outputs.fasttext == 'true') || github.event_name == 'push' }}
#    runs-on: ubuntu-latest
#    steps:
#      - uses: actions/checkout@v2
#        with:
#          fetch-depth: 0 # fetch all tags and branches
#      - name: Setup python
#        uses: actions/setup-python@v2
#        with:
#          python-version: 3.8
#
#      - name: Get full Python version
#        id: full-python-version
#        run: echo ::set-output name=version::$(python -c "import sys; print('-'.join(str(v) for v in sys.version_info))")
#
#      - name: Bootstrap poetry
#        run: |
#          curl -sSL https://install.python-poetry.org | python -
#
#      - name: Update PATH
#        run: echo "$HOME/.local/bin" >> $GITHUB_PATH
#
#      - name: Configure poetry
#        run: poetry config virtualenvs.in-project true
#
#      - name: Cache pip dependencies
#        uses: actions/cache@v2
#        id: cache-pip
#        with:
#          path: .venv
#          key: venv-${{ runner.os }}-${{ steps.full-python-version.outputs.version }}-${{ hashFiles('**/pyproject.toml') }}
#          restore-keys: |
#            venv-${{ runner.os }}-${{ steps.full-python-version.outputs.version }}-
#
#      - name: Ensure cache is healthy
#        if: steps.cache.outputs.cache-hit == 'true'
#        run: timeout 10s poetry run pip --version || rm -rf .venv
#
#      - name: Install dependencies
#        if: steps.cache.outputs.cache-hit != 'true' || needs.diff.outputs.dependencies == 'true'
#        run: poetry install
#
#      - name: Run tests and generate coverage report
#        run: ./scripts/ci/run_tests.sh fasttext
#        shell: bash
#      - name: Upload test coverage to Codecov
#        if: ${{ needs.diff.outputs.fasttext == 'true' }}
#        uses: codecov/codecov-action@v2
#        with:
#          directory: ./
#          files: ./fasttext.xml
#          flags: frameworks
#          verbose: true

  # TODO(aarnphm): add Trax/Flax support

  gluon_integration_tests:
    needs: diff
    if: ${{ (github.event_name == 'pull_request' && needs.diff.outputs.gluon == 'true') || github.event_name == 'push' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0 # fetch all tags and branches
      - name: Setup python
        uses: actions/setup-python@v2
        with:
          python-version: 3.8

      - name: Get full Python version
        id: full-python-version
        run: echo ::set-output name=version::$(python -c "import sys; print('-'.join(str(v) for v in sys.version_info))")

      - name: Bootstrap poetry
        run: |
          curl -sSL https://install.python-poetry.org | python -

      - name: Update PATH
        run: echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Configure poetry
        run: poetry config virtualenvs.in-project true

      - name: Cache pip dependencies
        uses: actions/cache@v2
        id: cache-pip
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.full-python-version.outputs.version }}-${{ hashFiles('**/pyproject.toml') }}
          restore-keys: |
            venv-${{ runner.os }}-${{ steps.full-python-version.outputs.version }}-

      - name: Ensure cache is healthy
        if: steps.cache.outputs.cache-hit == 'true'
        run: timeout 10s poetry run pip --version || rm -rf .venv

      - name: Install dependencies
        if: steps.cache.outputs.cache-hit != 'true' || needs.diff.outputs.dependencies == 'true'
        run: poetry install

      - name: Run tests and generate coverage report
        run: ./scripts/ci/run_tests.sh gluon
        shell: bash
      - name: Upload test coverage to Codecov
        if: ${{ needs.diff.outputs.gluon == 'true' }}
        uses: codecov/codecov-action@v2
        with:
          directory: ./
          files: ./gluon.xml
          flags: frameworks
          verbose: true

  h2o_integration_tests:
    needs: diff
    if: ${{ (github.event_name == 'pull_request' && needs.diff.outputs.h2o == 'true') || github.event_name == 'push' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0 # fetch all tags and branches
      - name: Setup python
        uses: actions/setup-python@v2
        with:
          python-version: 3.8

      - name: Get full Python version
        id: full-python-version
        run: echo ::set-output name=version::$(python -c "import sys; print('-'.join(str(v) for v in sys.version_info))")

      - name: Bootstrap poetry
        run: |
          curl -sSL https://install.python-poetry.org | python -

      - name: Update PATH
        run: echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Configure poetry
        run: poetry config virtualenvs.in-project true

      - name: Cache pip dependencies
        uses: actions/cache@v2
        id: cache-pip
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.full-python-version.outputs.version }}-${{ hashFiles('**/pyproject.toml') }}
          restore-keys: |
            venv-${{ runner.os }}-${{ steps.full-python-version.outputs.version }}-

      - name: Ensure cache is healthy
        if: steps.cache.outputs.cache-hit == 'true'
        run: timeout 10s poetry run pip --version || rm -rf .venv

      - name: Install dependencies
        if: steps.cache.outputs.cache-hit != 'true' || needs.diff.outputs.dependencies == 'true'
        run: poetry install

      - name: Run tests and generate coverage report
        run: ./scripts/ci/run_tests.sh h2o
        shell: bash
      - name: Upload test coverage to Codecov
        if: ${{ needs.diff.outputs.h2o == 'true' }}
        uses: codecov/codecov-action@v2
        with:
          directory: ./
          files: ./h2o.xml
          flags: frameworks
          verbose: true

  keras_with_tf1_integration_tests:
    needs: diff
    if: ${{ (github.event_name == 'pull_request' && needs.diff.outputs.keras_tf1 == 'true') || github.event_name == 'push' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0 # fetch all tags and branches
      - name: Setup python
        uses: actions/setup-python@v2
        with:
          python-version: 3.7.10

      - name: Get full Python version
        id: full-python-version
        run: echo ::set-output name=version::$(python -c "import sys; print('-'.join(str(v) for v in sys.version_info))")

      - name: Bootstrap poetry
        run: |
          curl -sSL https://install.python-poetry.org | python -

      - name: Update PATH
        run: echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Configure poetry
        run: poetry config virtualenvs.in-project true

      - name: Cache pip dependencies
        uses: actions/cache@v2
        id: cache-pip
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.full-python-version.outputs.version }}-${{ hashFiles('**/pyproject.toml') }}
          restore-keys: |
            venv-${{ runner.os }}-${{ steps.full-python-version.outputs.version }}-

      - name: Ensure cache is healthy
        if: steps.cache.outputs.cache-hit == 'true'
        run: timeout 10s poetry run pip --version || rm -rf .venv

      - name: Install dependencies
        if: steps.cache.outputs.cache-hit != 'true' || needs.diff.outputs.dependencies == 'true'
        run: poetry install

      - name: Run tests and generate coverage report
        run: ./scripts/ci/run_tests.sh keras_tf1
        shell: bash
      - name: Upload test coverage to Codecov
        if: ${{ needs.diff.outputs.keras_tf1 == 'true' }}
        uses: codecov/codecov-action@v2
        with:
          directory: ./
          files: ./keras_tf1.xml
          flags: frameworks
          verbose: true

  keras_with_tf2_integration_tests:
    needs: diff
    if: ${{ (github.event_name == 'pull_request' && needs.diff.outputs.keras_tf2 == 'true') || github.event_name == 'push' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0 # fetch all tags and branches
      - name: Setup python
        uses: actions/setup-python@v2
        with:
          python-version: 3.7.10

      - name: Get full Python version
        id: full-python-version
        run: echo ::set-output name=version::$(python -c "import sys; print('-'.join(str(v) for v in sys.version_info))")

      - name: Bootstrap poetry
        run: |
          curl -sSL https://install.python-poetry.org | python -

      - name: Update PATH
        run: echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Configure poetry
        run: poetry config virtualenvs.in-project true

      - name: Cache pip dependencies
        uses: actions/cache@v2
        id: cache-pip
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.full-python-version.outputs.version }}-${{ hashFiles('**/pyproject.toml') }}
          restore-keys: |
            venv-${{ runner.os }}-${{ steps.full-python-version.outputs.version }}-

      - name: Ensure cache is healthy
        if: steps.cache.outputs.cache-hit == 'true'
        run: timeout 10s poetry run pip --version || rm -rf .venv

      - name: Install dependencies
        if: steps.cache.outputs.cache-hit != 'true' || needs.diff.outputs.dependencies == 'true'
        run: poetry install

      - name: Run tests and generate coverage report
        run: ./scripts/ci/run_tests.sh keras_tf2
        shell: bash
      - name: Upload test coverage to Codecov
        if: ${{ needs.diff.outputs.keras_tf2 == 'true' }}
        uses: codecov/codecov-action@v2
        with:
          directory: ./
          files: ./keras_tf2.xml
          flags: frameworks
          verbose: true

  lightgbm_integration_tests:
    needs: diff
    if: ${{ (github.event_name == 'pull_request' && needs.diff.outputs.lightgbm == 'true') || github.event_name == 'push' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0 # fetch all tags and branches
      - name: Setup python
        uses: actions/setup-python@v2
        with:
          python-version: 3.8

      - name: Get full Python version
        id: full-python-version
        run: echo ::set-output name=version::$(python -c "import sys; print('-'.join(str(v) for v in sys.version_info))")

      - name: Bootstrap poetry
        run: |
          curl -sSL https://install.python-poetry.org | python -

      - name: Update PATH
        run: echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Configure poetry
        run: poetry config virtualenvs.in-project true

      - name: Cache pip dependencies
        uses: actions/cache@v2
        id: cache-pip
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.full-python-version.outputs.version }}-${{ hashFiles('**/pyproject.toml') }}
          restore-keys: |
            venv-${{ runner.os }}-${{ steps.full-python-version.outputs.version }}-

      - name: Ensure cache is healthy
        if: steps.cache.outputs.cache-hit == 'true'
        run: timeout 10s poetry run pip --version || rm -rf .venv

      - name: Install dependencies
        if: steps.cache.outputs.cache-hit != 'true' || needs.diff.outputs.dependencies == 'true'
        run: poetry install

      - name: Run tests and generate coverage report
        run: ./scripts/ci/run_tests.sh lightgbm
        shell: bash
      - name: Upload test coverage to Codecov
        if: ${{ needs.diff.outputs.lightgbm == 'true' }}
        uses: codecov/codecov-action@v2
        with:
          directory: ./
          files: ./lightgbm.xml
          flags: frameworks
          verbose: true

  mlflow_integration_tests:
    needs: diff
    if: ${{ (github.event_name == 'pull_request' && needs.diff.outputs.mlflow == 'true') || github.event_name == 'push' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0 # fetch all tags and branches
      - name: Setup python
        uses: actions/setup-python@v2
        with:
          python-version: 3.8

      - name: Get full Python version
        id: full-python-version
        run: echo ::set-output name=version::$(python -c "import sys; print('-'.join(str(v) for v in sys.version_info))")

      - name: Bootstrap poetry
        run: |
          curl -sSL https://install.python-poetry.org | python -

      - name: Update PATH
        run: echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Configure poetry
        run: poetry config virtualenvs.in-project true

      - name: Cache pip dependencies
        uses: actions/cache@v2
        id: cache-pip
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.full-python-version.outputs.version }}-${{ hashFiles('**/pyproject.toml') }}
          restore-keys: |
            venv-${{ runner.os }}-${{ steps.full-python-version.outputs.version }}-

      - name: Ensure cache is healthy
        if: steps.cache.outputs.cache-hit == 'true'
        run: timeout 10s poetry run pip --version || rm -rf .venv

      - name: Install dependencies
        if: steps.cache.outputs.cache-hit != 'true' || needs.diff.outputs.dependencies == 'true'
        run: poetry install

      - name: Run tests and generate coverage report
        run: ./scripts/ci/run_tests.sh mlflow
        shell: bash
      - name: Upload test coverage to Codecov
        if: ${{ needs.diff.outputs.mlflow == 'true' }}
        uses: codecov/codecov-action@v2
        with:
          directory: ./
          files: ./mlflow.xml
          flags: frameworks
          verbose: true

  onnx_integration_tests:
    needs: diff
    if: ${{ (github.event_name == 'pull_request' && needs.diff.outputs.onnx == 'true') || github.event_name == 'push' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0 # fetch all tags and branches
      - name: Setup python
        uses: actions/setup-python@v2
        with:
          python-version: 3.8

      - name: Get full Python version
        id: full-python-version
        run: echo ::set-output name=version::$(python -c "import sys; print('-'.join(str(v) for v in sys.version_info))")

      - name: Bootstrap poetry
        run: |
          curl -sSL https://install.python-poetry.org | python -

      - name: Update PATH
        run: echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Configure poetry
        run: poetry config virtualenvs.in-project true

      - name: Cache pip dependencies
        uses: actions/cache@v2
        id: cache-pip
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.full-python-version.outputs.version }}-${{ hashFiles('**/pyproject.toml') }}
          restore-keys: |
            venv-${{ runner.os }}-${{ steps.full-python-version.outputs.version }}-

      - name: Ensure cache is healthy
        if: steps.cache.outputs.cache-hit == 'true'
        run: timeout 10s poetry run pip --version || rm -rf .venv

      - name: Install dependencies
        if: steps.cache.outputs.cache-hit != 'true' || needs.diff.outputs.dependencies == 'true'
        run: poetry install

      - name: Run tests and generate coverage report
        run: ./scripts/ci/run_tests.sh onnx
        shell: bash
      - name: Upload test coverage to Codecov
        if: ${{ needs.diff.outputs.onnx == 'true' }}
        uses: codecov/codecov-action@v2
        with:
          directory: ./
          files: ./onnx.xml
          flags: frameworks
          verbose: true

  onnxmlir_integration_tests:
    needs: diff
    if: ${{ (github.event_name == 'pull_request' && needs.diff.outputs.onnxmlir == 'true') || github.event_name == 'push' }}
    runs-on: ubuntu-latest
    container:
      image: onnxmlirczar/onnx-mlir-dev:latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0 # fetch all tags and branches
      - name: Setup python
        uses: actions/setup-python@v2
        with:
          python-version: 3.8

      - name: Get full Python version
        id: full-python-version
        run: echo ::set-output name=version::$(python -c "import sys; print('-'.join(str(v) for v in sys.version_info))")

      - name: Bootstrap poetry
        run: |
          apt-get update && apt-get install curl -y
          curl -sSL https://install.python-poetry.org | python -

      - name: Update PATH
        run: echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Configure poetry
        run: |
          export PATH="/root/.local/bin:${PATH}"
          poetry config virtualenvs.in-project true

      - name: Cache pip dependencies
        uses: actions/cache@v2
        id: cache-pip
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.full-python-version.outputs.version }}-${{ hashFiles('**/pyproject.toml') }}
          restore-keys: |
            venv-${{ runner.os }}-${{ steps.full-python-version.outputs.version }}-

      - name: Ensure cache is healthy
        if: steps.cache.outputs.cache-hit == 'true'
        run: timeout 10s poetry run pip --version || rm -rf .venv

      - name: Install dependencies
        if: steps.cache.outputs.cache-hit != 'true' || needs.diff.outputs.dependencies == 'true'
        run: poetry install

      - name: Run tests and generate coverage report
        run: |
          poetry run python -m pip install tensorflow==2.2.0 pandas tf2onnx pyyaml
          export PATH="/workdir/onnx-mlir/build/Debug/lib/:/workdir/onnx-mlir/build/Debug/bin/:${PATH}"
          export PYTHONPATH="${PYTHONPATH}:/workdir/onnx-mlir/build/Debug/lib/"
          poetry run pytest tests/integration/frameworks/test_onnxmlir_impl.py --cov=bentoml --cov-config=.coveragerc --cov-report=xml:"onnxmlir.xml"

      - name: Upload test coverage to Codecov
        if: ${{ needs.diff.outputs.onnxmlir == 'true' }}
        uses: codecov/codecov-action@v2
        with:
          directory: ./
          files: ./onnxmlir.xml
          flags: frameworks
          verbose: true

  paddle_integration_tests:
    needs: diff
    if: ${{ (github.event_name == 'pull_request' && needs.diff.outputs.paddle == 'true') || github.event_name == 'push' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0 # fetch all tags and branches
      - name: Setup python
        uses: actions/setup-python@v2
        with:
          python-version: 3.8

      - name: Get full Python version
        id: full-python-version
        run: echo ::set-output name=version::$(python -c "import sys; print('-'.join(str(v) for v in sys.version_info))")

      - name: Bootstrap poetry
        run: |
          curl -sSL https://install.python-poetry.org | python -

      - name: Update PATH
        run: echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Configure poetry
        run: poetry config virtualenvs.in-project true

      - name: Cache pip dependencies
        uses: actions/cache@v2
        id: cache-pip
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.full-python-version.outputs.version }}-${{ hashFiles('**/pyproject.toml') }}
          restore-keys: |
            venv-${{ runner.os }}-${{ steps.full-python-version.outputs.version }}-

      - name: Ensure cache is healthy
        if: steps.cache.outputs.cache-hit == 'true'
        run: timeout 10s poetry run pip --version || rm -rf .venv

      - name: Install dependencies
        if: steps.cache.outputs.cache-hit != 'true' || needs.diff.outputs.dependencies == 'true'
        run: poetry install

      - name: Run tests and generate coverage report
        run: ./scripts/ci/run_tests.sh paddle
        shell: bash
      - name: Upload test coverage to Codecov
        if: ${{ needs.diff.outputs.paddle == 'true' }}
        uses: codecov/codecov-action@v2
        with:
          directory: ./
          files: ./paddle.xml
          flags: frameworks
          verbose: true

  pycaret_integration_tests:
    needs: diff
    if: ${{ (github.event_name == 'pull_request' && needs.diff.outputs.pycaret == 'true') || github.event_name == 'push' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0 # fetch all tags and branches
      - name: Setup python
        uses: actions/setup-python@v2
        with:
          python-version: 3.8

      - name: Get full Python version
        id: full-python-version
        run: echo ::set-output name=version::$(python -c "import sys; print('-'.join(str(v) for v in sys.version_info))")

      - name: Bootstrap poetry
        run: |
          curl -sSL https://install.python-poetry.org | python -

      - name: Update PATH
        run: echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Configure poetry
        run: poetry config virtualenvs.in-project true

      - name: Cache pip dependencies
        uses: actions/cache@v2
        id: cache-pip
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.full-python-version.outputs.version }}-${{ hashFiles('**/pyproject.toml') }}
          restore-keys: |
            venv-${{ runner.os }}-${{ steps.full-python-version.outputs.version }}-

      - name: Ensure cache is healthy
        if: steps.cache.outputs.cache-hit == 'true'
        run: timeout 10s poetry run pip --version || rm -rf .venv

      - name: Install dependencies
        if: steps.cache.outputs.cache-hit != 'true' || needs.diff.outputs.dependencies == 'true'
        run: poetry install

      - name: Run tests and generate coverage report
        run: ./scripts/ci/run_tests.sh pycaret
        shell: bash
      - name: Upload test coverage to Codecov
        if: ${{ needs.diff.outputs.pycaret == 'true' }}
        uses: codecov/codecov-action@v2
        with:
          directory: ./
          files: ./pycaret.xml
          flags: frameworks
          verbose: true

#  TODO: fix me
#  pyspark_mllib_integration_tests:
#    needs: diff
#    if: ${{ (github.event_name == 'pull_request' && needs.diff.outputs.pyspark_mllib == 'true') || github.event_name == 'push' }}
#    runs-on: ubuntu-latest
#    steps:
#      - uses: actions/checkout@v2
#        with:
#          fetch-depth: 0 # fetch all tags and branches
#      - name: Setup python
#        uses: actions/setup-python@v2
#        with:
#          python-version: 3.7
#
#      - name: Get full Python version
#        id: full-python-version
#        run: echo ::set-output name=version::$(python -c "import sys; print('-'.join(str(v) for v in sys.version_info))")
#
#      - name: Bootstrap poetry
#        run: |
#          curl -sSL https://install.python-poetry.org | python -
#
#      - name: Update PATH
#        run: echo "$HOME/.local/bin" >> $GITHUB_PATH
#
#      - name: Configure poetry
#        run: poetry config virtualenvs.in-project true
#
#      - name: Cache pip dependencies
#        uses: actions/cache@v2
#        id: cache-pip
#        with:
#          path: .venv
#          key: venv-${{ runner.os }}-${{ steps.full-python-version.outputs.version }}-${{ hashFiles('**/pyproject.toml') }}
#          restore-keys: |
#            venv-${{ runner.os }}-${{ steps.full-python-version.outputs.version }}-
#
#      - name: Ensure cache is healthy
#        if: steps.cache.outputs.cache-hit == 'true'
#        run: timeout 10s poetry run pip --version || rm -rf .venv
#
#      - name: Install dependencies
#        if: steps.cache.outputs.cache-hit != 'true' || needs.diff.outputs.dependencies == 'true'
#        run: poetry install
#
#      - name: Run tests and generate coverage report
#        run: ./scripts/ci/run_tests.sh pyspark
#        shell: bash
#      - name: Upload test coverage to Codecov
#        if: ${{ needs.diff.outputs.pyspark_mllib == 'true' }}
#        uses: codecov/codecov-action@v2
#        with:
#          directory: ./
#          files: ./pyspark.xml
#          flags: frameworks
#          verbose: true

  pytorch_integration_tests:
    needs: diff
    if: ${{ (github.event_name == 'pull_request' && needs.diff.outputs.pytorch == 'true') || github.event_name == 'push' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0 # fetch all tags and branches
      - name: Setup python
        uses: actions/setup-python@v2
        with:
          python-version: 3.8

      - name: Get full Python version
        id: full-python-version
        run: echo ::set-output name=version::$(python -c "import sys; print('-'.join(str(v) for v in sys.version_info))")

      - name: Bootstrap poetry
        run: |
          curl -sSL https://install.python-poetry.org | python -

      - name: Update PATH
        run: echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Configure poetry
        run: poetry config virtualenvs.in-project true

      - name: Cache pip dependencies
        uses: actions/cache@v2
        id: cache-pip
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.full-python-version.outputs.version }}-${{ hashFiles('**/pyproject.toml') }}
          restore-keys: |
            venv-${{ runner.os }}-${{ steps.full-python-version.outputs.version }}-

      - name: Ensure cache is healthy
        if: steps.cache.outputs.cache-hit == 'true'
        run: timeout 10s poetry run pip --version || rm -rf .venv

      - name: Install dependencies
        if: steps.cache.outputs.cache-hit != 'true' || needs.diff.outputs.dependencies == 'true'
        run: poetry install

      - name: Run tests and generate coverage report
        run: ./scripts/ci/run_tests.sh pytorch
        shell: bash
      - name: Upload test coverage to Codecov
        if: ${{ needs.diff.outputs.pytorch == 'true' }}
        uses: codecov/codecov-action@v2
        with:
          directory: ./
          files: ./pytorch.xml
          flags: frameworks
          verbose: true

  pytorch_lightning_integration_tests:
    needs: diff
    if: ${{ (github.event_name == 'pull_request' && needs.diff.outputs.pytorch_lightning == 'true') || github.event_name == 'push' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0 # fetch all tags and branches
      - name: Setup python
        uses: actions/setup-python@v2
        with:
          python-version: 3.8

      - name: Get full Python version
        id: full-python-version
        run: echo ::set-output name=version::$(python -c "import sys; print('-'.join(str(v) for v in sys.version_info))")

      - name: Bootstrap poetry
        run: |
          curl -sSL https://install.python-poetry.org | python -

      - name: Update PATH
        run: echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Configure poetry
        run: poetry config virtualenvs.in-project true

      - name: Cache pip dependencies
        uses: actions/cache@v2
        id: cache-pip
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.full-python-version.outputs.version }}-${{ hashFiles('**/pyproject.toml') }}
          restore-keys: |
            venv-${{ runner.os }}-${{ steps.full-python-version.outputs.version }}-

      - name: Ensure cache is healthy
        if: steps.cache.outputs.cache-hit == 'true'
        run: timeout 10s poetry run pip --version || rm -rf .venv

      - name: Install dependencies
        if: steps.cache.outputs.cache-hit != 'true' || needs.diff.outputs.dependencies == 'true'
        run: poetry install

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Run tests and generate coverage report
        run: ./scripts/ci/run_tests.sh pytorch_lightning
        shell: bash
      - name: Upload test coverage to Codecov
        if: ${{ needs.diff.outputs.pytorch_lightning == 'true' }}
        uses: codecov/codecov-action@v2
        with:
          directory: ./
          files: ./pytorch_lightning.xml
          flags: frameworks
          verbose: true

  sklearn_integration_tests:
    needs: diff
    if: ${{ (github.event_name == 'pull_request' && needs.diff.outputs.sklearn == 'true') || github.event_name == 'push' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0 # fetch all tags and branches
      - name: Setup python
        uses: actions/setup-python@v2
        with:
          python-version: 3.8

      - name: Get full Python version
        id: full-python-version
        run: echo ::set-output name=version::$(python -c "import sys; print('-'.join(str(v) for v in sys.version_info))")

      - name: Bootstrap poetry
        run: |
          curl -sSL https://install.python-poetry.org | python -

      - name: Update PATH
        run: echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Configure poetry
        run: poetry config virtualenvs.in-project true

      - name: Cache pip dependencies
        uses: actions/cache@v2
        id: cache-pip
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.full-python-version.outputs.version }}-${{ hashFiles('**/pyproject.toml') }}
          restore-keys: |
            venv-${{ runner.os }}-${{ steps.full-python-version.outputs.version }}-

      - name: Ensure cache is healthy
        if: steps.cache.outputs.cache-hit == 'true'
        run: timeout 10s poetry run pip --version || rm -rf .venv

      - name: Install dependencies
        if: steps.cache.outputs.cache-hit != 'true' || needs.diff.outputs.dependencies == 'true'
        run: poetry install

      - name: Run tests and generate coverage report
        run: ./scripts/ci/run_tests.sh sklearn
        shell: bash
      - name: Upload test coverage to Codecov
        if: ${{ needs.diff.outputs.sklearn == 'true' }}
        uses: codecov/codecov-action@v2
        with:
          directory: ./
          files: ./sklearn.xml
          flags: frameworks
          verbose: true

  spacy_integration_tests:
    needs: diff
    if: ${{ (github.event_name == 'pull_request' && needs.diff.outputs.spacy == 'true') || github.event_name == 'push' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0 # fetch all tags and branches
      - name: Setup python
        uses: actions/setup-python@v2
        with:
          python-version: 3.8

      - name: Get full Python version
        id: full-python-version
        run: echo ::set-output name=version::$(python -c "import sys; print('-'.join(str(v) for v in sys.version_info))")

      - name: Bootstrap poetry
        run: |
          curl -sSL https://install.python-poetry.org | python -

      - name: Update PATH
        run: echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Configure poetry
        run: poetry config virtualenvs.in-project true

      - name: Cache pip dependencies
        uses: actions/cache@v2
        id: cache-pip
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.full-python-version.outputs.version }}-${{ hashFiles('**/pyproject.toml') }}
          restore-keys: |
            venv-${{ runner.os }}-${{ steps.full-python-version.outputs.version }}-

      - name: Ensure cache is healthy
        if: steps.cache.outputs.cache-hit == 'true'
        run: timeout 10s poetry run pip --version || rm -rf .venv

      - name: Install dependencies
        if: steps.cache.outputs.cache-hit != 'true' || needs.diff.outputs.dependencies == 'true'
        run: poetry install

      - name: Run tests and generate coverage report
        run: ./scripts/ci/run_tests.sh spacy
        shell: bash
      - name: Upload test coverage to Codecov
        if: ${{ needs.diff.outputs.spacy == 'true' }}
        uses: codecov/codecov-action@v2
        with:
          directory: ./
          files: ./spacy.xml
          flags: frameworks
          verbose: true

  statsmodels_integration_tests:
    needs: diff
    if: ${{ (github.event_name == 'pull_request' && needs.diff.outputs.statsmodels == 'true') || github.event_name == 'push' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0 # fetch all tags and branches
      - name: Setup python
        uses: actions/setup-python@v2
        with:
          python-version: 3.8

      - name: Get full Python version
        id: full-python-version
        run: echo ::set-output name=version::$(python -c "import sys; print('-'.join(str(v) for v in sys.version_info))")

      - name: Bootstrap poetry
        run: |
          curl -sSL https://install.python-poetry.org | python -

      - name: Update PATH
        run: echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Configure poetry
        run: poetry config virtualenvs.in-project true

      - name: Cache pip dependencies
        uses: actions/cache@v2
        id: cache-pip
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.full-python-version.outputs.version }}-${{ hashFiles('**/pyproject.toml') }}
          restore-keys: |
            venv-${{ runner.os }}-${{ steps.full-python-version.outputs.version }}-

      - name: Ensure cache is healthy
        if: steps.cache.outputs.cache-hit == 'true'
        run: timeout 10s poetry run pip --version || rm -rf .venv

      - name: Install dependencies
        if: steps.cache.outputs.cache-hit != 'true' || needs.diff.outputs.dependencies == 'true'
        run: poetry install

      - name: Run tests and generate coverage report
        run: ./scripts/ci/run_tests.sh statsmodels
        shell: bash
      - name: Upload test coverage to Codecov
        if: ${{ needs.diff.outputs.statsmodels == 'true' }}
        uses: codecov/codecov-action@v2
        with:
          directory: ./
          files: ./statsmodels.xml
          flags: frameworks
          verbose: true

  tensorflow_v1_integration_tests:
    needs: diff
    if: ${{ (github.event_name == 'pull_request' && needs.diff.outputs.tf1 == 'true') || github.event_name == 'push' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0 # fetch all tags and branches
      - name: Setup python
        uses: actions/setup-python@v2
        with:
          python-version: 3.7

      - name: Get full Python version
        id: full-python-version
        run: echo ::set-output name=version::$(python -c "import sys; print('-'.join(str(v) for v in sys.version_info))")

      - name: Bootstrap poetry
        run: |
          curl -sSL https://install.python-poetry.org | python -

      - name: Update PATH
        run: echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Configure poetry
        run: poetry config virtualenvs.in-project true

      - name: Cache pip dependencies
        uses: actions/cache@v2
        id: cache-pip
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.full-python-version.outputs.version }}-${{ hashFiles('**/pyproject.toml') }}
          restore-keys: |
            venv-${{ runner.os }}-${{ steps.full-python-version.outputs.version }}-

      - name: Ensure cache is healthy
        if: steps.cache.outputs.cache-hit == 'true'
        run: timeout 10s poetry run pip --version || rm -rf .venv

      - name: Install dependencies
        if: steps.cache.outputs.cache-hit != 'true' || needs.diff.outputs.dependencies == 'true'
        run: poetry install

      - name: Run tests and generate coverage report
        run: ./scripts/ci/run_tests.sh tf1
        shell: bash
      - name: Upload test coverage to Codecov
        if: ${{ needs.diff.outputs.tf1 == 'true' }}
        uses: codecov/codecov-action@v2
        with:
          directory: ./
          files: ./tf1.xml
          flags: frameworks
          verbose: true

  tensorflow_v2_integration_tests:
    needs: diff
    if: ${{ (github.event_name == 'pull_request' && needs.diff.outputs.tf2 == 'true') || github.event_name == 'push' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0 # fetch all tags and branches
      - name: Setup python
        uses: actions/setup-python@v2
        with:
          python-version: 3.8

      - name: Get full Python version
        id: full-python-version
        run: echo ::set-output name=version::$(python -c "import sys; print('-'.join(str(v) for v in sys.version_info))")

      - name: Bootstrap poetry
        run: |
          curl -sSL https://install.python-poetry.org | python -

      - name: Update PATH
        run: echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Configure poetry
        run: poetry config virtualenvs.in-project true

      - name: Cache pip dependencies
        uses: actions/cache@v2
        id: cache-pip
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.full-python-version.outputs.version }}-${{ hashFiles('**/pyproject.toml') }}
          restore-keys: |
            venv-${{ runner.os }}-${{ steps.full-python-version.outputs.version }}-

      - name: Ensure cache is healthy
        if: steps.cache.outputs.cache-hit == 'true'
        run: timeout 10s poetry run pip --version || rm -rf .venv

      - name: Install dependencies
        if: steps.cache.outputs.cache-hit != 'true' || needs.diff.outputs.dependencies == 'true'
        run: poetry install

      - name: Run tests and generate coverage report
        run: ./scripts/ci/run_tests.sh tf2
        shell: bash
      - name: Upload test coverage to Codecov
        if: ${{ needs.diff.outputs.tf2 == 'true' }}
        uses: codecov/codecov-action@v2
        with:
          directory: ./
          files: ./tf2.xml
          flags: frameworks
          verbose: true

  transformers_integration_tests:
    needs: diff
    if: ${{ (github.event_name == 'pull_request' && needs.diff.outputs.transformers == 'true') || github.event_name == 'push' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0 # fetch all tags and branches
      - name: Setup python
        uses: actions/setup-python@v2
        with:
          python-version: 3.8

      - name: Get full Python version
        id: full-python-version
        run: echo ::set-output name=version::$(python -c "import sys; print('-'.join(str(v) for v in sys.version_info))")

      - name: Bootstrap poetry
        run: |
          curl -sSL https://install.python-poetry.org | python -

      - name: Update PATH
        run: echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Configure poetry
        run: poetry config virtualenvs.in-project true

      - name: Cache pip dependencies
        uses: actions/cache@v2
        id: cache-pip
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.full-python-version.outputs.version }}-${{ hashFiles('**/pyproject.toml') }}
          restore-keys: |
            venv-${{ runner.os }}-${{ steps.full-python-version.outputs.version }}-

      - name: Ensure cache is healthy
        if: steps.cache.outputs.cache-hit == 'true'
        run: timeout 10s poetry run pip --version || rm -rf .venv

      - name: Install dependencies
        if: steps.cache.outputs.cache-hit != 'true' || needs.diff.outputs.dependencies == 'true'
        run: poetry install

      - name: Run tests and generate coverage report
        run: ./scripts/ci/run_tests.sh transformers
        shell: bash
      - name: Upload test coverage to Codecov
        if: ${{ needs.diff.outputs.transformers == 'true' }}
        uses: codecov/codecov-action@v2
        with:
          directory: ./
          files: ./transformers.xml
          flags: frameworks
          verbose: true

  xgboost_integration_tests:
    needs: diff
    if: ${{ (github.event_name == 'pull_request' && needs.diff.outputs.xgboost == 'true') || github.event_name == 'push' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0 # fetch all tags and branches
      - name: Setup python
        uses: actions/setup-python@v2
        with:
          python-version: 3.8

      - name: Get full Python version
        id: full-python-version
        run: echo ::set-output name=version::$(python -c "import sys; print('-'.join(str(v) for v in sys.version_info))")

      - name: Bootstrap poetry
        run: |
          curl -sSL https://install.python-poetry.org | python -

      - name: Update PATH
        run: echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Configure poetry
        run: poetry config virtualenvs.in-project true

      - name: Cache pip dependencies
        uses: actions/cache@v2
        id: cache-pip
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.full-python-version.outputs.version }}-${{ hashFiles('**/pyproject.toml') }}
          restore-keys: |
            venv-${{ runner.os }}-${{ steps.full-python-version.outputs.version }}-

      - name: Ensure cache is healthy
        if: steps.cache.outputs.cache-hit == 'true'
        run: timeout 10s poetry run pip --version || rm -rf .venv

      - name: Install dependencies
        if: steps.cache.outputs.cache-hit != 'true' || needs.diff.outputs.dependencies == 'true'
        run: poetry install

      - name: Run tests and generate coverage report
        run: ./scripts/ci/run_tests.sh xgboost
        shell: bash
      - name: Upload test coverage to Codecov
        if: ${{ needs.diff.outputs.xgboost == 'true' }}
        uses: codecov/codecov-action@v2
        with:
          directory: ./
          files: ./xgboost.xml
          flags: frameworks
          verbose: true

concurrency:
  group: frameworks${{ github.event.pull_request.number || github.sha }}
  cancel-in-progress: true
