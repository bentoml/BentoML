import sys

if sys.platform == "win32": ...

class _ReducerRegistry:
    """Registry for custom reducers.

    HIGHEST_PROTOCOL is selected by default as this pickler is used
    to pickle ephemeral datastructures for interprocess communication
    hence no backward compatibility is required.

    """

    dispatch_table = ...
    @classmethod
    def register(cls, type, reduce_func):  # -> None:
        """Attach a reducer function to a given type in the dispatch table."""
        ...

register = ...

class _C:
    def f(self): ...
    @classmethod
    def h(cls): ...

if nothasattr(sys, "pypy_version_info"): ...
if sys.platform != "win32": ...
else: ...
ENV_LOKY_PICKLER = ...
_LokyPickler = ...
_loky_pickler_name = ...

def set_loky_pickler(loky_pickler=...):  # -> None:
    class CustomizablePickler(loky_pickler_cls): ...

def get_loky_pickler_name(): ...
def get_loky_pickler(): ...
def loads(buf): ...
def dump(obj, file, reducers=..., protocol=...):  # -> None:
    """Replacement for pickle.dump() using _LokyPickler."""
    ...

def dumps(obj, reducers=..., protocol=...): ...

__all__ = ["dump", "dumps", "loads", "register", "set_loky_pickler"]
if sys.platform == "win32": ...
