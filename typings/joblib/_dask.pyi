import contextlib
from .parallel import AutoBatchingMixin, ParallelBackendBase

if distributed is not None: ...

def is_weakrefable(obj): ...

class _WeakKeyDictionary:
    def __init__(self) -> None: ...
    def __getitem__(self, obj): ...
    def __setitem__(self, obj, value): ...
    def __len__(self): ...
    def clear(self): ...

class Batch:
    def __init__(self, tasks) -> None: ...
    def __call__(self, tasks=...): ...
    def __repr__(self): ...

class DaskDistributedBackend(AutoBatchingMixin, ParallelBackendBase):
    MIN_IDEAL_BATCH_DURATION = ...
    MAX_IDEAL_BATCH_DURATION = ...
    supports_timeout = ...
    def __init__(
        self,
        scheduler_host=...,
        scatter=...,
        client=...,
        loop=...,
        wait_for_workers_timeout=...,
        **submit_kwargs
    ) -> None: ...
    def __reduce__(self): ...
    def get_nested_backend(self): ...
    def configure(self, n_jobs=..., parallel=..., **backend_args): ...
    def start_call(self): ...
    def stop_call(self): ...
    def effective_n_jobs(self, n_jobs): ...
    def apply_async(self, func, callback=...): ...
    def abort_everything(self, ensure_ready=...): ...
    @contextlib.contextmanager
    def retrieval_context(self): ...
