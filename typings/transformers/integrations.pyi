from .trainer_callback import TrainerCallback
from .trainer_utils import BestRun

logger = ...
_has_comet = ...
if _has_comet: ...

def is_wandb_available(): ...
def is_comet_available(): ...
def is_tensorboard_available(): ...
def is_optuna_available(): ...
def is_ray_available(): ...
def is_ray_tune_available(): ...
def is_azureml_available(): ...
def is_mlflow_available(): ...
def is_fairscale_available(): ...
def is_neptune_available(): ...
def is_codecarbon_available(): ...
def hp_params(trial): ...
def default_hp_search_backend(): ...
def run_hp_search_optuna(
    trainer, n_trials: int, direction: str, **kwargs
) -> BestRun: ...
def run_hp_search_ray(trainer, n_trials: int, direction: str, **kwargs) -> BestRun: ...
def get_available_reporting_integrations(): ...
def rewrite_logs(d): ...

class TensorBoardCallback(TrainerCallback):
    def __init__(self, tb_writer=...) -> None: ...
    def on_train_begin(self, args, state, control, **kwargs): ...
    def on_log(self, args, state, control, logs=..., **kwargs): ...
    def on_train_end(self, args, state, control, **kwargs): ...

class WandbCallback(TrainerCallback):
    def __init__(self) -> None: ...
    def setup(self, args, state, model, **kwargs): ...
    def on_train_begin(self, args, state, control, model=..., **kwargs): ...
    def on_train_end(
        self, args, state, control, model=..., tokenizer=..., **kwargs
    ): ...
    def on_log(self, args, state, control, model=..., logs=..., **kwargs): ...

class CometCallback(TrainerCallback):
    def __init__(self) -> None: ...
    def setup(self, args, state, model): ...
    def on_train_begin(self, args, state, control, model=..., **kwargs): ...
    def on_log(self, args, state, control, model=..., logs=..., **kwargs): ...

class AzureMLCallback(TrainerCallback):
    def __init__(self, azureml_run=...) -> None: ...
    def on_init_end(self, args, state, control, **kwargs): ...
    def on_log(self, args, state, control, logs=..., **kwargs): ...

class MLflowCallback(TrainerCallback):
    def __init__(self) -> None: ...
    def setup(self, args, state, model): ...
    def on_train_begin(self, args, state, control, model=..., **kwargs): ...
    def on_log(self, args, state, control, logs, model=..., **kwargs): ...
    def on_train_end(self, args, state, control, **kwargs): ...
    def __del__(self): ...

class NeptuneCallback(TrainerCallback):
    def __init__(self) -> None: ...
    def setup(self, args, state, model): ...
    def on_train_begin(self, args, state, control, model=..., **kwargs): ...
    def on_log(self, args, state, control, logs, model=..., **kwargs): ...
    def __del__(self): ...

class CodeCarbonCallback(TrainerCallback):
    def __init__(self) -> None: ...
    def on_init_end(self, args, state, control, **kwargs): ...
    def on_train_begin(self, args, state, control, model=..., **kwargs): ...
    def on_train_end(self, args, state, control, **kwargs): ...

INTEGRATION_TO_CALLBACK = ...
