"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
This file defines an interface for exporting monitoring information
out of gRPC servers.  See the full design at
https://github.com/grpc/proposal/blob/master/A14-channelz.md

The canonical version of this proto can be found at
https://github.com/grpc/grpc-proto/blob/master/grpc/channelz/v1/channelz.proto
"""
import abc
import grpc
import grpc.channelz.channelz_pb2

class ChannelzStub:
    """Channelz is a service exposed by gRPC servers that provides detailed debug
    information.
    """

    def __init__(self, channel: grpc.Channel) -> None: ...
    GetTopChannels: grpc.UnaryUnaryMultiCallable[
        grpc.channelz.channelz_pb2.GetTopChannelsRequest,
        grpc.channelz.channelz_pb2.GetTopChannelsResponse,
    ]
    """Gets all root channels (i.e. channels the application has directly
    created). This does not include subchannels nor non-top level channels.
    """
    GetServers: grpc.UnaryUnaryMultiCallable[
        grpc.channelz.channelz_pb2.GetServersRequest,
        grpc.channelz.channelz_pb2.GetServersResponse,
    ]
    """Gets all servers that exist in the process."""
    GetServer: grpc.UnaryUnaryMultiCallable[
        grpc.channelz.channelz_pb2.GetServerRequest,
        grpc.channelz.channelz_pb2.GetServerResponse,
    ]
    """Returns a single Server, or else a NOT_FOUND code."""
    GetServerSockets: grpc.UnaryUnaryMultiCallable[
        grpc.channelz.channelz_pb2.GetServerSocketsRequest,
        grpc.channelz.channelz_pb2.GetServerSocketsResponse,
    ]
    """Gets all server sockets that exist in the process."""
    GetChannel: grpc.UnaryUnaryMultiCallable[
        grpc.channelz.channelz_pb2.GetChannelRequest,
        grpc.channelz.channelz_pb2.GetChannelResponse,
    ]
    """Returns a single Channel, or else a NOT_FOUND code."""
    GetSubchannel: grpc.UnaryUnaryMultiCallable[
        grpc.channelz.channelz_pb2.GetSubchannelRequest,
        grpc.channelz.channelz_pb2.GetSubchannelResponse,
    ]
    """Returns a single Subchannel, or else a NOT_FOUND code."""
    GetSocket: grpc.UnaryUnaryMultiCallable[
        grpc.channelz.channelz_pb2.GetSocketRequest,
        grpc.channelz.channelz_pb2.GetSocketResponse,
    ]
    """Returns a single Socket or else a NOT_FOUND code."""

class ChannelzServicer(metaclass=abc.ABCMeta):
    """Channelz is a service exposed by gRPC servers that provides detailed debug
    information.
    """

    @abc.abstractmethod
    def GetTopChannels(
        self,
        request: grpc.channelz.channelz_pb2.GetTopChannelsRequest,
        context: grpc.ServicerContext,
    ) -> grpc.channelz.channelz_pb2.GetTopChannelsResponse:
        """Gets all root channels (i.e. channels the application has directly
        created). This does not include subchannels nor non-top level channels.
        """
    @abc.abstractmethod
    def GetServers(
        self,
        request: grpc.channelz.channelz_pb2.GetServersRequest,
        context: grpc.ServicerContext,
    ) -> grpc.channelz.channelz_pb2.GetServersResponse:
        """Gets all servers that exist in the process."""
    @abc.abstractmethod
    def GetServer(
        self,
        request: grpc.channelz.channelz_pb2.GetServerRequest,
        context: grpc.ServicerContext,
    ) -> grpc.channelz.channelz_pb2.GetServerResponse:
        """Returns a single Server, or else a NOT_FOUND code."""
    @abc.abstractmethod
    def GetServerSockets(
        self,
        request: grpc.channelz.channelz_pb2.GetServerSocketsRequest,
        context: grpc.ServicerContext,
    ) -> grpc.channelz.channelz_pb2.GetServerSocketsResponse:
        """Gets all server sockets that exist in the process."""
    @abc.abstractmethod
    def GetChannel(
        self,
        request: grpc.channelz.channelz_pb2.GetChannelRequest,
        context: grpc.ServicerContext,
    ) -> grpc.channelz.channelz_pb2.GetChannelResponse:
        """Returns a single Channel, or else a NOT_FOUND code."""
    @abc.abstractmethod
    def GetSubchannel(
        self,
        request: grpc.channelz.channelz_pb2.GetSubchannelRequest,
        context: grpc.ServicerContext,
    ) -> grpc.channelz.channelz_pb2.GetSubchannelResponse:
        """Returns a single Subchannel, or else a NOT_FOUND code."""
    @abc.abstractmethod
    def GetSocket(
        self,
        request: grpc.channelz.channelz_pb2.GetSocketRequest,
        context: grpc.ServicerContext,
    ) -> grpc.channelz.channelz_pb2.GetSocketResponse:
        """Returns a single Socket or else a NOT_FOUND code."""

def add_ChannelzServicer_to_server(servicer: ChannelzServicer, server: grpc.Server) -> None: ...
