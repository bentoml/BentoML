"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import abc
import bentoml.grpc.v1.service_test_pb2
import grpc
import typing

class TestServiceStub:
    """Use for testing interceptors per RPC call."""
    def __init__(self, channel: grpc.Channel) -> None: ...
    Execute: grpc.UnaryUnaryMultiCallable[
        bentoml.grpc.v1.service_test_pb2.TestRequest,
        bentoml.grpc.v1.service_test_pb2.TestResponse]
    """Unary API"""

    ClientStreamExecute: grpc.StreamUnaryMultiCallable[
        bentoml.grpc.v1.service_test_pb2.TestRequest,
        bentoml.grpc.v1.service_test_pb2.TestResponse]
    """Client-streaming API"""

    ServerStreamExecute: grpc.UnaryStreamMultiCallable[
        bentoml.grpc.v1.service_test_pb2.TestRequest,
        bentoml.grpc.v1.service_test_pb2.TestResponse]
    """Server-streaming API"""

    BidiStreamExecute: grpc.StreamStreamMultiCallable[
        bentoml.grpc.v1.service_test_pb2.TestRequest,
        bentoml.grpc.v1.service_test_pb2.TestResponse]
    """Bidirectional streaming API"""


class TestServiceServicer(metaclass=abc.ABCMeta):
    """Use for testing interceptors per RPC call."""
    @abc.abstractmethod
    def Execute(self,
        request: bentoml.grpc.v1.service_test_pb2.TestRequest,
        context: grpc.ServicerContext,
    ) -> bentoml.grpc.v1.service_test_pb2.TestResponse:
        """Unary API"""
        pass

    @abc.abstractmethod
    def ClientStreamExecute(self,
        request_iterator: typing.Iterator[bentoml.grpc.v1.service_test_pb2.TestRequest],
        context: grpc.ServicerContext,
    ) -> bentoml.grpc.v1.service_test_pb2.TestResponse:
        """Client-streaming API"""
        pass

    @abc.abstractmethod
    def ServerStreamExecute(self,
        request: bentoml.grpc.v1.service_test_pb2.TestRequest,
        context: grpc.ServicerContext,
    ) -> typing.Iterator[bentoml.grpc.v1.service_test_pb2.TestResponse]:
        """Server-streaming API"""
        pass

    @abc.abstractmethod
    def BidiStreamExecute(self,
        request_iterator: typing.Iterator[bentoml.grpc.v1.service_test_pb2.TestRequest],
        context: grpc.ServicerContext,
    ) -> typing.Iterator[bentoml.grpc.v1.service_test_pb2.TestResponse]:
        """Bidirectional streaming API"""
        pass


def add_TestServiceServicer_to_server(servicer: TestServiceServicer, server: grpc.Server) -> None: ...
