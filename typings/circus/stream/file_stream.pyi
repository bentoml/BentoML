"""
This type stub file was generated by pyright.
"""

class _FileStreamBase:
    """Base class for all file writer handler classes"""
    now = ...
    fromtimestamp = ...
    def __init__(self, filename, time_format) -> None:
        ...
    
    def open(self): # -> None:
        ...
    
    def close(self): # -> None:
        ...
    
    def write_data(self, data): # -> None:
        ...
    


class FileStream(_FileStreamBase):
    def __init__(self, filename=..., max_bytes=..., backup_count=..., time_format=..., **kwargs) -> None:
        '''
        File writer handler which writes output to a file, allowing rotation
        behaviour based on Python's ``logging.handlers.RotatingFileHandler``.

        By default, the file grows indefinitely. You can specify particular
        values of max_bytes and backup_count to allow the file to rollover at
        a predetermined size.

        Rollover occurs whenever the current log file is nearly max_bytes in
        length. If backup_count is >= 1, the system will successively create
        new files with the same pathname as the base file, but with extensions
        ".1", ".2" etc. appended to it. For example, with a backup_count of 5
        and a base file name of "app.log", you would get "app.log",
        "app.log.1", "app.log.2", ... through to "app.log.5". The file being
        written to is always "app.log" - when it gets filled up, it is closed
        and renamed to "app.log.1", and if files "app.log.1", "app.log.2" etc.
        exist, then they are renamed to "app.log.2", "app.log.3" etc.
        respectively.

        If max_bytes is zero, rollover never occurs.

        You may also configure the timestamp format as defined by
        datetime.strftime.

        Here is an example: ::

          [watcher:foo]
          cmd = python -m myapp.server
          stdout_stream.class = FileStream
          stdout_stream.filename = /var/log/circus/out.log
          stdout_stream.time_format = %Y-%m-%d %H:%M:%S
        '''
        ...
    
    def __call__(self, data): # -> None:
        ...
    


class WatchedFileStream(_FileStreamBase):
    def __init__(self, filename=..., time_format=..., **kwargs) -> None:
        '''
        File writer handler which writes output to a file, allowing an external
        log rotation process to handle rotation, like Python's
        ``logging.handlers.WatchedFileHandler``.

        By default, the file grows indefinitely, and you are responsible for
        ensuring that log rotation happens with some external tool like
        logrotate.

        You may also configure the timestamp format as defined by
        datetime.strftime.

        Here is an example: ::

          [watcher:foo]
          cmd = python -m myapp.server
          stdout_stream.class = WatchedFileStream
          stdout_stream.filename = /var/log/circus/out.log
          stdout_stream.time_format = %Y-%m-%d %H:%M:%S
        '''
        ...
    
    def __call__(self, data): # -> None:
        ...
    


_MIDNIGHT = ...
class TimedRotatingFileStream(FileStream):
    def __init__(self, filename=..., backup_count=..., time_format=..., rotate_when=..., rotate_interval=..., utc=..., **kwargs) -> None:
        '''
        File writer handler which writes output to a file, allowing rotation
        behaviour based on Python's
        ``logging.handlers.TimedRotatingFileHandler``.

        The parameters are the same as ``FileStream`` except max_bytes.

        In addition you can specify extra parameters:

        - utc: if True, times in UTC will be used. otherwise local time is
          used. Default: False.
        - rotate_when: the type of interval. Can be S, M, H, D,
          'W0'-'W6' or 'midnight'. See Python's TimedRotatingFileHandler
          for more information.
        - rotate_interval: Rollover interval in seconds. Default: 1

        Here is an example: ::

          [watcher:foo]
          cmd = python -m myapp.server
          stdout_stream.class = TimedRotatingFileStream
          stdout_stream.filename = /var/log/circus/out.log
          stdout_stream.time_format = %Y-%m-%d %H:%M:%S
          stdout_stream.utc = True
          stdout_stream.rotate_when = H
          stdout_stream.rotate_interval = 1

        '''
        ...
    


