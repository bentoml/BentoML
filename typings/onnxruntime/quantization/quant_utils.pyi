from enum import Enum
from pathlib import Path

__producer__ = ...
__version__ = ...
onnx_domain = ...
ms_domain = ...
type_to_name = ...

class QuantizationMode(Enum):
    IntegerOps = ...
    QLinearOps = ...
    def __str__(self) -> str: ...
    @staticmethod
    def from_string(mode): ...

class QuantizedValueType(Enum):
    Input = ...
    Initializer = ...
    def __str__(self) -> str: ...
    @staticmethod
    def from_string(v): ...

class QuantType(Enum):
    QInt8 = ...
    QUInt8 = ...
    def __str__(self) -> str: ...
    @staticmethod
    def from_string(t): ...

class QuantFormat(Enum):
    QOperator = ...
    QDQ = ...
    def __str__(self) -> str: ...
    @staticmethod
    def from_string(format): ...

ONNX_TYPE_TO_NP_TYPE = ...

def quantize_nparray(qType, arr, scale, zero_point, low=..., high=...): ...
def compute_scale_zp(rmin, rmax, qmin, qmax, symmetric=...): ...
def quantize_data(data, qType, symmetric, reduce_range=...): ...
def get_qmin_qmax_for_qType(qType, reduce_range=...): ...
def get_qrange_for_qType(qType, reduce_range=...): ...

class QuantizedInitializer:
    def __init__(
        self,
        name,
        initializer,
        rmins,
        rmaxs,
        zero_points,
        scales,
        data=...,
        quantized_data=...,
        axis=...,
    ) -> None: ...

class QuantizedValue:
    def __init__(
        self,
        name,
        new_quantized_name,
        scale_name,
        zero_point_name,
        quantized_value_type,
        axis=...,
    ) -> None: ...

class BiasToQuantize:
    def __init__(self, bias_name, input_name, weight_name) -> None: ...

def attribute_to_kwarg(attribute): ...
def find_by_name(item_name, item_list): ...
def get_elem_index(elem_name, elem_list): ...
def get_mul_node(inputs, output, name): ...
def generate_identified_filename(filename: Path, identifier: str) -> Path: ...
def write_calibration_table(calibration_cache): ...
def smooth_distribution(p, eps=...): ...
