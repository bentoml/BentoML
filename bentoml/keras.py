import typing as t

from simple_di import Provide, inject

from ._internal.configuration.containers import BentoMLContainer
from ._internal.models import SAVE_NAMESPACE
from ._internal.runner import Runner
from .exceptions import MissingDependencyException

if t.TYPE_CHECKING:  # pragma: no cover
    # pylint: disable=unused-import
    from _internal.models.store import ModelStore

try:
    ...
except ImportError:  # pragma: no cover
    raise MissingDependencyException("")


@inject
def load(
    tag: str,
    model_store: "ModelStore" = Provide[BentoMLContainer.model_store],
):
    """
    Load a model from BentoML local modelstore with given name.

    Args:
        tag (`str`):
            Tag of a saved model in BentoML local modelstore.
        model_store (`~bentoml._internal.models.store.ModelStore`, default to `BentoMLContainer.model_store`):
            BentoML modelstore, provided by DI Container.

    Returns:
        an instance of `xgboost.core.Booster` from BentoML modelstore.

    Examples::
    """  # noqa


@inject
def save(
    name: str,
    model: t.Any,
    *,
    metadata: t.Union[None, t.Dict[str, t.Any]] = None,
    model_store: "ModelStore" = Provide[BentoMLContainer.model_store],
) -> str:
    """
    Save a model instance to BentoML modelstore.

    Args:
        name (`str`):
            Name for given model instance. This should pass Python identifier check.
        model (`xgboost.core.Booster`):
            Instance of model to be saved
        metadata (`t.Optional[t.Dict[str, t.Any]]`, default to `None`):
            Custom metadata for given model.
        model_store (`~bentoml._internal.models.store.ModelStore`, default to `BentoMLContainer.model_store`):
            BentoML modelstore, provided by DI Container.

    Returns:
        tag (`str` with a format `name:version`) where `name` is the defined name user
        set for their models, and version will be generated by BentoML.

    Examples::
    """  # noqa


class _KerasRunner(Runner):
    @inject
    def __init__(
        self,
        tag: str,
        resource_quota: t.Dict[str, t.Any],
        batch_options: t.Dict[str, t.Any],
        model_store: "ModelStore" = Provide[BentoMLContainer.model_store],
    ):
        super().__init__(tag, resource_quota, batch_options)

    @property
    def required_models(self) -> t.List[str]:
        ...

    @property
    def num_concurrency_per_replica(self) -> int:
        ...

    @property
    def num_replica(self) -> int:
        ...

    # pylint: disable=arguments-differ,attribute-defined-outside-init
    def _setup(self) -> None:
        ...

    # pylint: disable=arguments-differ,attribute-defined-outside-init
    def _run_batch(self, input_data) -> t.Any:
        ...


@inject
def load_runner(
    tag: str,
    *,
    resource_quota: t.Union[None, t.Dict[str, t.Any]] = None,
    batch_options: t.Union[None, t.Dict[str, t.Any]] = None,
    model_store: "ModelStore" = Provide[BentoMLContainer.model_store],
) -> "_KerasRunner":
    """
    Runner represents a unit of serving logic that can be scaled horizontally to
    maximize throughput. `bentoml.xgboost.load_runner` implements a Runner class that
    wrap around a Xgboost booster model, which optimize it for the BentoML runtime.

    Args:
        tag (`str`):
            Model tag to retrieve model from modelstore
        resource_quota (`t.Dict[str, t.Any]`, default to `None`):
            Dictionary to configure resources allocation for runner.
        batch_options (`t.Dict[str, t.Any]`, default to `None`):
            Dictionary to configure batch options for runner in a service context.
        model_store (`~bentoml._internal.models.store.ModelStore`, default to `BentoMLContainer.model_store`):
            BentoML modelstore, provided by DI Container.

    Returns:
        Runner instances for `bentoml.xgboost` model

    Examples::
    """  # noqa
    return _KerasRunner(
        tag=tag,
        resource_quota=resource_quota,
        batch_options=batch_options,
        model_store=model_store,
    )


# import os
# import typing as t
#
# import cloudpickle
#
# import bentoml._internal.constants as _const
#
# from ._internal.models.base import (
#     H5_EXTENSION,
#     HDF5_EXTENSION,
#     JSON_EXTENSION,
#     MODEL_NAMESPACE,
#     PICKLE_EXTENSION,
#     Model,
# )
# from ._internal.types import GenericDictType, PathType
# from ._internal.utils import LazyLoader
#
# _exc = _const.IMPORT_ERROR_MSG.format(
#     fwr="keras",
#     module=__name__,
#     inst="`pip install tensorflow` since BentoML will use Tensorflow as Keras backend.",  # noqa
# )
# if t.TYPE_CHECKING:  # pylint: disable=unused-import # pragma: no cover
#     import tensorflow as tf
#     import tensorflow.keras as tfk
# else:
#     tf = LazyLoader("tf", globals(), "tensorflow", exc_msg=_exc)
#     tfk = LazyLoader("tfk", globals(), "tensorflow.keras", exc_msg=_exc)
#
#
# class KerasModel(Model):
#     """
#     Model class for saving/loading :obj:`keras` models using Tensorflow backend.
#
#     Args:
#         model (`tf.keras.models.Model`):
#             Keras model instance and its subclasses.
#         store_as_json (`bool`, `optional`, default to `False`):
#             Whether to store Keras model as JSON and weights
#         custom_objects (`GenericDictType`, `optional`, default to `None`):
#             Dictionary of Keras custom objects for model
#         metadata (`GenericDictType`,  `optional`, default to `None`):
#             Class metadata
#
#     Raises:
#         MissingDependencyException:
#             :obj:`tensorflow` is required by KerasModel
#         InvalidArgument:
#             model being packed must be instance of :class:`tf.keras.models.Model`
#
#     Example usage under :code:`train.py`::
#
#         TODO:
#
#     One then can define :code:`bento.py`::
#
#         TODO:
#     """
#
#     _graph = tf.compat.v1.get_default_graph()
#     # NOTES: sess should be user facing for V1 compatibility
#     sess = tf.compat.v1.Session(graph=_graph)
#
#     def __init__(
#         self,
#         model: "tfk.models.Model",
#         store_as_json: t.Optional[bool] = False,
#         custom_objects: t.Optional[t.Dict[str, t.Any]] = None,
#         metadata: t.Optional[GenericDictType] = None,
#     ):
#         super(KerasModel, self).__init__(model, metadata=metadata)
#
#         self._store_as_json: t.Optional[bool] = store_as_json
#         self._custom_objects: t.Optional[t.Dict[str, t.Any]] = custom_objects
#
#     @staticmethod
#     def __get_custom_obj_fpath(path: PathType) -> PathType:
#         return os.path.join(path, f"{MODEL_NAMESPACE}_custom_objects{PICKLE_EXTENSION}")
#
#     @staticmethod
#     def __get_model_saved_fpath(path: PathType) -> PathType:
#         return os.path.join(path, f"{MODEL_NAMESPACE}{H5_EXTENSION}")
#
#     @staticmethod
#     def __get_model_weight_fpath(path: PathType) -> PathType:
#         return os.path.join(path, f"{MODEL_NAMESPACE}_weights{HDF5_EXTENSION}")
#
#     @staticmethod
#     def __get_model_json_fpath(path: PathType) -> PathType:
#         return os.path.join(path, f"{MODEL_NAMESPACE}_json{JSON_EXTENSION}")
#
#     @classmethod
#     def load(cls, path: PathType) -> "tfk.models.Model":
#         default_custom_objects = None
#         if os.path.isfile(cls.__get_custom_obj_fpath(path)):
#             with open(cls.__get_custom_obj_fpath(path), "rb") as dco_file:
#                 default_custom_objects = cloudpickle.load(dco_file)
#
#         with cls.sess.as_default():  # pylint: disable=not-context-manager
#             if os.path.isfile(cls.__get_model_json_fpath(path)):
#                 # load keras model via json and weights since json file are in path
#                 with open(cls.__get_model_json_fpath(path), "r") as json_file:
#                     model_json = json_file.read()
#                 obj = tfk.models.model_from_json(
#                     model_json, custom_objects=default_custom_objects
#                 )
#                 obj.load_weights(cls.__get_model_weight_fpath(path))
#             else:
#                 # otherwise, load keras model via standard load_model
#                 obj = tfk.models.load_model(
#                     cls.__get_model_saved_fpath(path),
#                     custom_objects=default_custom_objects,
#                 )
#         if isinstance(obj, dict):
#             model = obj["model"]
#         else:
#             model = obj
#
#         return model
#
#     def save(self, path: PathType) -> None:
#         tf.compat.v1.keras.backend.get_session()
#
#         # save custom_objects for model
#         if self._custom_objects:
#             with open(self.__get_custom_obj_fpath(path), "wb") as custom_object_file:
#                 cloudpickle.dump(self._custom_objects, custom_object_file)
#
#         if self._store_as_json:
#             # save keras model using json and weights if requested
#             with open(self.__get_model_json_fpath(path), "w") as json_file:
#                 json_file.write(self._model.to_json())
#             self._model.save_weights(self.__get_model_weight_fpath(path))
#         else:
#             # otherwise, save standard keras model
#             self._model.save(self.__get_model_saved_fpath(path))
