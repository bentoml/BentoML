import sys
import threading
from . import _base
from .backend.queues import Queue

__author__ = ...
if sys.version_info[0] == 2: ...
MAX_DEPTH = ...
_CURRENT_DEPTH = ...
_MEMORY_LEAK_CHECK_DELAY = ...
_MAX_MEMORY_LEAK_SIZE = ...

class _ThreadWakeup:
    def __init__(self) -> None: ...
    def close(self): ...
    def wakeup(self): ...
    def clear(self): ...

class _ExecutorFlags:
    def __init__(self, shutdown_lock) -> None: ...
    def flag_as_shutting_down(self, kill_workers=...): ...
    def flag_as_broken(self, broken): ...

_threads_wakeups = ...
_global_shutdown = ...
process_pool_executor_at_exit = ...
EXTRA_QUEUED_CALLS = ...

class _RemoteTraceback(Exception):
    def __init__(self, tb=...) -> None: ...
    def __str__(self) -> str: ...

class _ExceptionWithTraceback(BaseException):
    def __init__(self, exc) -> None: ...
    def __reduce__(self): ...

class _WorkItem:
    __slots__ = ...
    def __init__(self, future, fn, args, kwargs) -> None: ...

class _ResultItem:
    def __init__(self, work_id, exception=..., result=...) -> None: ...

class _CallItem:
    def __init__(self, work_id, fn, args, kwargs) -> None: ...
    def __call__(self): ...
    def __repr__(self): ...

class _SafeQueue(Queue):
    def __init__(
        self,
        max_size=...,
        ctx=...,
        pending_work_items=...,
        running_work_items=...,
        thread_wakeup=...,
        reducers=...,
    ) -> None: ...

class _ExecutorManagerThread(threading.Thread):
    def __init__(self, executor) -> None: ...
    def run(self): ...
    def add_call_item_to_queue(self): ...
    def wait_result_broken_or_wakeup(self): ...
    def process_result_item(self, result_item): ...
    def is_shutting_down(self): ...
    def terminate_broken(self, bpe): ...
    def flag_executor_shutting_down(self): ...
    def kill_workers(self, reason=...): ...
    def shutdown_workers(self): ...
    def join_executor_internals(self): ...
    def get_n_children_alive(self): ...

_system_limits_checked = ...
_system_limited = ...

class LokyRecursionError(RuntimeError): ...
class BrokenProcessPool(_BPPException): ...
class TerminatedWorkerError(BrokenProcessPool): ...

BrokenExecutor = BrokenProcessPool

class ShutdownExecutorError(RuntimeError): ...

class ProcessPoolExecutor(_base.Executor):
    _at_exit = ...
    def __init__(
        self,
        max_workers=...,
        job_reducers=...,
        result_reducers=...,
        timeout=...,
        context=...,
        initializer=...,
        initargs=...,
        env=...,
    ) -> None: ...
    def submit(self, fn, *args, **kwargs): ...
    def map(self, fn, *iterables, **kwargs): ...
