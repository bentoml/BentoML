from typing import Dict, Optional, Tuple
import flax
import jaxlib.xla_extension as jax_xla
from .file_utils import ModelOutput

@flax.struct.dataclass
class FlaxBaseModelOutput(ModelOutput):
    last_hidden_state: jax_xla.DeviceArray = ...
    hidden_states: Optional[Tuple[jax_xla.DeviceArray]] = ...
    attentions: Optional[Tuple[jax_xla.DeviceArray]] = ...

@flax.struct.dataclass
class FlaxBaseModelOutputWithPast(ModelOutput):
    last_hidden_state: jax_xla.DeviceArray = ...
    past_key_values: Optional[Dict[str, jax_xla.DeviceArray]] = ...
    hidden_states: Optional[Tuple[jax_xla.DeviceArray]] = ...
    attentions: Optional[Tuple[jax_xla.DeviceArray]] = ...

@flax.struct.dataclass
class FlaxBaseModelOutputWithPooling(ModelOutput):
    last_hidden_state: jax_xla.DeviceArray = ...
    pooler_output: jax_xla.DeviceArray = ...
    hidden_states: Optional[Tuple[jax_xla.DeviceArray]] = ...
    attentions: Optional[Tuple[jax_xla.DeviceArray]] = ...

@flax.struct.dataclass
class FlaxBaseModelOutputWithPastAndCrossAttentions(ModelOutput):
    last_hidden_state: jax_xla.DeviceArray = ...
    past_key_values: Optional[Tuple[Tuple[jax_xla.DeviceArray]]] = ...
    hidden_states: Optional[Tuple[jax_xla.DeviceArray]] = ...
    attentions: Optional[Tuple[jax_xla.DeviceArray]] = ...
    cross_attentions: Optional[Tuple[jax_xla.DeviceArray]] = ...

@flax.struct.dataclass
class FlaxSeq2SeqModelOutput(ModelOutput):
    last_hidden_state: jax_xla.DeviceArray = ...
    past_key_values: Optional[Tuple[Tuple[jax_xla.DeviceArray]]] = ...
    decoder_hidden_states: Optional[Tuple[jax_xla.DeviceArray]] = ...
    decoder_attentions: Optional[Tuple[jax_xla.DeviceArray]] = ...
    cross_attentions: Optional[Tuple[jax_xla.DeviceArray]] = ...
    encoder_last_hidden_state: Optional[jax_xla.DeviceArray] = ...
    encoder_hidden_states: Optional[Tuple[jax_xla.DeviceArray]] = ...
    encoder_attentions: Optional[Tuple[jax_xla.DeviceArray]] = ...

@flax.struct.dataclass
class FlaxCausalLMOutputWithCrossAttentions(ModelOutput):
    logits: jax_xla.DeviceArray = ...
    past_key_values: Optional[Tuple[Tuple[jax_xla.DeviceArray]]] = ...
    hidden_states: Optional[Tuple[jax_xla.DeviceArray]] = ...
    attentions: Optional[Tuple[jax_xla.DeviceArray]] = ...
    cross_attentions: Optional[Tuple[jax_xla.DeviceArray]] = ...

@flax.struct.dataclass
class FlaxMaskedLMOutput(ModelOutput):
    logits: jax_xla.DeviceArray = ...
    hidden_states: Optional[Tuple[jax_xla.DeviceArray]] = ...
    attentions: Optional[Tuple[jax_xla.DeviceArray]] = ...

FlaxCausalLMOutput = FlaxMaskedLMOutput

@flax.struct.dataclass
class FlaxSeq2SeqLMOutput(ModelOutput):
    logits: jax_xla.DeviceArray = ...
    past_key_values: Optional[Tuple[Tuple[jax_xla.DeviceArray]]] = ...
    decoder_hidden_states: Optional[Tuple[jax_xla.DeviceArray]] = ...
    decoder_attentions: Optional[Tuple[jax_xla.DeviceArray]] = ...
    cross_attentions: Optional[Tuple[jax_xla.DeviceArray]] = ...
    encoder_last_hidden_state: Optional[jax_xla.DeviceArray] = ...
    encoder_hidden_states: Optional[Tuple[jax_xla.DeviceArray]] = ...
    encoder_attentions: Optional[Tuple[jax_xla.DeviceArray]] = ...

@flax.struct.dataclass
class FlaxNextSentencePredictorOutput(ModelOutput):
    logits: jax_xla.DeviceArray = ...
    hidden_states: Optional[Tuple[jax_xla.DeviceArray]] = ...
    attentions: Optional[Tuple[jax_xla.DeviceArray]] = ...

@flax.struct.dataclass
class FlaxSequenceClassifierOutput(ModelOutput):
    logits: jax_xla.DeviceArray = ...
    hidden_states: Optional[Tuple[jax_xla.DeviceArray]] = ...
    attentions: Optional[Tuple[jax_xla.DeviceArray]] = ...

@flax.struct.dataclass
class FlaxSeq2SeqSequenceClassifierOutput(ModelOutput):
    logits: jax_xla.DeviceArray = ...
    past_key_values: Optional[Tuple[Tuple[jax_xla.DeviceArray]]] = ...
    decoder_hidden_states: Optional[Tuple[jax_xla.DeviceArray]] = ...
    decoder_attentions: Optional[Tuple[jax_xla.DeviceArray]] = ...
    cross_attentions: Optional[Tuple[jax_xla.DeviceArray]] = ...
    encoder_last_hidden_state: Optional[jax_xla.DeviceArray] = ...
    encoder_hidden_states: Optional[Tuple[jax_xla.DeviceArray]] = ...
    encoder_attentions: Optional[Tuple[jax_xla.DeviceArray]] = ...

@flax.struct.dataclass
class FlaxMultipleChoiceModelOutput(ModelOutput):
    logits: jax_xla.DeviceArray = ...
    hidden_states: Optional[Tuple[jax_xla.DeviceArray]] = ...
    attentions: Optional[Tuple[jax_xla.DeviceArray]] = ...

@flax.struct.dataclass
class FlaxTokenClassifierOutput(ModelOutput):
    logits: jax_xla.DeviceArray = ...
    hidden_states: Optional[Tuple[jax_xla.DeviceArray]] = ...
    attentions: Optional[Tuple[jax_xla.DeviceArray]] = ...

@flax.struct.dataclass
class FlaxQuestionAnsweringModelOutput(ModelOutput):
    start_logits: jax_xla.DeviceArray = ...
    end_logits: jax_xla.DeviceArray = ...
    hidden_states: Optional[Tuple[jax_xla.DeviceArray]] = ...
    attentions: Optional[Tuple[jax_xla.DeviceArray]] = ...

@flax.struct.dataclass
class FlaxSeq2SeqQuestionAnsweringModelOutput(ModelOutput):
    start_logits: jax_xla.DeviceArray = ...
    end_logits: jax_xla.DeviceArray = ...
    past_key_values: Optional[Tuple[Tuple[jax_xla.DeviceArray]]] = ...
    decoder_hidden_states: Optional[Tuple[jax_xla.DeviceArray]] = ...
    decoder_attentions: Optional[Tuple[jax_xla.DeviceArray]] = ...
    cross_attentions: Optional[Tuple[jax_xla.DeviceArray]] = ...
    encoder_last_hidden_state: Optional[jax_xla.DeviceArray] = ...
    encoder_hidden_states: Optional[Tuple[jax_xla.DeviceArray]] = ...
    encoder_attentions: Optional[Tuple[jax_xla.DeviceArray]] = ...
