import sys

__all__ = ["Lock", "RLock", "Semaphore", "BoundedSemaphore", "Condition", "Event"]
if sys.version_info[:2] < (3, 3):
    FileExistsError = OSError
SEM_VALUE_MAX = ...

class SemLock:
    _rand = ...
    def __init__(self, kind, value, maxvalue, name=...) -> None: ...
    def __enter__(self): ...
    def __exit__(self, *args): ...
    def __getstate__(self): ...
    def __setstate__(self, state): ...

class Semaphore(SemLock):
    def __init__(self, value=...) -> None: ...
    def get_value(self): ...
    def __repr__(self): ...

class BoundedSemaphore(Semaphore):
    def __init__(self, value=...) -> None: ...
    def __repr__(self): ...

class Lock(SemLock):
    def __init__(self) -> None: ...
    def __repr__(self): ...

class RLock(SemLock):
    def __init__(self) -> None: ...
    def __repr__(self): ...

class Condition:
    def __init__(self, lock=...) -> None: ...
    def __getstate__(self): ...
    def __setstate__(self, state): ...
    def __enter__(self): ...
    def __exit__(self, *args): ...
    def __repr__(self): ...
    def wait(self, timeout=...): ...
    def notify(self): ...
    def notify_all(self): ...
    def wait_for(self, predicate, timeout=...): ...

class Event:
    def __init__(self) -> None: ...
    def is_set(self): ...
    def set(self): ...
    def clear(self): ...
    def wait(self, timeout=...): ...
