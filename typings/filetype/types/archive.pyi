"""
This type stub file was generated by pyright.
"""

from .base import Type

class Epub(Type):
    """
    Implements the EPUB archive type matcher.
    """
    MIME = ...
    EXTENSION = ...
    def __init__(self) -> None:
        ...
    
    def match(self, buf):
        ...
    


class Zip(Type):
    """
    Implements the Zip archive type matcher.
    """
    MIME = ...
    EXTENSION = ...
    def __init__(self) -> None:
        ...
    
    def match(self, buf): # -> Literal[False]:
        ...
    


class Tar(Type):
    """
    Implements the Tar archive type matcher.
    """
    MIME = ...
    EXTENSION = ...
    def __init__(self) -> None:
        ...
    
    def match(self, buf): # -> Literal[False]:
        ...
    


class Rar(Type):
    """
    Implements the RAR archive type matcher.
    """
    MIME = ...
    EXTENSION = ...
    def __init__(self) -> None:
        ...
    
    def match(self, buf): # -> Literal[False]:
        ...
    


class Gz(Type):
    """
    Implements the GZ archive type matcher.
    """
    MIME = ...
    EXTENSION = ...
    def __init__(self) -> None:
        ...
    
    def match(self, buf): # -> Literal[False]:
        ...
    


class Bz2(Type):
    """
    Implements the BZ2 archive type matcher.
    """
    MIME = ...
    EXTENSION = ...
    def __init__(self) -> None:
        ...
    
    def match(self, buf): # -> Literal[False]:
        ...
    


class SevenZ(Type):
    """
    Implements the SevenZ (7z) archive type matcher.
    """
    MIME = ...
    EXTENSION = ...
    def __init__(self) -> None:
        ...
    
    def match(self, buf): # -> Literal[False]:
        ...
    


class Pdf(Type):
    """
    Implements the PDF archive type matcher.
    """
    MIME = ...
    EXTENSION = ...
    def __init__(self) -> None:
        ...
    
    def match(self, buf): # -> Literal[False]:
        ...
    


class Exe(Type):
    """
    Implements the EXE archive type matcher.
    """
    MIME = ...
    EXTENSION = ...
    def __init__(self) -> None:
        ...
    
    def match(self, buf): # -> Literal[False]:
        ...
    


class Swf(Type):
    """
    Implements the SWF archive type matcher.
    """
    MIME = ...
    EXTENSION = ...
    def __init__(self) -> None:
        ...
    
    def match(self, buf): # -> Literal[False]:
        ...
    


class Rtf(Type):
    """
    Implements the RTF archive type matcher.
    """
    MIME = ...
    EXTENSION = ...
    def __init__(self) -> None:
        ...
    
    def match(self, buf): # -> Literal[False]:
        ...
    


class Nes(Type):
    """
    Implements the NES archive type matcher.
    """
    MIME = ...
    EXTENSION = ...
    def __init__(self) -> None:
        ...
    
    def match(self, buf): # -> Literal[False]:
        ...
    


class Crx(Type):
    """
    Implements the CRX archive type matcher.
    """
    MIME = ...
    EXTENSION = ...
    def __init__(self) -> None:
        ...
    
    def match(self, buf): # -> Literal[False]:
        ...
    


class Cab(Type):
    """
    Implements the CAB archive type matcher.
    """
    MIME = ...
    EXTENSION = ...
    def __init__(self) -> None:
        ...
    
    def match(self, buf): # -> Literal[False]:
        ...
    


class Eot(Type):
    """
    Implements the EOT archive type matcher.
    """
    MIME = ...
    EXTENSION = ...
    def __init__(self) -> None:
        ...
    
    def match(self, buf): # -> Literal[False]:
        ...
    


class Ps(Type):
    """
    Implements the PS archive type matcher.
    """
    MIME = ...
    EXTENSION = ...
    def __init__(self) -> None:
        ...
    
    def match(self, buf): # -> Literal[False]:
        ...
    


class Xz(Type):
    """
    Implements the XS archive type matcher.
    """
    MIME = ...
    EXTENSION = ...
    def __init__(self) -> None:
        ...
    
    def match(self, buf): # -> Literal[False]:
        ...
    


class Sqlite(Type):
    """
    Implements the Sqlite DB archive type matcher.
    """
    MIME = ...
    EXTENSION = ...
    def __init__(self) -> None:
        ...
    
    def match(self, buf): # -> Literal[False]:
        ...
    


class Deb(Type):
    """
    Implements the DEB archive type matcher.
    """
    MIME = ...
    EXTENSION = ...
    def __init__(self) -> None:
        ...
    
    def match(self, buf): # -> Literal[False]:
        ...
    


class Ar(Type):
    """
    Implements the AR archive type matcher.
    """
    MIME = ...
    EXTENSION = ...
    def __init__(self) -> None:
        ...
    
    def match(self, buf): # -> Literal[False]:
        ...
    


class Z(Type):
    """
    Implements the Z archive type matcher.
    """
    MIME = ...
    EXTENSION = ...
    def __init__(self) -> None:
        ...
    
    def match(self, buf): # -> Literal[False]:
        ...
    


class Lzop(Type):
    """
    Implements the Lzop archive type matcher.
    """
    MIME = ...
    EXTENSION = ...
    def __init__(self) -> None:
        ...
    
    def match(self, buf): # -> Literal[False]:
        ...
    


class Lz(Type):
    """
    Implements the Lz archive type matcher.
    """
    MIME = ...
    EXTENSION = ...
    def __init__(self) -> None:
        ...
    
    def match(self, buf): # -> Literal[False]:
        ...
    


class Elf(Type):
    """
    Implements the Elf archive type matcher
    """
    MIME = ...
    EXTENSION = ...
    def __init__(self) -> None:
        ...
    
    def match(self, buf): # -> Literal[False]:
        ...
    


class Lz4(Type):
    """
    Implements the Lz4 archive type matcher.
    """
    MIME = ...
    EXTENSION = ...
    def __init__(self) -> None:
        ...
    
    def match(self, buf): # -> Literal[False]:
        ...
    


class Br(Type):
    """Implements the Br image type matcher."""
    MIME = ...
    EXTENSION = ...
    def __init__(self) -> None:
        ...
    
    def match(self, buf):
        ...
    


class Dcm(Type):
    """Implements the Dcm image type matcher."""
    MIME = ...
    EXTENSION = ...
    def __init__(self) -> None:
        ...
    
    def match(self, buf):
        ...
    


class Rpm(Type):
    """Implements the Rpm image type matcher."""
    MIME = ...
    EXTENSION = ...
    def __init__(self) -> None:
        ...
    
    def match(self, buf):
        ...
    


class Zstd(Type):
    """
    Implements the Zstd archive type matcher.
    https://github.com/facebook/zstd/blob/dev/doc/zstd_compression_format.md
    """
    MIME = ...
    EXTENSION = ...
    MAGIC_SKIPPABLE_START = ...
    MAGIC_SKIPPABLE_MASK = ...
    def __init__(self) -> None:
        ...
    
    def match(self, buf): # -> bool:
        ...
    


