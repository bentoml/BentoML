# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import tests.yatai.proto.mock_service_pb2 as mock__service__pb2


class MockServiceStub(object):
    """A Simple MockService to test interceptors for each RPC calls
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Execute = channel.unary_unary(
            '/bentoml.MockService/Execute',
            request_serializer=mock__service__pb2.MockRequest.SerializeToString,
            response_deserializer=mock__service__pb2.MockResponse.FromString,
        )
        self.ExecuteClientStream = channel.stream_unary(
            '/bentoml.MockService/ExecuteClientStream',
            request_serializer=mock__service__pb2.MockRequest.SerializeToString,
            response_deserializer=mock__service__pb2.MockResponse.FromString,
        )
        self.ExecuteServerStream = channel.unary_stream(
            '/bentoml.MockService/ExecuteServerStream',
            request_serializer=mock__service__pb2.MockRequest.SerializeToString,
            response_deserializer=mock__service__pb2.MockResponse.FromString,
        )
        self.ExecuteClientServerStream = channel.stream_stream(
            '/bentoml.MockService/ExecuteClientServerStream',
            request_serializer=mock__service__pb2.MockRequest.SerializeToString,
            response_deserializer=mock__service__pb2.MockResponse.FromString,
        )


class MockServiceServicer(object):
    """A Simple MockService to test interceptors for each RPC calls
    """

    def Execute(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ExecuteClientStream(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ExecuteServerStream(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ExecuteClientServerStream(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MockServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
        'Execute': grpc.unary_unary_rpc_method_handler(
            servicer.Execute,
            request_deserializer=mock__service__pb2.MockRequest.FromString,
            response_serializer=mock__service__pb2.MockResponse.SerializeToString,
        ),
        'ExecuteClientStream': grpc.stream_unary_rpc_method_handler(
            servicer.ExecuteClientStream,
            request_deserializer=mock__service__pb2.MockRequest.FromString,
            response_serializer=mock__service__pb2.MockResponse.SerializeToString,
        ),
        'ExecuteServerStream': grpc.unary_stream_rpc_method_handler(
            servicer.ExecuteServerStream,
            request_deserializer=mock__service__pb2.MockRequest.FromString,
            response_serializer=mock__service__pb2.MockResponse.SerializeToString,
        ),
        'ExecuteClientServerStream': grpc.stream_stream_rpc_method_handler(
            servicer.ExecuteClientServerStream,
            request_deserializer=mock__service__pb2.MockRequest.FromString,
            response_serializer=mock__service__pb2.MockResponse.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        'bentoml.MockService', rpc_method_handlers
    )
    server.add_generic_rpc_handlers((generic_handler,))


# This class is part of an EXPERIMENTAL API.
class MockService(object):
    """A Simple MockService to test interceptors for each RPC calls
    """

    @staticmethod
    def Execute(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/bentoml.MockService/Execute',
            mock__service__pb2.MockRequest.SerializeToString,
            mock__service__pb2.MockResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def ExecuteClientStream(
        request_iterator,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.stream_unary(
            request_iterator,
            target,
            '/bentoml.MockService/ExecuteClientStream',
            mock__service__pb2.MockRequest.SerializeToString,
            mock__service__pb2.MockResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def ExecuteServerStream(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/bentoml.MockService/ExecuteServerStream',
            mock__service__pb2.MockRequest.SerializeToString,
            mock__service__pb2.MockResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def ExecuteClientServerStream(
        request_iterator,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.stream_stream(
            request_iterator,
            target,
            '/bentoml.MockService/ExecuteClientServerStream',
            mock__service__pb2.MockRequest.SerializeToString,
            mock__service__pb2.MockResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )
