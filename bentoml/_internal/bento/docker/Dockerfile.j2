{{ header }}
{% set cached = ['arm32v5', 'arm32v6'] %}
ARG XX_VERSION=master

FROM --platform=$BUILDPLATFORM tonistiigi/xx:${XX_VERSION} AS xx

{% if user_defined_image != true %}
FROM {{ base_image }} as cached

FROM {{ base_image }} as base

{% if docker_options.cuda_version is not none %}
{% include "cuda.j2" %}
{% if 'x86_64' in cuda_spec %}
{% do cached.append("amd64") %}
{% endif %}
{% if 'sbsa' in cuda_spec %}
{% do cached.append("arm64") %}
{% endif %}
{% if 'ppc64le' in cuda_spec %}
{% do cached.append("ppc64le") %}
{% endif %}
{% endif %}

{% if docker_options.cuda_version is none %}
{% for key in distro_spec.supported_architecture if key not in cached %}
{% if 'arm64' in key %}
FROM base as base-arm64
{% elif 'arm' in key %}
FROM base as base-arm
{% elif 'i386' in key %}
FROM base as base-386
{% elif 's390x' in key %}
FROM base as base-s390x
{% else %}
FROM base as base-{{ key }}
{% endif %}
{% endfor %}
{% endif %}

FROM base-${TARGETARCH}
{% else %}
# custom base image: {{ base_image }}
# Make sure to have Python and requires dependencies install on this image.
FROM {{ base_image }} as cached

FROM {{ base_image }}
{% endif %}

{{ base_env }}

{% if docker_options.cuda_version is not none and user_defined_image != true %}
# Required for nvidia-docker v1
RUN echo "/usr/local/nvidia/lib" >> /etc/ld.so.conf.d/nvidia.conf \
    && echo "/usr/local/nvidia/lib64" >> /etc/ld.so.conf.d/nvidia.conf

ENV PATH /usr/local/nvidia/bin:/usr/local/cuda/bin:${PATH}
ENV LD_LIBRARY_PATH /usr/local/nvidia/lib:/usr/local/nvidia/lib64

# nvidia-container-runtime
# CUDA_VISIBLE_DEIVCES is also exposed via NVIDIA_VISIBLE_DEVICES
ENV NVIDIA_VISIBLE_DEVICES all
ENV NVIDIA_DRIVER_CAPABILITIES compute,utility

{{ setup_cuda }}

{# x86_64 can just be used to defined most requirements #}
{% if "libnpp" in cuda_spec.x86_64 %}
{% set has_libnpp_package = true %}
{% endif %}
{% if "libcusparse" in cuda_spec.x86_64 %}
{% set has_libcusparse_package = true %}
{% endif %}
{% if "libnccl2" in cuda_spec.x86_64 %}
{% set has_libnccl_package = true %}
{% endif %}
{% if "cudnn" in cuda_spec.x86_64 %}
{% set has_cudnn_package = true %}
{% endif %}
# Install CUDA runtime
{% if docker_options.distro in ['ubi8', 'amazonlinux'] %}
RUN echo "Hello"
{% else %}
RUN xx-apt-get install -y --no-install-recommends \
    ${NVIDIA_LIBRARIES_PACKAGE} \
    {% if has_libnpp_package %}
    ${NVIDIA_LIBNPP_PACKAGE} \
    {% endif %}
    ${NVIDIA_NVTX_PACKAGE} \
    {# cuda-nvtx-{{ cuda_spec.version.major }}-{{ cuda_spec.version.minor }}=${NVIDIA_NVTX_VERSION} \ #}
    ${NVIDIA_CUSPARSE_PACKAGE} \
    {# {% if cuda_spec.version.major == "10" %}
    cuda-cusparse-{{ cuda_spec.version.major }}-{{ cuda_spec.version.minor }}=${NVIDIA_LIBCUSPARSE_VERSION} \
    {% else %}
    libcusparse-{{ cuda_spec.version.major }}-{{ cuda_spec.version.minor }}=${NVIDIA_LIBCUSPARSE_VERSION} \
    {% endif %} #}
    ${NVIDIA_LIBCUBLAS_PACKAGE} \
    {% if has_cudnn_package %}
    ${NVIDIA_CUDNN_PACKAGE} \
    {% endif %}
    {% if has_libnccl_package %}
    ${NVIDIA_LIBNCCL_PACKAGE} \
    {% endif %}
    && xx-apt-get clean \
    && rm -rf /var/lib/apt/lists/*

# Keep apt from auto upgrading the cublas and nccl packages. See https://gitlab.com/nvidia/container-images/cuda/-/issues/88
RUN apt-mark hold ${NVIDIA_CUDNN_PACKAGE_NAME} ${NVIDIA_LIBCUBLAS_PACKAGE_NAME}{% if has_libnccl_package %} ${NVIDIA_LIBNCCL_PACKAGE_NAME}{% endif %}

{% endif %}
{% endif %}

{{ setup_distro_env }}
{% if docker_options.env is not none %}
{% for key, value in docker_options.env.items() -%}

ENV {{ key }}={{ value }}
{% endfor -%}
{% endif -%}
{% if docker_options.system_packages is not none %}

# Install user-defined system package
RUN --mount=type=cache,from=cached,target=/var/cache/apk xx-apk add --update {{ docker_options.system_packages|join(" ") }}
{% endif -%}
# Setup UID/GID
{{ setup_uid_gid }}
# Setup bento env
{{ setup_bento_env }}
{% if "conda" in docker_options.distro %}
{{ install_python_with_conda }}
{% endif %}
# Install bentoml
ENV BENTOML_VERSION={{ bentoml_version }}
RUN --mount=type=cache,mode=0777,target=/root/.cache/pip \
    pip install bentoml==${BENTOML_VERSION} --no-cache-dir
{{ setup_python_package }}
{{ cleanup }}
{{ setup_entrypoint }}
