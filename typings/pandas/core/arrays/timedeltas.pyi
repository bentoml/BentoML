from typing import TYPE_CHECKING
import numpy as np
from pandas import DataFrame
from pandas._libs.tslibs import Tick
from pandas._typing import NpDtype
from pandas.core.arrays import datetimelike as dtl
from pandas.core.ops.common import unpack_zerodim_and_defer

if TYPE_CHECKING: ...

class TimedeltaArray(dtl.TimelikeOps):
    _typ = ...
    _scalar_type = ...
    _recognized_scalars = ...
    _is_recognized_dtype = ...
    _infer_matches = ...
    __array_priority__ = ...
    _other_ops: list[str] = ...
    _bool_ops: list[str] = ...
    _object_ops: list[str] = ...
    _field_ops: list[str] = ...
    _datetimelike_ops: list[str] = ...
    _datetimelike_methods: list[str] = ...
    @property
    def dtype(self) -> np.dtype: ...
    _freq = ...
    def __init__(self, values, dtype=..., freq=..., copy: bool = ...) -> None: ...
    def astype(self, dtype, copy: bool = ...): ...
    def __iter__(self): ...
    def sum(
        self,
        *,
        axis: int | None = ...,
        dtype: NpDtype | None = ...,
        out=...,
        keepdims: bool = ...,
        initial=...,
        skipna: bool = ...,
        min_count: int = ...
    ): ...
    def std(
        self,
        *,
        axis: int | None = ...,
        dtype: NpDtype | None = ...,
        out=...,
        ddof: int = ...,
        keepdims: bool = ...,
        skipna: bool = ...
    ): ...
    @unpack_zerodim_and_defer("__mul__")
    def __mul__(self, other) -> TimedeltaArray: ...
    __rmul__ = ...
    @unpack_zerodim_and_defer("__truediv__")
    def __truediv__(self, other): ...
    @unpack_zerodim_and_defer("__rtruediv__")
    def __rtruediv__(self, other): ...
    @unpack_zerodim_and_defer("__floordiv__")
    def __floordiv__(self, other): ...
    @unpack_zerodim_and_defer("__rfloordiv__")
    def __rfloordiv__(self, other): ...
    @unpack_zerodim_and_defer("__mod__")
    def __mod__(self, other): ...
    @unpack_zerodim_and_defer("__rmod__")
    def __rmod__(self, other): ...
    @unpack_zerodim_and_defer("__divmod__")
    def __divmod__(self, other): ...
    @unpack_zerodim_and_defer("__rdivmod__")
    def __rdivmod__(self, other): ...
    def __neg__(self) -> TimedeltaArray: ...
    def __pos__(self) -> TimedeltaArray: ...
    def __abs__(self) -> TimedeltaArray: ...
    def total_seconds(self) -> np.ndarray: ...
    def to_pytimedelta(self) -> np.ndarray: ...
    days = ...
    seconds = ...
    microseconds = ...
    nanoseconds = ...
    @property
    def components(self) -> DataFrame: ...

def sequence_to_td64ns(
    data, copy: bool = ..., unit=..., errors=...
) -> tuple[np.ndarray, Tick | None]: ...
def ints_to_td64ns(data, unit=...): ...
def objects_to_td64ns(data, unit=..., errors=...): ...
