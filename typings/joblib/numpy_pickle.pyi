import os
from io import BufferedReader, BytesIO
from pathlib import Path
from typing import Any, ByteString, Dict, Literal, NoReturn, Optional, Tuple, Union
import numpy as np
from .numpy_pickle_utils import Pickler, Unpickler

class NumpyArrayWrapper:
    def __init__(
        self,
        subclass: "np.ndarray[Any, np.dtype[Any]]",
        shape: "Tuple[int, ...]",
        order: Literal["C", "F"],
        dtype: "np.dtype[Any]",
        allow_mmap: bool = ...,
    ) -> None: ...
    def write_array(self, array: ByteString, pickler: Pickler) -> None: ...
    def read_array(self, unpickler: Unpickler) -> Any: ...
    def read_mmap(self, unpickler: "NumpyUnpickler") -> NoReturn: ...
    def read(self, unpickler: "NumpyUnpickler") -> "np.ndarray[Any, np.dtype[Any]]": ...

class NumpyPickler(Pickler):
    dispatch: Dict[str, Any] = ...
    def __init__(self, fp: BytesIO, protocol: Optional[int] = ...) -> None: ...
    def save(self, obj) -> None: ...

class NumpyUnpickler(Unpickler):
    dispatch: Dict[str, Any] = ...
    def __init__(
        self, filename: str, file_handle: BytesIO, mmap_mode: str = ...
    ) -> None: ...
    def load_build(self) -> None: ...

def dump(
    value: Any,
    filename: Union[str, os.PathLike[str], Path, BytesIO, BufferedReader],
    compress: Union[bool, Tuple[int, int], int] = ...,
    protocol: int = ...,
    cache_size: int = ...,
) -> None: ...
def load_temporary_memmap(
    filename: Union[str, os.PathLike[str], Path, BytesIO, BufferedReader],
    mmap_mode: Optional[Literal["r+", "r", "w+", "c"]],
    unlink_on_gc_collect: Any,
) -> Any: ...
def load(
    filename: Union[str, os.PathLike[str], Path, BytesIO, BufferedReader],
    mmap_mode: Optional[Literal["r+", "r", "w+", "c"]] = ...,
) -> Any: ...
