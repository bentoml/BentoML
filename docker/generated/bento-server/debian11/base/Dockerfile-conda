# syntax = docker/dockerfile:1.3-labs
#
# ===========================================
#
# THIS IS A GENERATED DOCKERFILE. DO NOT EDIT
#
# ===========================================

ARG XX_VERSION=1.1.0

FROM --platform=$BUILDPLATFORM tonistiigi/xx:${XX_VERSION} AS xx

FROM debian:11-slim as stage_cached

FROM --platform=$BUILDPLATFORM debian:11-slim as mamba

COPY --from=xx / /

ARG TARGETARCH

# Leave these args here to better use the Docker build cache
ARG MAMBA_VERSION=0.22.0

RUN xx-apt-get update \
    && xx-apt-get install -q -y --no-install-recommends --allow-remove-essential \
        ca-certificates bash curl bzip2 \
    && xx-apt-get clean \
    && rm -rf /var/lib/{apt,dpkg,cache,log}

WORKDIR /tmp

RUN <<"EOT"
ARCH=$(xx-info debian-arch)
echo "${ARCH}"
if [ "${ARCH}" = "amd64" ]; then
    MAMBA_URL_SUFFIX="64"
elif [ "${ARCH}" = "ppc64el" ]; then
    MAMBA_URL_SUFFIX="ppc64le"
elif [ "${ARCH}" = "arm64" ]; then
    MAMBA_URL_SUFFIX="aarch64"
else
    echo "${ARCH} is not yet supported by micromamba"
    exit 1
fi
curl -sLo /tmp/micromamba-${MAMBA_VERSION}.tar.bz2 "https://micromamba.snakepit.net/api/micromamba/linux-${MAMBA_URL_SUFFIX}/${MAMBA_VERSION}"
tar -xf /tmp/micromamba-${MAMBA_VERSION}.tar.bz2 -C "/tmp" "bin/micromamba"
EOT

FROM debian:11-slim as base

FROM base as base-amd64

FROM base as base-arm64

FROM base as base-ppc64le

FROM base-${TARGETARCH}

ARG TARGETARCH

COPY --from=xx / /

RUN rm -f /etc/apt/apt.conf.d/docker-clean; echo 'Binary::apt::APT::Keep-Downloaded-Packages "true";' > /etc/apt/apt.conf.d/keep-cache
RUN --mount=type=cache,from=stage_cached,sharing=shared,target=/var/cache/apt \
    --mount=type=cache,from=stage_cached,sharing=shared,target=/var/lib/apt \
    xx-apt-get install -y -q --no-install-recommends bash build-essential python3-dev \
    && xx-apt-get clean \
    && rm -rf /var/lib/apt/lists/*

ENV DEBIAN_FRONTEND noninteractive
ARG PYTHON_VERSION

ENV LANG=C.UTF-8

ENV LC_ALL=C.UTF-8

ENV PYTHONDONTWRITEBYTECODE=1

# ported from mamba-org/micromamba-docker
ENV MAMBA_ROOT_PREFIX="/opt/conda"
ENV MAMBA_BIN="/bin/micromamba"
ENV MAMBA_ENV="base"

ENV PATH="${MAMBA_ROOT_PREFIX}/bin:/usr/local/bin:$PATH"

COPY --from=mamba /etc/ssl/certs/ca-certificates.crt /etc/ssl/certs/ca-certificates.crt
COPY --from=mamba /tmp/bin/micromamba /bin/micromamba

RUN bash <<"EOT"
echo "source /usr/local/bin/activate_conda" >> ~/.bashrc
echo "source /usr/local/bin/activate_conda" >> /etc/skel/.bashrc
mkdir -p "${MAMBA_ROOT_PREFIX}/conda-meta"
EOT

COPY hack/shells/activate_conda /usr/local/bin/activate_conda
COPY hack/shells/run_conda_in_docker /usr/local/bin/run_conda_in_docker

CMD ["/bin/bash"]

SHELL [ "/usr/local/bin/run_conda_in_docker" ]

RUN "${MAMBA_BIN}" install -y -n base -c conda-forge \
    python=${PYTHON_VERSION} pip \
    && micromamba clean --all --yes