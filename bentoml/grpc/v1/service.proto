syntax = "proto3";

package bentoml.grpc.v1;

// cc_enable_arenas pre-allocate memory for given message to improve speed. (C++ only)
option cc_enable_arenas = true;
option cc_generic_services = false;
option go_package = "github.com/bentoml/grpc/v1";
option java_multiple_files = true;
option java_outer_classname = "ServiceProto";
option java_package = "com.bentoml.grpc.v1";
option objc_class_prefix = "SVC";
option py_generic_services = true;

// a gRPC BentoServer.
service BentoService {
  // Infer handles unary API.
  rpc Call(Request) returns (Response) {}
}

// Request for Call.
message Request {
  // a given API route the rpc request is sent to.
  string api_name = 1;

  Value input = 2;
}

// Response from Call.
message Response {
  // representation of the output value.
  Value output = 1;
}

// Represents an n-dimensional array.
message MultiDimensionalArray {
  // The shape of the array.
  repeated int32 shape = 1;
  // The flattened contents of the nd array.
  optional Array array = 2;
}

// This represents a 1-d array.
message Array {
  repeated bool bool_values = 5 [packed = true];
  repeated float float_values = 1 [packed = true];
  repeated string string_values = 4;
  repeated double double_values = 2 [packed = true];
  repeated int32 int_values = 3 [packed = true];
  repeated int64 long_values = 6 [packed = true];
  repeated uint32 uint32_values = 7 [packed = true];
  repeated uint64 uint64_values = 8 [packed = true];

  // TODO: supports the following:
  // - arbitrary structs
  // - single/double precision complex value type.
  // - quantized value type
  //
  // repeated google.protobuf.Struct struct_contents = 10;

  reserved 10 to 15;
}

// Represents raw bytes types.
message Raw {
  // type of file, let it be csv, text ,parquet, tensor type, etc.
  optional string kind = 1;
  map<string, string> metadata = 2;
  // contents of file as bytes.
  bytes content = 3;
}

// Represents a map value.
// This can be used for PandasDataFrame IO Descriptor.
message MapValue {
  map<string, Value> fields = 1;
}

// Representing contents of a given rpc call.
message Value {
  oneof kind {
    // Text()
    string string_value = 1;
    // File(), Image(), raw byte forms of ndarray, dataframe
    Raw raw_value = 2;
    // NDArray(), etc.
    Array array_value = 3;
    // NDArray(), DataFrame(), etc.
    MultiDimensionalArray multi_dimensional_array_value = 4;
    // DataFrame()
    MapValue map_value = 5;
  }

  // We want to reserve these for future uses.
  reserved 56 to 100;
}
