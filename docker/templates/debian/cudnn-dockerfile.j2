{{ metadata.header }}

ARG PYTHON_VERSION

{% set cached = ['arm32v5', 'arm32v6'] %}

FROM {{ metadata.package }}:{{ build_tag }} as baseline

ARG TARGETPLATFORM

ARG TARGETARCH

RUN xx-apt-get update && xx-apt-get install -y --no-install-recommends \
    gnupg2 curl ca-certificates && \
    curl -fsSL {{ cuda.cuda_repo_url }}/${NVARCH}/7fa2af80.pub | apt-key add - && \
    echo "deb {{ cuda.cuda_repo_url }}/${NVARCH} /" > /etc/apt/sources.list.d/cuda.list && \
    if [ ! -z ${NVIDIA_ML_REPO_ENABLED} ]; then echo "deb ${NVIDIA_ML_REPO_URL} /" > /etc/apt/sources.list.d/nvidia-ml.list; fi && \
    xx-apt-get purge --autoremove -y curl \
    && rm -rf /var/lib/apt/lists/*

ENV CUDA_VERSION {{ cuda.version.full }}

# For libraries in the cuda-compat-* package: https://docs.nvidia.com/cuda/eula/index.html#attachment-a
RUN xx-apt-get update && xx-apt-get install -y --no-install-recommends \
    cuda-cudart-{{ cuda.version.major }}-{{ cuda.version.minor }}=${NVIDIA_CUDA_CUDART_VERSION} \
    ${NVIDIA_CUDA_COMPAT_PACKAGE} \
    && ln -s cuda-{{ cuda.version.major }}.{{ cuda.version.minor }} /usr/local/cuda && \
    rm -rf /var/lib/apt/lists/*

# Required for nvidia-docker v1
RUN echo "/usr/local/nvidia/lib" >> /etc/ld.so.conf.d/nvidia.conf \
    && echo "/usr/local/nvidia/lib64" >> /etc/ld.so.conf.d/nvidia.conf

ENV PATH /usr/local/nvidia/bin:/usr/local/cuda/bin:${PATH}
ENV LD_LIBRARY_PATH /usr/local/nvidia/lib:/usr/local/nvidia/lib64

COPY NGC-DL-CONTAINER-LICENSE /

# nvidia-container-runtime
ENV NVIDIA_VISIBLE_DEVICES all
ENV NVIDIA_DRIVER_CAPABILITIES compute,utility

FROM baseline as base

ENV NVIDIA_CUDA_LIB_VERSION {{ cuda.version.full + "-1" }}

{% if "amd64" in cuda %}
{% do cached.append("amd64") %}
FROM base as base-amd64

ENV NVIDIA_NVTX_VERSION {{ cuda.amd64.components.nvtx.version }}
    {% if "libnpp" in cuda.amd64.components %}
        {% set has_libnpp_package = true %}
ENV NVIDIA_LIBNPP_VERSION {{ cuda.amd64.components.libnpp.version }}
ENV NVIDIA_LIBNPP_PACKAGE libnpp-{{ cuda.version.major }}-{{ cuda.version.minor }}=${NVIDIA_LIBNPP_VERSION}
    {% endif %}

ENV NVIDIA_LIBCUSPARSE_VERSION {{ cuda.amd64.components.libcusparse.version }}

ENV NVIDIA_LIBCUBLAS_PACKAGE_NAME libcublas-{{ cuda.version.major }}-{{ cuda.version.minor }}
ENV NVIDIA_LIBCUBLAS_VERSION {{ cuda.amd64.components.libcublas.version }}
ENV NVIDIA_LIBCUBLAS_PACKAGE ${NVIDIA_LIBCUBLAS_PACKAGE_NAME}=${NVIDIA_LIBCUBLAS_VERSION}

    {% if "libnccl2" in cuda.amd64.components and cuda.amd64.components.libnccl2 %}
        {% set has_libnccl_package = true %}
ENV NVIDIA_LIBNCCL_PACKAGE_NAME libnccl2
ENV NVIDIA_LIBNCCL_PACKAGE_VERSION {{ cuda.amd64.components.libnccl2_dev.version }}
ENV NCCL_VERSION {{ cuda.amd64.components.libnccl2_dev.version }}
ENV NVIDIA_LIBNCCL_PACKAGE ${NVIDIA_LIBNCCL_PACKAGE_NAME}=${NVIDIA_LIBNCCL_PACKAGE_VERSION}+cuda{{ cuda.version.major }}.{{ cuda.version.minor }}
    {% endif -%}

{% set cudnn_version = cuda.amd64.cudnn.version %}
{% if "-" in cuda.amd64.cudnn.version %}
    {% set cudnn_version = cuda.amd64.cudnn.version[:-2] %}
{% endif -%}
ENV NVIDIA_CUDNN_VERSION {{ cudnn_version }}

ENV NVIDIA_CUDNN_PACKAGE "libcudnn{{ cuda.amd64.cudnn.major_version }}=$NVIDIA_CUDNN_VERSION-1+cuda{{ cuda.version.major }}.{{ cuda.version.minor }}"
ENV NVIDIA_CUDNN_PACKAGE_NAME "libcudnn{{ cuda.amd64.cudnn.major_version }}"

{% endif %}

{% if "arm64v8" in cuda %}
{% do cached.append("arm64v8") %}
FROM base as base-arm64

ENV NVIDIA_NVTX_VERSION {{ cuda.arm64v8.components.nvtx.version }}
    {% if "libnpp" in cuda.arm64v8.components %}
        {% set has_libnpp_package = true %}
ENV NVIDIA_LIBNPP_VERSION {{ cuda.arm64v8.components.libnpp.version }}
ENV NVIDIA_LIBNPP_PACKAGE libnpp-{{ cuda.version.major }}-{{ cuda.version.minor }}=${NVIDIA_LIBNPP_VERSION}
    {% endif %}

ENV NVIDIA_LIBCUSPARSE_VERSION {{ cuda.arm64v8.components.libcusparse.version }}

ENV NVIDIA_LIBCUBLAS_PACKAGE_NAME libcublas-{{ cuda.version.major }}-{{ cuda.version.minor }}
ENV NVIDIA_LIBCUBLAS_VERSION {{ cuda.arm64v8.components.libcublas.version }}
ENV NVIDIA_LIBCUBLAS_PACKAGE ${NVIDIA_LIBCUBLAS_PACKAGE_NAME}=${NVIDIA_LIBCUBLAS_VERSION}

    {% if "libnccl2" in cuda.arm64v8.components and cuda.arm64v8.components.libnccl2 %}
        {% set has_libnccl_package = true %}
ENV NVIDIA_LIBNCCL_PACKAGE_NAME libnccl2
ENV NVIDIA_LIBNCCL_PACKAGE_VERSION {{ cuda.arm64v8.components.libnccl2_dev.version }}
ENV NCCL_VERSION {{ cuda.arm64v8.components.libnccl2_dev.version }}
ENV NVIDIA_LIBNCCL_PACKAGE ${NVIDIA_LIBNCCL_PACKAGE_NAME}=${NVIDIA_LIBNCCL_PACKAGE_VERSION}+cuda{{ cuda.version.major }}.{{ cuda.version.minor }}
    {% endif %}

    {% set cudnn_version = cuda.arm64v8.cudnn.version %}
    {% if "-" in cuda.arm64v8.cudnn.version %}
        {% set cudnn_version = cuda.arm64v8.cudnn.version[:-2] %}
    {% endif -%}

ENV NVIDIA_CUDNN_VERSION {{ cudnn_version }}

ENV NVIDIA_CUDNN_PACKAGE "libcudnn{{ cuda.arm64v8.cudnn.major_version }}=$NVIDIA_CUDNN_VERSION-1+cuda{{ cuda.version.major }}.{{ cuda.version.minor }}"
ENV NVIDIA_CUDNN_PACKAGE_NAME "libcudnn{{ cuda.arm64v8.cudnn.major_version }}"

{% endif -%}

{% if "ppc64le" in cuda %}
{% do cached.append("ppc64le") %}
FROM base as base-ppc64le

ENV NVIDIA_NVTX_VERSION {{ cuda.ppc64le.components.nvtx.version }}
    {% if "libnpp" in cuda.ppc64le.components %}
        {% set has_libnpp_package = true %}
ENV NVIDIA_LIBNPP_VERSION {{ cuda.ppc64le.components.libnpp.version }}
ENV NVIDIA_LIBNPP_PACKAGE libnpp-{{ cuda.version.major }}-{{ cuda.version.minor }}=${NVIDIA_LIBNPP_VERSION}
    {% endif %}
ENV NVIDIA_LIBCUSPARSE_VERSION {{ cuda.ppc64le.components.libcusparse.version }}

ENV NVIDIA_LIBCUBLAS_PACKAGE_NAME libcublas-{{ cuda.version.major }}-{{ cuda.version.minor }}
ENV NVIDIA_LIBCUBLAS_VERSION {{ cuda.ppc64le.components.libcublas.version }}
ENV NVIDIA_LIBCUBLAS_PACKAGE ${NVIDIA_LIBCUBLAS_PACKAGE_NAME}=${NVIDIA_LIBCUBLAS_VERSION}

    {% if "libnccl2" in cuda.ppc64le.components and cuda.ppc64le.components.libnccl2 %}
        {% set has_libnccl_package = true %}
ENV NVIDIA_LIBNCCL_PACKAGE_NAME libnccl2
ENV NVIDIA_LIBNCCL_PACKAGE_VERSION {{ cuda.ppc64le.components.libnccl2_dev.version }}
ENV NCCL_VERSION {{ cuda.ppc64le.components.libnccl2_dev.version }}
ENV NVIDIA_LIBNCCL_PACKAGE ${NVIDIA_LIBNCCL_PACKAGE_NAME}=${NVIDIA_LIBNCCL_PACKAGE_VERSION}+cuda{{ cuda.version.major }}.{{ cuda.version.minor }}
    {% endif %}

{% endif -%}


{% for key in metadata.arch_ctx if key not in cached %}
    {% if 'arm' in key %}

FROM base as base-arm
    {% elif 'i386' in key %}

FROM base as base-386
    {% else %}

FROM base as base-{{ key }}
    {% endif %}
{% endfor %}

FROM base-${TARGETARCH}

COPY --from=xx / /

ARG TARGETPLATFORM

ARG TARGETARCH

LABEL maintainer "BentoML Team <contact@bentoml.com>"

RUN xx-apt-get update && xx-apt-get install -y --no-install-recommends \
    cuda-libraries-{{ cuda.version.major }}-{{ cuda.version.minor }}=${NVIDIA_CUDA_LIB_VERSION} \
    {% if has_libnpp_package %}
    ${NVIDIA_LIBNPP_PACKAGE} \
    {% endif %}
    cuda-nvtx-{{ cuda.version.major }}-{{ cuda.version.minor }}=${NVIDIA_NVTX_VERSION} \
    libcusparse-{{ cuda.version.major }}-{{ cuda.version.minor }}=${NVIDIA_LIBCUSPARSE_VERSION} \
    ${NVIDIA_LIBCUBLAS_PACKAGE} \
    ${NVIDIA_CUDNN_PACKAGE} \
    {% if has_libnccl_package %}
    ${NVIDIA_LIBNCCL_PACKAGE} \
    {% endif %}
    && rm -rf /var/lib/apt/lists/*

# Keep apt from auto upgrading the cublas and nccl packages. See https://gitlab.com/nvidia/container-images/cuda/-/issues/88
RUN apt-mark hold ${NVIDIA_CUDNN_PACKAGE_NAME} ${NVIDIA_LIBCUBLAS_PACKAGE_NAME}{% if has_libnccl_package %} ${NVIDIA_LIBNCCL_PACKAGE_NAME}{% endif %}

ENV BENTOML_VERSION={{ metadata.envars['BENTOML_VERSION'] }}

RUN pip install bentoml==${BENTOML_VERSION} --no-cache-dir && \
    rm -rf /var/lib/apt/lists/*
