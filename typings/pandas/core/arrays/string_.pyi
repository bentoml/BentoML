from typing import TYPE_CHECKING, Any
import pyarrow
from pandas._typing import Scalar, type_t
from pandas.core.arrays import PandasArray
from pandas.core.arrays.base import ExtensionArray
from pandas.core.dtypes.base import ExtensionDtype, register_extension_dtype

if TYPE_CHECKING: ...

@register_extension_dtype
class StringDtype(ExtensionDtype):
    name = ...
    na_value = ...
    _metadata = ...
    def __init__(self, storage=...) -> None: ...
    @property
    def type(self) -> type[str]: ...
    @classmethod
    def construct_from_string(cls, string): ...
    def __eq__(self, other: Any) -> bool: ...
    def __hash__(self) -> int: ...
    def construct_array_type(self) -> type_t[BaseStringArray]: ...
    def __repr__(self): ...
    def __str__(self) -> str: ...
    def __from_arrow__(
        self, array: pyarrow.Array | pyarrow.ChunkedArray
    ) -> BaseStringArray: ...

class BaseStringArray(ExtensionArray): ...

class StringArray(BaseStringArray, PandasArray):
    _typ = ...
    def __init__(self, values, copy=...) -> None: ...
    def __arrow_array__(self, type=...): ...
    def __setitem__(self, key, value): ...
    def astype(self, dtype, copy=...): ...
    def min(self, axis=..., skipna: bool = ..., **kwargs) -> Scalar: ...
    def max(self, axis=..., skipna: bool = ..., **kwargs) -> Scalar: ...
    def value_counts(self, dropna: bool = ...): ...
    def memory_usage(self, deep: bool = ...) -> int: ...
    _arith_method = ...
    _str_na_value = ...
