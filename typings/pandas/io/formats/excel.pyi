from typing import Callable, Hashable, Iterable, Mapping, Sequence
from pandas._typing import IndexLabel, StorageOptions
from pandas.core import generic
from pandas.util._decorators import doc

class ExcelCell:
    __fields__ = ...
    __slots__ = ...
    def __init__(
        self,
        row: int,
        col: int,
        val,
        style=...,
        mergestart: int | None = ...,
        mergeend: int | None = ...,
    ) -> None: ...

class CSSToExcelConverter:
    NAMED_COLORS = ...
    VERTICAL_MAP = ...
    BOLD_MAP = ...
    ITALIC_MAP = ...
    FAMILY_MAP = ...
    inherited: dict[str, str] | None
    def __init__(self, inherited: str | None = ...) -> None: ...
    compute_css = ...
    def __call__(self, declarations_str: str) -> dict[str, dict[str, str]]: ...
    def build_xlstyle(self, props: Mapping[str, str]) -> dict[str, dict[str, str]]: ...
    def build_alignment(
        self, props: Mapping[str, str]
    ) -> dict[str, bool | str | None]: ...
    def build_border(
        self, props: Mapping[str, str]
    ) -> dict[str, dict[str, str | None]]: ...
    def build_fill(self, props: Mapping[str, str]): ...
    def build_number_format(
        self, props: Mapping[str, str]
    ) -> dict[str, str | None]: ...
    def build_font(
        self, props: Mapping[str, str]
    ) -> dict[str, bool | int | float | str | None]: ...
    def color_to_excel(self, val: str | None) -> str | None: ...

class ExcelFormatter:
    max_rows = 2 ** 20
    max_cols = 2 ** 14
    def __init__(
        self,
        df,
        na_rep: str = ...,
        float_format: str | None = ...,
        cols: Sequence[Hashable] | None = ...,
        header: Sequence[Hashable] | bool = ...,
        index: bool = ...,
        index_label: IndexLabel | None = ...,
        merge_cells: bool = ...,
        inf_rep: str = ...,
        style_converter: Callable | None = ...,
    ) -> None: ...
    @property
    def header_style(self): ...
    def get_formatted_cells(self) -> Iterable[ExcelCell]: ...
