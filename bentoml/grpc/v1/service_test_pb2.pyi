"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import abc
import builtins
import concurrent.futures
import google.protobuf.descriptor
import google.protobuf.message
import google.protobuf.service
import typing
import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

class TestRequest(google.protobuf.message.Message):
    """Represents a request for TestService."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    INPUT_FIELD_NUMBER: builtins.int
    input: typing.Text
    def __init__(self,
        *,
        input: typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["input",b"input"]) -> None: ...
global___TestRequest = TestRequest

class TestResponse(google.protobuf.message.Message):
    """Represents a response from TestService."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    OUTPUT_FIELD_NUMBER: builtins.int
    output: typing.Text
    def __init__(self,
        *,
        output: typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["output",b"output"]) -> None: ...
global___TestResponse = TestResponse

class TestService(google.protobuf.service.Service, metaclass=abc.ABCMeta):
    """Use for testing interceptors per RPC call."""
    DESCRIPTOR: google.protobuf.descriptor.ServiceDescriptor
    @abc.abstractmethod
    def Execute(
        inst: TestService,
        rpc_controller: google.protobuf.service.RpcController,
        request: global___TestRequest,
        callback: typing.Optional[typing.Callable[[global___TestResponse], None]],
    ) -> concurrent.futures.Future[global___TestResponse]:
        """Unary API"""
        pass
    @abc.abstractmethod
    def ClientStreamExecute(
        inst: TestService,
        rpc_controller: google.protobuf.service.RpcController,
        request: global___TestRequest,
        callback: typing.Optional[typing.Callable[[global___TestResponse], None]],
    ) -> concurrent.futures.Future[global___TestResponse]:
        """Client-streaming API"""
        pass
    @abc.abstractmethod
    def ServerStreamExecute(
        inst: TestService,
        rpc_controller: google.protobuf.service.RpcController,
        request: global___TestRequest,
        callback: typing.Optional[typing.Callable[[global___TestResponse], None]],
    ) -> concurrent.futures.Future[global___TestResponse]:
        """Server-streaming API"""
        pass
    @abc.abstractmethod
    def BidiStreamExecute(
        inst: TestService,
        rpc_controller: google.protobuf.service.RpcController,
        request: global___TestRequest,
        callback: typing.Optional[typing.Callable[[global___TestResponse], None]],
    ) -> concurrent.futures.Future[global___TestResponse]:
        """Bidirectional streaming API"""
        pass
class TestService_Stub(TestService):
    """Use for testing interceptors per RPC call."""
    def __init__(self, rpc_channel: google.protobuf.service.RpcChannel) -> None: ...
    DESCRIPTOR: google.protobuf.descriptor.ServiceDescriptor
    def Execute(
        inst: TestService_Stub,
        rpc_controller: google.protobuf.service.RpcController,
        request: global___TestRequest,
        callback: typing.Optional[typing.Callable[[global___TestResponse], None]] = None,
    ) -> concurrent.futures.Future[global___TestResponse]:
        """Unary API"""
        pass
    def ClientStreamExecute(
        inst: TestService_Stub,
        rpc_controller: google.protobuf.service.RpcController,
        request: global___TestRequest,
        callback: typing.Optional[typing.Callable[[global___TestResponse], None]] = None,
    ) -> concurrent.futures.Future[global___TestResponse]:
        """Client-streaming API"""
        pass
    def ServerStreamExecute(
        inst: TestService_Stub,
        rpc_controller: google.protobuf.service.RpcController,
        request: global___TestRequest,
        callback: typing.Optional[typing.Callable[[global___TestResponse], None]] = None,
    ) -> concurrent.futures.Future[global___TestResponse]:
        """Server-streaming API"""
        pass
    def BidiStreamExecute(
        inst: TestService_Stub,
        rpc_controller: google.protobuf.service.RpcController,
        request: global___TestRequest,
        callback: typing.Optional[typing.Callable[[global___TestResponse], None]] = None,
    ) -> concurrent.futures.Future[global___TestResponse]:
        """Bidirectional streaming API"""
        pass