from typing import Callable
import numpy as np
from pandas._libs import index as libindex
from pandas._typing import Dtype
from pandas.core.indexes.base import Index
from pandas.util._decorators import cache_readonly, doc

_num_index_shared_docs = ...

class NumericIndex(Index):
    _index_descr_args = ...
    _values: np.ndarray
    _default_dtype: np.dtype
    _dtype_validation_metadata: tuple[Callable[..., bool], str]
    _is_numeric_dtype = ...
    _can_hold_strings = ...
    _engine_types: dict[np.dtype, type[libindex.IndexEngine]] = ...
    @cache_readonly
    def inferred_type(self) -> str: ...
    def __new__(cls, data=..., dtype: Dtype | None = ..., copy=..., name=...): ...
    def __contains__(self, key) -> bool: ...
    @doc(Index.astype)
    def astype(self, dtype, copy=...): ...

class IntegerIndex(NumericIndex):
    @property
    def asi8(self) -> np.ndarray: ...

class Int64Index(IntegerIndex):
    _index_descr_args = ...
    __doc__ = ...
    _typ = ...
    _engine_type = ...
    _default_dtype = ...
    _dtype_validation_metadata = ...

class UInt64Index(IntegerIndex):
    _index_descr_args = ...
    __doc__ = ...
    _typ = ...
    _engine_type = ...
    _default_dtype = ...
    _dtype_validation_metadata = ...

class Float64Index(NumericIndex):
    _index_descr_args = ...
    __doc__ = ...
    _typ = ...
    _engine_type = ...
    _default_dtype = ...
    _dtype_validation_metadata = ...
