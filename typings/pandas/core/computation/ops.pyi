from typing import Iterable
import numpy as np

REDUCTIONS = ...
_unary_math_ops = ...
_binary_math_ops = ...
MATHOPS = ...
LOCAL_TAG = ...

class UndefinedVariableError(NameError):
    def __init__(self, name: str, is_local: bool | None = ...) -> None: ...

class Term:
    def __new__(cls, name, env, side=..., encoding=...): ...
    is_local: bool
    def __init__(self, name, env, side=..., encoding=...) -> None: ...
    @property
    def local_name(self) -> str: ...
    def __repr__(self) -> str: ...
    def __call__(self, *args, **kwargs): ...
    def evaluate(self, *args, **kwargs): ...
    def update(self, value): ...
    @property
    def is_scalar(self) -> bool: ...
    @property
    def type(self): ...
    return_type = ...
    @property
    def raw(self) -> str: ...
    @property
    def is_datetime(self) -> bool: ...
    @property
    def value(self): ...
    @value.setter
    def value(self, new_value): ...
    @property
    def name(self): ...
    @property
    def ndim(self) -> int: ...

class Constant(Term):
    def __init__(self, value, env, side=..., encoding=...) -> None: ...
    @property
    def name(self): ...
    def __repr__(self) -> str: ...

_bool_op_map = ...

class Op:
    op: str
    def __init__(
        self, op: str, operands: Iterable[Term | Op], encoding=...
    ) -> None: ...
    def __iter__(self): ...
    def __repr__(self) -> str: ...
    @property
    def return_type(self): ...
    @property
    def has_invalid_return_type(self) -> bool: ...
    @property
    def operand_types(self): ...
    @property
    def is_scalar(self) -> bool: ...
    @property
    def is_datetime(self) -> bool: ...

CMP_OPS_SYMS = ...
_cmp_ops_funcs = ...
_cmp_ops_dict = ...
BOOL_OPS_SYMS = ...
_bool_ops_funcs = ...
_bool_ops_dict = ...
ARITH_OPS_SYMS = ...
_arith_ops_funcs = ...
_arith_ops_dict = ...
SPECIAL_CASE_ARITH_OPS_SYMS = ...
_special_case_arith_ops_funcs = ...
_special_case_arith_ops_dict = ...
_binary_ops_dict = ...

def is_term(obj) -> bool: ...

class BinOp(Op):
    def __init__(self, op: str, lhs, rhs) -> None: ...
    def __call__(self, env): ...
    def evaluate(self, env, engine: str, parser, term_type, eval_in_python): ...
    def convert_values(self): ...

def isnumeric(dtype) -> bool: ...

class Div(BinOp):
    def __init__(self, lhs, rhs) -> None: ...

UNARY_OPS_SYMS = ...
_unary_ops_funcs = ...
_unary_ops_dict = ...

class UnaryOp(Op):
    def __init__(self, op: str, operand) -> None: ...
    def __call__(self, env): ...
    def __repr__(self) -> str: ...
    @property
    def return_type(self) -> np.dtype: ...

class MathCall(Op):
    def __init__(self, func, args) -> None: ...
    def __call__(self, env): ...
    def __repr__(self) -> str: ...

class FuncNode:
    def __init__(self, name: str) -> None: ...
