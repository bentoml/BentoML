"""
This type stub file was generated by pyright.
"""

import argparse
import cmd

USAGE = ...
VERSION = ...
TIMEOUT_MSG = ...
def prettify(jsonobj, prettify=...): # -> str:
    """ prettiffy JSON output """
    ...

class _Help(argparse.HelpFormatter):
    commands = ...
    def start_section(self, heading): # -> None:
        ...
    


class ControllerApp:
    def __init__(self, commands, client=...) -> None:
        ...
    
    def run(self, args):
        ...
    
    def dispatch(self, args):
        ...
    
    def handle_sub(self, command, opts, topics, endpoint, timeout, ssh_server, ssh_keyfile): # -> Literal[0]:
        ...
    
    def handle_dealer(self, command, opts, msg, endpoint, timeout, ssh_server, ssh_keyfile):
        ...
    


class CircusCtl(cmd.Cmd):
    """CircusCtl tool."""
    prompt = ...
    def __new__(cls, client, commands, *args, **kw): # -> Self@CircusCtl:
        """Auto add do and complete methods for all known commands."""
        ...
    
    def __init__(self, client, *args, **kwargs) -> None:
        ...
    
    def do_EOF(self, line): # -> Literal[True]:
        ...
    
    def postloop(self): # -> None:
        ...
    
    def autocomplete(self, autocomplete=..., words=..., cword=...):
        """
        Output completion suggestions for BASH.

        The output of this function is passed to BASH's `COMREPLY` variable and
        treated as completion suggestions. `COMREPLY` expects a space
        separated string as the result.

        The `COMP_WORDS` and `COMP_CWORD` BASH environment variables are used
        to get information about the cli input. Please refer to the BASH
        man-page for more information about this variables.

        Subcommand options are saved as pairs. A pair consists of
        the long option string (e.g. '--exclude') and a boolean
        value indicating if the option requires arguments. When printing to
        stdout, a equal sign is appended to options which require arguments.

        Note: If debugging this function, it is recommended to write the debug
        output in a separate file. Otherwise the debug output will be treated
        and formatted as potential completion suggestions.
        """
        ...
    
    def start(self, globalopts):
        ...
    


def parse_arguments(args, commands):
    ...

def main():
    ...

if __name__ == '__main__':
    ...
