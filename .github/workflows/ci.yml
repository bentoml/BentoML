name: CI

on:
  push:
    branches:
      - master
      - bentoml-1.0
      - main
  pull_request:
    branches:
      - master
      - bentoml-1.0
      - main
  schedule:
    - cron: '0 0 * * 1/2'

jobs:

  diff:
    runs-on: ubuntu-latest
    outputs:
      bentoml: ${{ steps.filter.outputs.bentoml }}
      docs: ${{ steps.filter.outputs.docs }}
    steps:
      - uses: actions/checkout@v2
      - uses: dorny/paths-filter@v2
        id: filter
        with:
          base: 'bentoml-1.0'
          filters: |
            related: &related
              - .github/workflows/ci.yml
            bentoml:
              - *related
              - "bentoml/**"
              - "tests/**"
              - "docker/**"
            docs:
              - *related
              - "docs/**"

  codestyle_check:
    runs-on: ubuntu-latest
    needs:
      - diff

    if: ${{ (github.event_name == 'pull_request' && needs.diff.outputs.bentoml == 'true') || github.event_name == 'push' }}

    steps:
      - uses: actions/checkout@v2
      - name: Format check
        run: make ci-format
      - name: Lint check
        # TODO: after fix all pylint errors under bentoml uses `make ci-lint` instead
        run: make ci-flake8
      - name: Type check
        # TODO: after fix all types errors uses `make ci-types` instead
        env:
          GITHUB_BASE_REF: ${{ github.base_ref }}
        run: make ci-pyright

  documentation_spelling_check:
    defaults:
      run:
        shell: bash
    runs-on: ubuntu-latest
    needs:
      - diff

    if: ${{ (github.event_name == 'pull_request' && needs.diff.outputs.docs == 'true') || github.event_name == 'push' }}
    steps:
      - uses: actions/checkout@v2
      - name: Setup python
        uses: actions/setup-python@v2
        with:
          python-version: 3.8
      - name: Bootstrap poetry
        run: |
          curl -sSL https://install.python-poetry.org | python -
      - name: Update PATH
        run: echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Configure poetry
        run: poetry config virtualenvs.in-project true

      - name: Cache pip dependencies
        uses: actions/cache@v2
        id: cache-pip
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.full-python-version.outputs.version }}-${{ hashFiles('**/pyproject.toml') }}
          restore-keys: |
            venv-${{ runner.os }}-${{ steps.full-python-version.outputs.version }}-

      - name: Ensure cache is healthy
        if: steps.cache.outputs.cache-hit == 'true'
        run: timeout 10s poetry run pip --version || rm -rf .venv

      - name: Install dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: poetry install

      - name: Install libenchant
        run: |
          sudo apt-get update && sudo apt-get install -y libenchant-dev

      - name: Run spellcheck script
        run: poetry run sphinx-build -b spelling ./docs/source ./docs/build
        shell: bash

  unit_tests:
    needs:
      - diff

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: [ '3.7', '3.8', '3.9' ]
    defaults:
      run:
        shell: bash

    if: ${{ (github.event_name == 'pull_request' && needs.diff.outputs.bentoml == 'true') || github.event_name == 'push' }}
    name: python${{ matrix.python-version }}_unit_tests (${{ matrix.os }})
    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0 # fetch all tags and branches
      - name: Setup python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
          architecture: x64

      - name: Get full Python version
        id: full-python-version
        run: echo ::set-output name=version::$(python -c "import sys; print('-'.join(str(v) for v in sys.version_info))")

      - name: Bootstrap poetry
        run: |
          curl -sSL https://install.python-poetry.org | python -

      - name: Update PATH
        if: ${{ matrix.os != 'windows-latest' }}
        run: echo "$HOME/.local/bin" >> $GITHUB_PATH

      # https://github.community/t/github-actions-windows-runtime-linux-container-mode-docker/135874/2
      - name: Update Path for Windows and switch to Linux daemon
        if: ${{ matrix.os == 'windows-latest' }}
        run: |
          echo "$APPDATA\Python\Scripts" >> $GITHUB_PATH

      - name: Install yq (fix Docker licensing in MacOS)
        if: ${{ matrix.os == 'macos-latest' }}
        run: |
          brew install yq

      - name: Configure poetry
        run: poetry config virtualenvs.in-project true

      - name: Cache pip dependencies
        uses: actions/cache@v2
        id: cache-pip
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.full-python-version.outputs.version }}-${{ hashFiles('**/pyproject.toml') }}
          restore-keys: |
            venv-${{ runner.os }}-${{ steps.full-python-version.outputs.version }}-

      - name: Ensure cache is healthy
        if: steps.cache.outputs.cache-hit == 'true'
        run: timeout 10s poetry run pip --version || rm -rf .venv

      - name: Install dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: poetry install

      - name: Run unit tests
        if: ${{ matrix.os != 'windows-latest' }}
        run: make tests-unit

      - name: Run unit tests for Windows
        if: ${{ matrix.os == 'windows-latest' }}
        run: |
          poetry run pytest tests/unit --cov=bentoml --cov-config=.coveragerc --capture=tee-sys --cov-report=xml:"unit.xml"

      - name: Upload test coverage to Codecov
        uses: codecov/codecov-action@v2
        with:
          name: codecov-${{ matrix.os }}-python${{ matrix.python-version }}
          fail_ci_if_error: true
          flags: bento-server
          directory: ./
          files: ./unit.xml
          verbose: true

  bento_server_integration_tests:
    needs:
      - diff

    strategy:
      fail-fast: false
      matrix:
        # TODO(bojiang): Fixes windows path problem
        os: [ubuntu-latest, macos-latest]
        python-version: [ '3.7', '3.8', '3.9' ]
    defaults:
      run:
        shell: bash

    if: ${{ (github.event_name == 'pull_request' && needs.diff.outputs.bentoml == 'true') || github.event_name == 'push' }}
    name: python${{ matrix.python-version }}_e2e_tests (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    timeout-minutes: 20

    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0  # fetch all tags and branches
      - name: Setup python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
          architecture: x64

      - name: Get full Python version
        id: full-python-version
        run: echo ::set-output name=version::$(python -c "import sys; print('-'.join(str(v) for v in sys.version_info))")

      - name: Bootstrap poetry
        run: |
          curl -sSL https://install.python-poetry.org | python -

      - name: Update PATH
        if: ${{ matrix.os != 'windows-latest' }}
        run: echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Update Path for Windows
        if: ${{ matrix.os == 'windows-latest' }}
        run: echo "$APPDATA\Python\Scripts" >> $GITHUB_PATH

      - name: Configure poetry
        run: poetry config virtualenvs.in-project true

      - name: Install yq (fix Docker licensing in MacOS)
        if: ${{ matrix.os == 'macos-latest' }}
        run: |
          brew install yq

      - name: Cache pip dependencies
        uses: actions/cache@v2
        id: cache-pip
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.full-python-version.outputs.version }}-${{ hashFiles('**/pyproject.toml') }}
          restore-keys: |
            venv-${{ runner.os }}-${{ steps.full-python-version.outputs.version }}-

      - name: Ensure cache is healthy
        if: steps.cache.outputs.cache-hit == 'true'
        run: timeout 10s poetry run pip --version || rm -rf .venv

      - name: Install dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: poetry install

      - name: Run tests and generate coverage report
        run: ./scripts/ci/run_tests.sh internal --project-root tests/integration/projects/general -vvv --capture=tee-sys

      - name: Upload test coverage to Codecov
        uses: codecov/codecov-action@v2
        with:
          flags: bento-server
          directory: ./
          files: ./internal.xml
          verbose: true

concurrency:
  group: ci-${{ github.event.pull_request.number || github.sha }}
  cancel-in-progress: true
