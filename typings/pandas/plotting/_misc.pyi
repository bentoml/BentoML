from contextlib import contextmanager

def table(ax, data, rowLabels=..., colLabels=..., **kwargs): ...
def register(): ...
def deregister(): ...
def scatter_matrix(
    frame,
    alpha=...,
    figsize=...,
    ax=...,
    grid=...,
    diagonal=...,
    marker=...,
    density_kwds=...,
    hist_kwds=...,
    range_padding=...,
    **kwargs
): ...
def radviz(frame, class_column, ax=..., color=..., colormap=..., **kwds): ...
def andrews_curves(
    frame, class_column, ax=..., samples=..., color=..., colormap=..., **kwargs
): ...
def bootstrap_plot(series, fig=..., size=..., samples=..., **kwds): ...
def parallel_coordinates(
    frame,
    class_column,
    cols=...,
    ax=...,
    color=...,
    use_columns=...,
    xticks=...,
    colormap=...,
    axvlines=...,
    axvlines_kwds=...,
    sort_labels=...,
    **kwargs
): ...
def lag_plot(series, lag=..., ax=..., **kwds): ...
def autocorrelation_plot(series, ax=..., **kwargs): ...

class _Options(dict):
    _ALIASES = ...
    _DEFAULT_KEYS = ...
    def __init__(self, deprecated=...) -> None: ...
    def __getitem__(self, key): ...
    def __setitem__(self, key, value): ...
    def __delitem__(self, key): ...
    def __contains__(self, key) -> bool: ...
    def reset(self): ...
    @contextmanager
    def use(self, key, value): ...

plot_params = ...
