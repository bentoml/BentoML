import numpy as np
from pandas._typing import ArrayLike
from pandas.core.arrays.numeric import NumericArray, NumericDtype
from pandas.core.dtypes.base import register_extension_dtype
from pandas.util._decorators import cache_readonly

class _IntegerDtype(NumericDtype):
    def __repr__(self) -> str: ...
    @cache_readonly
    def is_signed_integer(self) -> bool: ...
    @cache_readonly
    def is_unsigned_integer(self) -> bool: ...
    @classmethod
    def construct_array_type(cls) -> type[IntegerArray]: ...

def safe_cast(values, dtype, copy: bool): ...
def coerce_to_array(
    values, dtype, mask=..., copy: bool = ...
) -> tuple[np.ndarray, np.ndarray]: ...

class IntegerArray(NumericArray):
    _internal_fill_value = ...
    @cache_readonly
    def dtype(self) -> _IntegerDtype: ...
    def __init__(
        self, values: np.ndarray, mask: np.ndarray, copy: bool = ...
    ) -> None: ...
    def astype(self, dtype, copy: bool = ...) -> ArrayLike: ...
    def sum(self, *, skipna=..., min_count=..., **kwargs): ...
    def prod(self, *, skipna=..., min_count=..., **kwargs): ...
    def min(self, *, skipna=..., **kwargs): ...
    def max(self, *, skipna=..., **kwargs): ...

_dtype_docstring = ...

@register_extension_dtype
class Int8Dtype(_IntegerDtype):
    type = ...
    name = ...
    __doc__ = ...

@register_extension_dtype
class Int16Dtype(_IntegerDtype):
    type = ...
    name = ...
    __doc__ = ...

@register_extension_dtype
class Int32Dtype(_IntegerDtype):
    type = ...
    name = ...
    __doc__ = ...

@register_extension_dtype
class Int64Dtype(_IntegerDtype):
    type = ...
    name = ...
    __doc__ = ...

@register_extension_dtype
class UInt8Dtype(_IntegerDtype):
    type = ...
    name = ...
    __doc__ = ...

@register_extension_dtype
class UInt16Dtype(_IntegerDtype):
    type = ...
    name = ...
    __doc__ = ...

@register_extension_dtype
class UInt32Dtype(_IntegerDtype):
    type = ...
    name = ...
    __doc__ = ...

@register_extension_dtype
class UInt64Dtype(_IntegerDtype):
    type = ...
    name = ...
    __doc__ = ...

INT_STR_TO_DTYPE: dict[str, _IntegerDtype] = ...
