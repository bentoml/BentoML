"""
This type stub file was generated by pyright.
"""

import sys
import random
from datetime import datetime
from queue import Empty, Queue
from circus.util import resolve_name, to_str
from circus.stream.file_stream import FileStream, TimedRotatingFileStream, WatchedFileStream
from circus.stream.redirector import Redirector

class QueueStream(Queue):
    def __init__(self, **kwargs) -> None:
        ...
    
    def __call__(self, data): # -> None:
        ...
    
    def close(self): # -> None:
        ...
    


class StdoutStream:
    def __init__(self, **kwargs) -> None:
        ...
    
    def __call__(self, data): # -> None:
        ...
    
    def close(self): # -> None:
        ...
    


class FancyStdoutStream(StdoutStream):
    """
    Write output from watchers using different colors along with a
    timestamp.

    If no color is selected a color will be chosen at random. The
    available ascii colors are:

      - red
      - green
      - yellow
      - blue
      - magenta
      - cyan
      - white

    You may also configure the timestamp format as defined by
    datetime.strftime. The default is: ::

      %Y-%m-%d %H:%M:%S

    Here is an example: ::

      [watcher:foo]
      cmd = python -m myapp.server
      stdout_stream.class = FancyStdoutStream
      stdout_stream.color = green
      stdout_stream.time_format = '%Y/%m/%d | %H:%M:%S'
    """
    colors = ...
    out = ...
    now = ...
    fromtimestamp = ...
    def __init__(self, color=..., time_format=..., **kwargs) -> None:
        ...
    
    def prefix(self, data): # -> str:
        """
        Create a prefix for each line.

        This includes the ansi escape sequence for the color. This
        will not work on windows. For something more robust there is a
        good discussion over on Stack Overflow:

        http://stackoverflow.com/questions/287871
        """
        ...
    
    def __call__(self, data): # -> None:
        ...
    


def get_stream(conf, reload=...): # -> Any | FileStream | None:
    ...

