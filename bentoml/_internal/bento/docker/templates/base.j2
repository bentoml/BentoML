{% set pip_cmd= pip_cmd | default("pip") %}
# syntax = docker/dockerfile:1.4-labs
#
# ===========================================
#
# THIS IS A GENERATED DOCKERFILE. DO NOT EDIT
#
# ===========================================

{% block setup_base_image %}
	{% set cached = [] %}
FROM {{ base_image }} as cached

FROM {{ base_image }} as base

	{% if not user_defined_image %}
		{% for key in distro_spec.architecture if key not in cached %}
			{% if 'arm64' in key or 'aarch64' in key %}
			{% do cached.append(key) %}
FROM base as base-arm64
			{% elif 'armhf' in key or 'armel' in key %}
			{% do cached.append(key) %}
FROM base as base-arm
			{% elif 'i386' in key %}
			{% do cached.append(key) %}
FROM base as base-386
			{% else %}
			{% do cached.append(key) %}
FROM base as base-{{ key }}
			{% endif %}
		{% endfor %}
		{% else %}
# custom base_image: {{ base_image }}. BentoML will only support x86_64
FROM base as base-amd64
	{% endif %}

FROM base-${TARGETARCH}

ARG TARGETARCH

ARG TARGETPLATFORM

ENV LANG=C.UTF-8

ENV LC_ALL=C.UTF-8

ENV PYTHONIOENCODING=UTF-8

ENV PYTHONUNBUFFERED=1

{% endblock %}
{% block setup_uid_gid %}
ARG BENTO_USER={{ default_bento_user }}
ARG BENTO_USER_UID={{ default_uid_gid }}
ARG BENTO_USER_GID={{ default_uid_gid }}
RUN groupadd -g $BENTO_USER_GID -o $BENTO_USER && useradd -m -u $BENTO_USER_UID -g $BENTO_USER_GID -o -r $BENTO_USER
{% endblock %}
{% block setup_envar %}
{% if docker_options.env is not none %}
{% for key, value in docker_options.env.items() -%}

ENV {{ key }}={{ value }}
{% endfor -%}
{% endif -%}

ARG BENTO_PATH={{ default_bento_path }}
ENV BENTO_PATH=$BENTO_PATH
ENV BENTOML_HOME={{ default_bento_home }}

RUN mkdir $BENTO_PATH && chown {{ default_bento_user }}:{{ default_bento_user }} $BENTO_PATH -R
WORKDIR $BENTO_PATH

# init related components
COPY --chown={{ default_bento_user }}:{{ default_bento_user }} . ./

{% endblock %}
# Install bentoml=={{ bentoml_version }}
ENV BENTOML_VERSION={{ bentoml_version }}
RUN --mount=type=cache,mode=0777,target=/root/.cache/pip \
    {{ pip_cmd }} install bentoml==${BENTOML_VERSION}
{% block setup_bento %}
# install python package with wheels
# BentoML by default generates two requirment files:
#  - ./env/python/requirements.lock.txt: all dependencies locked to its version presented during `build`
#  - ./env/python/requirements.txt: all dependecies as user specified in code or requirements.txt file
# We will try to install from  requirements.txt.lock to install package with -U,
# else we will try to install from requirements.txt.
RUN --mount=type=cache,mode=0777,target=/root/.cache/pip bash <<EOF
if [ -f ./env/python/pip_args.txt ]; then
  EXTRA_PIP_INSTALL_ARGS=$(cat ./env/python/pip_args.txt)
fi
if [ -f ./env/python/requirements.lock.txt ]; then
  echo "Installing pip packages from 'requirements.lock.txt'.."
  {{ pip_cmd }} install -r ./env/python/requirements.lock.txt -U $EXTRA_PIP_INSTALL_ARGS
else
  if [ -f ./env/python/requirements.txt ]; then
    echo "Installing pip packages from 'requirements.txt'.."
    {{ pip_cmd }} install -r ./env/python/requirements.txt $EXTRA_PIP_INSTALL_ARGS
  fi
fi
EOF

# install wheels included in Bento
RUN bash <<EOF
if [ -d ./env/python/wheels ]; then
  echo "Installing wheels.."
  pip install ./env/python/wheels/*.whl
fi
EOF

# Run user setup scripts if exists
RUN bash <<EOF
if [ -f ./env/docker/setup_script ]; then
  chmod +x ./env/docker/setup_script
  ./env/docker/setup_script
fi
EOF

{% endblock %}
{% block setup_entrypoint %}
# Default port for BentoServer
EXPOSE 3000

RUN chmod +x ./env/docker/entrypoint.sh

USER bentoml

ENTRYPOINT [ "./env/docker/entrypoint.sh" ]

CMD ["bentoml", "serve", ".", "--production"]
{% endblock %}
