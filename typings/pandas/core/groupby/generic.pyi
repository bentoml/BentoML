from typing import Any, Callable, Union
from pandas._typing import FrameOrSeries
from pandas.core.frame import DataFrame
from pandas.core.groupby import base
from pandas.core.groupby.groupby import (
    GroupBy,
    _agg_template,
    _apply_docs,
    _transform_template,
)
from pandas.core.series import Series
from pandas.util._decorators import Appender, Substitution, doc

NamedAgg = ...
AggScalar = Union[str, Callable[..., Any]]
ScalarResult = ...

def generate_property(name: str, klass: type[FrameOrSeries]): ...
def pin_allowlisted_properties(
    klass: type[FrameOrSeries], allowlist: frozenset[str]
): ...
@pin_allowlisted_properties(Series, base.series_apply_allowlist)
class SeriesGroupBy(GroupBy[Series]):
    _apply_allowlist = ...
    _agg_examples_doc = ...
    @Appender(
        _apply_docs["template"].format(
            input="series", examples=_apply_docs["series_examples"]
        )
    )
    def apply(self, func, *args, **kwargs): ...
    @doc(_agg_template, examples=_agg_examples_doc, klass="Series")
    def aggregate(self, func=..., *args, engine=..., engine_kwargs=..., **kwargs): ...
    agg = ...
    @Substitution(klass="Series")
    @Appender(_transform_template)
    def transform(self, func, *args, engine=..., engine_kwargs=..., **kwargs): ...
    def filter(self, func, dropna: bool = ..., *args, **kwargs): ...
    def nunique(self, dropna: bool = ...) -> Series: ...
    @doc(Series.describe)
    def describe(self, **kwargs): ...
    def value_counts(
        self,
        normalize: bool = ...,
        sort: bool = ...,
        ascending: bool = ...,
        bins=...,
        dropna: bool = ...,
    ): ...
    def count(self) -> Series: ...
    def pct_change(self, periods=..., fill_method=..., limit=..., freq=...): ...

@pin_allowlisted_properties(DataFrame, base.dataframe_apply_allowlist)
class DataFrameGroupBy(GroupBy[DataFrame]):
    _apply_allowlist = ...
    _agg_examples_doc = ...
    @doc(_agg_template, examples=_agg_examples_doc, klass="DataFrame")
    def aggregate(self, func=..., *args, engine=..., engine_kwargs=..., **kwargs): ...
    agg = ...
    @Substitution(klass="DataFrame")
    @Appender(_transform_template)
    def transform(self, func, *args, engine=..., engine_kwargs=..., **kwargs): ...
    def filter(self, func, dropna=..., *args, **kwargs): ...
    def __getitem__(self, key) -> DataFrameGroupBy | SeriesGroupBy: ...
    def count(self) -> DataFrame: ...
    def nunique(self, dropna: bool = ...) -> DataFrame: ...
    @Appender(DataFrame.idxmax.__doc__)
    def idxmax(self, axis=..., skipna: bool = ...): ...
    @Appender(DataFrame.idxmin.__doc__)
    def idxmin(self, axis=..., skipna: bool = ...): ...
    boxplot = ...
