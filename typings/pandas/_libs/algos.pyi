from typing import Any
import numpy as np

class Infinity:
    def __eq__(self, other) -> bool: ...
    def __ne__(self, other) -> bool: ...
    def __lt__(self, other) -> bool: ...
    def __le__(self, other) -> bool: ...
    def __gt__(self, other) -> bool: ...
    def __ge__(self, other) -> bool: ...

class NegInfinity:
    def __eq__(self, other) -> bool: ...
    def __ne__(self, other) -> bool: ...
    def __lt__(self, other) -> bool: ...
    def __le__(self, other) -> bool: ...
    def __gt__(self, other) -> bool: ...
    def __ge__(self, other) -> bool: ...

def unique_deltas(arr: np.ndarray) -> np.ndarray: ...
def is_lexsorted(list_of_arrays: list[np.ndarray]) -> bool: ...
def groupsort_indexer(
    index: np.ndarray, ngroups: int
) -> tuple[np.ndarray, np.ndarray]: ...
def kth_smallest(a: np.ndarray, k: int) -> Any: ...
def nancorr(mat: np.ndarray, cov: bool = ..., minp=...) -> np.ndarray: ...
def nancorr_spearman(mat: np.ndarray, minp: int = ...) -> np.ndarray: ...
def nancorr_kendall(mat: np.ndarray, minp: int = ...) -> np.ndarray: ...
def validate_limit(nobs: int | None, limit=...) -> int: ...
def pad(old: np.ndarray, new: np.ndarray, limit=...) -> np.ndarray: ...
def pad_inplace(values: np.ndarray, mask: np.ndarray, limit=...) -> None: ...
def pad_2d_inplace(values: np.ndarray, mask: np.ndarray, limit=...) -> None: ...
def backfill(old: np.ndarray, new: np.ndarray, limit=...) -> np.ndarray: ...
def backfill_inplace(values: np.ndarray, mask: np.ndarray, limit=...) -> None: ...
def backfill_2d_inplace(values: np.ndarray, mask: np.ndarray, limit=...) -> None: ...
def is_monotonic(arr: np.ndarray, timelike: bool) -> tuple[bool, bool, bool]: ...
def rank_1d(
    values: np.ndarray,
    labels: np.ndarray,
    is_datetimelike: bool = ...,
    ties_method=...,
    ascending: bool = ...,
    pct: bool = ...,
    na_option=...,
) -> np.ndarray: ...
def rank_2d(
    in_arr: np.ndarray,
    axis: int = ...,
    is_datetimelike: bool = ...,
    ties_method=...,
    ascending: bool = ...,
    na_option=...,
    pct: bool = ...,
) -> np.ndarray: ...
def diff_2d(
    arr: np.ndarray, out: np.ndarray, periods: int, axis: int, datetimelike: bool = ...
) -> None: ...
def ensure_platform_int(arr: object) -> np.ndarray: ...
def ensure_object(arr: object) -> np.ndarray: ...
def ensure_float64(arr: object, copy=...) -> np.ndarray: ...
def ensure_float32(arr: object, copy=...) -> np.ndarray: ...
def ensure_int8(arr: object, copy=...) -> np.ndarray: ...
def ensure_int16(arr: object, copy=...) -> np.ndarray: ...
def ensure_int32(arr: object, copy=...) -> np.ndarray: ...
def ensure_int64(arr: object, copy=...) -> np.ndarray: ...
def ensure_uint8(arr: object, copy=...) -> np.ndarray: ...
def ensure_uint16(arr: object, copy=...) -> np.ndarray: ...
def ensure_uint32(arr: object, copy=...) -> np.ndarray: ...
def ensure_uint64(arr: object, copy=...) -> np.ndarray: ...
def take_1d_int8_int8(
    values: np.ndarray, indexer: np.ndarray, out: np.ndarray, fill_value=...
) -> None: ...
def take_1d_int8_int32(
    values: np.ndarray, indexer: np.ndarray, out: np.ndarray, fill_value=...
) -> None: ...
def take_1d_int8_int64(
    values: np.ndarray, indexer: np.ndarray, out: np.ndarray, fill_value=...
) -> None: ...
def take_1d_int8_float64(
    values: np.ndarray, indexer: np.ndarray, out: np.ndarray, fill_value=...
) -> None: ...
def take_1d_int16_int16(
    values: np.ndarray, indexer: np.ndarray, out: np.ndarray, fill_value=...
) -> None: ...
def take_1d_int16_int32(
    values: np.ndarray, indexer: np.ndarray, out: np.ndarray, fill_value=...
) -> None: ...
def take_1d_int16_int64(
    values: np.ndarray, indexer: np.ndarray, out: np.ndarray, fill_value=...
) -> None: ...
def take_1d_int16_float64(
    values: np.ndarray, indexer: np.ndarray, out: np.ndarray, fill_value=...
) -> None: ...
def take_1d_int32_int32(
    values: np.ndarray, indexer: np.ndarray, out: np.ndarray, fill_value=...
) -> None: ...
def take_1d_int32_int64(
    values: np.ndarray, indexer: np.ndarray, out: np.ndarray, fill_value=...
) -> None: ...
def take_1d_int32_float64(
    values: np.ndarray, indexer: np.ndarray, out: np.ndarray, fill_value=...
) -> None: ...
def take_1d_int64_int64(
    values: np.ndarray, indexer: np.ndarray, out: np.ndarray, fill_value=...
) -> None: ...
def take_1d_int64_float64(
    values: np.ndarray, indexer: np.ndarray, out: np.ndarray, fill_value=...
) -> None: ...
def take_1d_float32_float32(
    values: np.ndarray, indexer: np.ndarray, out: np.ndarray, fill_value=...
) -> None: ...
def take_1d_float32_float64(
    values: np.ndarray, indexer: np.ndarray, out: np.ndarray, fill_value=...
) -> None: ...
def take_1d_float64_float64(
    values: np.ndarray, indexer: np.ndarray, out: np.ndarray, fill_value=...
) -> None: ...
def take_1d_object_object(
    values: np.ndarray, indexer: np.ndarray, out: np.ndarray, fill_value=...
) -> None: ...
def take_1d_bool_bool(
    values: np.ndarray, indexer: np.ndarray, out: np.ndarray, fill_value=...
) -> None: ...
def take_1d_bool_object(
    values: np.ndarray, indexer: np.ndarray, out: np.ndarray, fill_value=...
) -> None: ...
def take_2d_axis0_int8_int8(
    values: np.ndarray, indexer: np.ndarray, out: np.ndarray, fill_value=...
) -> None: ...
def take_2d_axis0_int8_int32(
    values: np.ndarray, indexer: np.ndarray, out: np.ndarray, fill_value=...
) -> None: ...
def take_2d_axis0_int8_int64(
    values: np.ndarray, indexer: np.ndarray, out: np.ndarray, fill_value=...
) -> None: ...
def take_2d_axis0_int8_float64(
    values: np.ndarray, indexer: np.ndarray, out: np.ndarray, fill_value=...
) -> None: ...
def take_2d_axis0_int16_int16(
    values: np.ndarray, indexer: np.ndarray, out: np.ndarray, fill_value=...
) -> None: ...
def take_2d_axis0_int16_int32(
    values: np.ndarray, indexer: np.ndarray, out: np.ndarray, fill_value=...
) -> None: ...
def take_2d_axis0_int16_int64(
    values: np.ndarray, indexer: np.ndarray, out: np.ndarray, fill_value=...
) -> None: ...
def take_2d_axis0_int16_float64(
    values: np.ndarray, indexer: np.ndarray, out: np.ndarray, fill_value=...
) -> None: ...
def take_2d_axis0_int32_int32(
    values: np.ndarray, indexer: np.ndarray, out: np.ndarray, fill_value=...
) -> None: ...
def take_2d_axis0_int32_int64(
    values: np.ndarray, indexer: np.ndarray, out: np.ndarray, fill_value=...
) -> None: ...
def take_2d_axis0_int32_float64(
    values: np.ndarray, indexer: np.ndarray, out: np.ndarray, fill_value=...
) -> None: ...
def take_2d_axis0_int64_int64(
    values: np.ndarray, indexer: np.ndarray, out: np.ndarray, fill_value=...
) -> None: ...
def take_2d_axis0_int64_float64(
    values: np.ndarray, indexer: np.ndarray, out: np.ndarray, fill_value=...
) -> None: ...
def take_2d_axis0_float32_float32(
    values: np.ndarray, indexer: np.ndarray, out: np.ndarray, fill_value=...
) -> None: ...
def take_2d_axis0_float32_float64(
    values: np.ndarray, indexer: np.ndarray, out: np.ndarray, fill_value=...
) -> None: ...
def take_2d_axis0_float64_float64(
    values: np.ndarray, indexer: np.ndarray, out: np.ndarray, fill_value=...
) -> None: ...
def take_2d_axis0_object_object(
    values: np.ndarray, indexer: np.ndarray, out: np.ndarray, fill_value=...
) -> None: ...
def take_2d_axis0_bool_bool(
    values: np.ndarray, indexer: np.ndarray, out: np.ndarray, fill_value=...
) -> None: ...
def take_2d_axis0_bool_object(
    values: np.ndarray, indexer: np.ndarray, out: np.ndarray, fill_value=...
) -> None: ...
def take_2d_axis1_int8_int8(
    values: np.ndarray, indexer: np.ndarray, out: np.ndarray, fill_value=...
) -> None: ...
def take_2d_axis1_int8_int32(
    values: np.ndarray, indexer: np.ndarray, out: np.ndarray, fill_value=...
) -> None: ...
def take_2d_axis1_int8_int64(
    values: np.ndarray, indexer: np.ndarray, out: np.ndarray, fill_value=...
) -> None: ...
def take_2d_axis1_int8_float64(
    values: np.ndarray, indexer: np.ndarray, out: np.ndarray, fill_value=...
) -> None: ...
def take_2d_axis1_int16_int16(
    values: np.ndarray, indexer: np.ndarray, out: np.ndarray, fill_value=...
) -> None: ...
def take_2d_axis1_int16_int32(
    values: np.ndarray, indexer: np.ndarray, out: np.ndarray, fill_value=...
) -> None: ...
def take_2d_axis1_int16_int64(
    values: np.ndarray, indexer: np.ndarray, out: np.ndarray, fill_value=...
) -> None: ...
def take_2d_axis1_int16_float64(
    values: np.ndarray, indexer: np.ndarray, out: np.ndarray, fill_value=...
) -> None: ...
def take_2d_axis1_int32_int32(
    values: np.ndarray, indexer: np.ndarray, out: np.ndarray, fill_value=...
) -> None: ...
def take_2d_axis1_int32_int64(
    values: np.ndarray, indexer: np.ndarray, out: np.ndarray, fill_value=...
) -> None: ...
def take_2d_axis1_int32_float64(
    values: np.ndarray, indexer: np.ndarray, out: np.ndarray, fill_value=...
) -> None: ...
def take_2d_axis1_int64_int64(
    values: np.ndarray, indexer: np.ndarray, out: np.ndarray, fill_value=...
) -> None: ...
def take_2d_axis1_int64_float64(
    values: np.ndarray, indexer: np.ndarray, out: np.ndarray, fill_value=...
) -> None: ...
def take_2d_axis1_float32_float32(
    values: np.ndarray, indexer: np.ndarray, out: np.ndarray, fill_value=...
) -> None: ...
def take_2d_axis1_float32_float64(
    values: np.ndarray, indexer: np.ndarray, out: np.ndarray, fill_value=...
) -> None: ...
def take_2d_axis1_float64_float64(
    values: np.ndarray, indexer: np.ndarray, out: np.ndarray, fill_value=...
) -> None: ...
def take_2d_axis1_object_object(
    values: np.ndarray, indexer: np.ndarray, out: np.ndarray, fill_value=...
) -> None: ...
def take_2d_axis1_bool_bool(
    values: np.ndarray, indexer: np.ndarray, out: np.ndarray, fill_value=...
) -> None: ...
def take_2d_axis1_bool_object(
    values: np.ndarray, indexer: np.ndarray, out: np.ndarray, fill_value=...
) -> None: ...
def take_2d_multi_int8_int8(
    values: np.ndarray, indexer, out: np.ndarray, fill_value=...
) -> None: ...
def take_2d_multi_int8_int32(
    values: np.ndarray, indexer, out: np.ndarray, fill_value=...
) -> None: ...
def take_2d_multi_int8_int64(
    values: np.ndarray, indexer, out: np.ndarray, fill_value=...
) -> None: ...
def take_2d_multi_int8_float64(
    values: np.ndarray, indexer, out: np.ndarray, fill_value=...
) -> None: ...
def take_2d_multi_int16_int16(
    values: np.ndarray, indexer, out: np.ndarray, fill_value=...
) -> None: ...
def take_2d_multi_int16_int32(
    values: np.ndarray, indexer, out: np.ndarray, fill_value=...
) -> None: ...
def take_2d_multi_int16_int64(
    values: np.ndarray, indexer, out: np.ndarray, fill_value=...
) -> None: ...
def take_2d_multi_int16_float64(
    values: np.ndarray, indexer, out: np.ndarray, fill_value=...
) -> None: ...
def take_2d_multi_int32_int32(
    values: np.ndarray, indexer, out: np.ndarray, fill_value=...
) -> None: ...
def take_2d_multi_int32_int64(
    values: np.ndarray, indexer, out: np.ndarray, fill_value=...
) -> None: ...
def take_2d_multi_int32_float64(
    values: np.ndarray, indexer, out: np.ndarray, fill_value=...
) -> None: ...
def take_2d_multi_int64_float64(
    values: np.ndarray, indexer, out: np.ndarray, fill_value=...
) -> None: ...
def take_2d_multi_float32_float32(
    values: np.ndarray, indexer, out: np.ndarray, fill_value=...
) -> None: ...
def take_2d_multi_float32_float64(
    values: np.ndarray, indexer, out: np.ndarray, fill_value=...
) -> None: ...
def take_2d_multi_float64_float64(
    values: np.ndarray, indexer, out: np.ndarray, fill_value=...
) -> None: ...
def take_2d_multi_object_object(
    values: np.ndarray, indexer, out: np.ndarray, fill_value=...
) -> None: ...
def take_2d_multi_bool_bool(
    values: np.ndarray, indexer, out: np.ndarray, fill_value=...
) -> None: ...
def take_2d_multi_bool_object(
    values: np.ndarray, indexer, out: np.ndarray, fill_value=...
) -> None: ...
def take_2d_multi_int64_int64(
    values: np.ndarray, indexer, out: np.ndarray, fill_value=...
) -> None: ...
