import numpy as np
from pandas._typing import ArrayLike
from pandas.core.arrays.numeric import NumericArray, NumericDtype
from pandas.core.dtypes.dtypes import register_extension_dtype
from pandas.util._decorators import cache_readonly

class FloatingDtype(NumericDtype):
    def __repr__(self) -> str: ...
    @classmethod
    def construct_array_type(cls) -> type[FloatingArray]: ...

def coerce_to_array(
    values, dtype=..., mask=..., copy: bool = ...
) -> tuple[np.ndarray, np.ndarray]: ...

class FloatingArray(NumericArray):
    _internal_fill_value = ...
    @cache_readonly
    def dtype(self) -> FloatingDtype: ...
    def __init__(
        self, values: np.ndarray, mask: np.ndarray, copy: bool = ...
    ) -> None: ...
    def astype(self, dtype, copy: bool = ...) -> ArrayLike: ...
    def sum(self, *, skipna=..., min_count=..., **kwargs): ...
    def prod(self, *, skipna=..., min_count=..., **kwargs): ...
    def min(self, *, skipna=..., **kwargs): ...
    def max(self, *, skipna=..., **kwargs): ...

_dtype_docstring = ...

@register_extension_dtype
class Float32Dtype(FloatingDtype):
    type = ...
    name = ...
    __doc__ = ...

@register_extension_dtype
class Float64Dtype(FloatingDtype):
    type = ...
    name = ...
    __doc__ = ...

FLOAT_STR_TO_DTYPE = ...
