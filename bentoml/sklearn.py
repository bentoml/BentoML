import os
import typing as t

import numpy as np
import bentoml._internal.constants as _const

from ._internal.models.base import MODEL_NAMESPACE, PICKLE_EXTENSION, Model
from ._internal.service.runner import Runner


_MT = t.TypeVar("_MT")

try: 
    import sklearn.externals.joblib as joblib
except ImportError:  
    raise MissingDependencyException("sklearn is required in order to use bentoml.sklearn. Do `pip install sklearn`")

if t.TYPE_CHECKING:
    import pandas as pd

def _get_model_info(tag):
    model_info = _stores.get(tag) # LocalModelStore.get_model(tag) -> ModelInfo
    if model_info.module != __name__:
        raise BentoMLException(
            f"Model {tag} was saved with module {model_info.module}, failed loading "
            f"with {__name__}."
        )
    model_file = os.path.join(model_info.path, f"{SAVE_NAMESPACE}.pkl")

    return model_info, model_file

def load(
    tag: str,
) -> _MT:
    """
    Load a model from BentoML local modelstore with given name.

    Args: 
        tag (`str`):
            Tag of a saved model in BentoML local modelstore.

    Returns:
        an instance of sklearn model from BentoML modelstore.
    
    Examples:
        import bentoml.sklearn
        sklearn = bentoml.sklearn.load(
            'my_model:20201012_DE43A2')

    """
    _, model_file = _get_model_info(tag)

    return joblib.load(
        filename=model_file
    )

def save(
    name: str,
    model: _MT,
    *,
    metadata: t.Optional[t.Dict[str, t.Any]] = None,
) -> str:
    """
    Save a model instance to BentoML modelstore.

    Args:
        name (`str`):
            Name for given model instance. This should pass Python identifier check.
        model (``):
            Instance of model to be saved
        sk_params (`t.Dict[str, t.Union[str, int]]`):
            Params for sk initialization
        metadata (`t.Optional[t.Dict[str, t.Any]]`, default to `None`):
            Custom metadata for given model.
    
    Returns: 
        tag (`str` with a format `name:version`) where `name` is the defined name user
        set for their models, and version will be generated by BentoML.

    Examples::

    """
    context = {"sklearn": sklearn.__version__}
    with _stores.register(
        name,
        module=__name__,
        metadata=metadata,
        framework_context=context,
    ) as ctx:
        joblib.dump(model, os.path.join(ctx.path, f"{SAVE_NAMESPACE}.pkl"))
        return ctx.tag
    
def load_runner(
    tag: str,
    predict_fn_name: str = "predict",
    *,
    resource_quota: t.Dict[str, t.Any] = None,
    batch_options: t.Dict[str, t.Any] = None,
) -> "_SklearnRunner":

    """
    Runner represents a unit of serving logic that can be scaled horizontally to 
    maximize throughput. `bentoml.sklearn.load_runner` implements a Runner class that 
    wrap around a Sklearn joblib model, which optimize it for the BentoML runtime.

    Returns:
        Runner instances for the target `bentml.sklearn` model

    Examples::
        import bentoml
        import bentoml.sklearn
        import numpy as np

        from bentoml.io import NumpyNdarray

        input_data = NumpyNdarray()
        runner = bentoml.sklearn.load_runner("my_model:20201012_DE43A2")
        runner.run(input_data)
    """
    return _SklearnRunner(
        tag=tag,
        resource_quota=resource_quota,
        batch_options=batch_options,
    )


class _SklearnRunner(Runner):
    def __init__(
        self, 
        tag: str,
        resource_quota: t.Dict[str, t.Any],
        batch_options: t.Dict[str, t.Any],
    ):
        super().__init__(tag, resource_quota, batch_options)
        model_info, model_file = _get_model_info(tag)
        self._model_info = model_info
        self._model_file = model_file

    @property
    def num_concurrency_per_replica(self):
        if self.resource_quota.on_gpu:
            return 1
        return int(round(self.resource_quota.cpu))

    @property
    def num_replica(self):
        if self.resource_quota.on_gpu:
            return len(self.resource_quotas.gpus)
        return 1

    @property
    def required_models(self):
        return [self._model_info.tag]

    def _setup(self) -> None:
        gpu_device_id = self.resource_quota.gpus[self.replica_id]
        
        self._model = joblib.load(
        filename=model_file
        )
    
    def _run_batch(
        self, 
        input_data: t.Union[np.ndarray, "pd.DataFrame"]
    ) -> "np.ndarray":
        return self._model.predict(input_data)