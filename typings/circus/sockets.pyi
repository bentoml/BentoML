"""
This type stub file was generated by pyright.
"""

import socket

_FAMILY = ...
if hasattr(socket, 'AF_UNIX'):
    ...
_TYPE = ...
def addrinfo(host, port, family): # -> tuple[str | int, int] | tuple[str | int, str | int]:
    ...

class PapaSocketProxy:
    def __init__(self, name=..., host=..., port=..., family=..., type=..., proto=..., backlog=..., path=..., umask=..., replace=..., interface=..., so_reuseport=..., blocking=...) -> None:
        ...
    
    def fileno(self):
        ...
    
    @property
    def location(self): # -> str:
        ...
    
    def __str__(self) -> str:
        ...
    
    def close(self): # -> None:
        ...
    
    def bind_and_listen(self): # -> None:
        ...
    


class CircusSocket(socket.socket):
    """Inherits from socket, to add a few extra options.
    """
    def __init__(self, name=..., host=..., port=..., family=..., type=..., proto=..., backlog=..., path=..., umask=..., replace=..., interface=..., so_reuseport=..., blocking=...) -> None:
        ...
    
    @property
    def location(self): # -> str:
        ...
    
    def __str__(self) -> str:
        ...
    
    def close(self): # -> None:
        ...
    
    def bind_and_listen(self): # -> None:
        ...
    
    @classmethod
    def load_from_config(cls, config): # -> PapaSocketProxy | Self@CircusSocket:
        ...
    


class CircusSockets(dict):
    """Manage CircusSockets objects.
    """
    def __init__(self, sockets=..., backlog=...) -> None:
        ...
    
    def add(self, name, host=..., port=..., family=..., type=..., proto=..., backlog=..., path=..., umask=..., interface=..., use_papa=...): # -> PapaSocketProxy | CircusSocket:
        ...
    
    def close_all(self): # -> None:
        ...
    
    def bind_and_listen_all(self): # -> None:
        ...
    


