{{ metadata.header }}
{% set cached = ['arm32v5', 'arm32v6'] %}
{% if '11-slim' in metadata.base_image %}
{% set py_img = 'slim-bullseye' %}
{% elif '10-slim' in metadata.base_image %}
{% set py_img = 'slim-buster' %}
{% endif %}
ARG XX_VERSION={{ xx_version }}

FROM --platform=$BUILDPLATFORM {{ xx_image }}:${XX_VERSION} AS xx

ARG PYTHON_VERSION

FROM --platform=$BUILDPLATFORM python:${PYTHON_VERSION}-{{ py_img }} as base
{% for key in metadata.arch_context if key not in cached -%}
    {% if 'arm' in key %}

FROM base as base-arm
    {% elif 'i386' in key %}

FROM base as base-386
    {% else %}

FROM base as base-{{ key }}
    {% endif %}
{% endfor %}

FROM base-${TARGETARCH}

COPY --from=xx / /

ARG TARGETPLATFORM

ARG TARGETARCH

RUN rm -f /etc/apt/apt.conf.d/docker-clean; echo 'Binary::apt::APT::Keep-Downloaded-Packages "true";' > /etc/apt/apt.conf.d/keep-cache
RUN --mount=type=cache,target=/var/cache/apt --mount=type=cache,target=/var/lib/apt \
    xx-apt-get install -q -y --no-install-recommends bash gcc python3-dev \
    && xx-apt-get clean \
    && rm -rf /var/lib/apt/lists/*

{% for key, value in metadata.envars.items() if key != "BENTOML_VERSION" %}
{% if key in ["PYTHON_VERSION"] %}

ARG {{ key }}
{% else %}

ENV {{ key }}={{ value }}
{% endif %}
{% endfor %}

ENV DEBIAN_FRONTEND noninteractive

# needed for string substitution
SHELL ["/bin/bash","-exo", "pipefail", "-c"]
