{{ metadata.header }}

{% set cached = ['arm32v5', 'arm32v6'] %}

ARG XX_VERSION={{ xx_version }}

FROM --platform=$BUILDPLATFORM {{ xx_image }}:${XX_VERSION} AS xx

FROM {{ metadata.base_image }} as base

COPY --from=xx / /

ARG TARGETPLATFORM

ARG TARGETARCH

{% if "amd64" in metadata.arch_ctx %}
{% do cached.append("amd64") %}
FROM base as base-amd64

ARG GLIBC_PACKAGE_VERSION="2.33-r0"

# slight modification to improve build time
ARG GLIBC_BASE_URL="https://github.com/sgerrand/alpine-pkg-glibc/releases/download"
ARG GLIBC_BASE_PACKAGE_FILENAME="glibc-${GLIBC_PACKAGE_VERSION}.apk"
ARG GLIBC_BIN_PACKAGE_FILENAME="glibc-bin-${GLIBC_PACKAGE_VERSION}.apk"
ARG GLIBC_I18N_PACKAGE_FILENAME="glibc-i18n-${GLIBC_PACKAGE_VERSION}.apk"

ENV LANG=C.UTF-8 LC_ALL=C.UTF-8

SHELL ["/bin/ash", "-eo", "pipefail", "-c"]

RUN xx-apk add -q --no-cache --virtual=.build-dependencies wget ca-certificates && \
    echo \
        "-----BEGIN PUBLIC KEY-----\
        MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEApZ2u1KJKUu/fW4A25y9m\
        y70AGEa/J3Wi5ibNVGNn1gT1r0VfgeWd0pUybS4UmcHdiNzxJPgoWQhV2SSW1JYu\
        tOqKZF5QSN6X937PTUpNBjUvLtTQ1ve1fp39uf/lEXPpFpOPL88LKnDBgbh7wkCp\
        m2KzLVGChf83MS0ShL6G9EQIAUxLm99VpgRjwqTQ/KfzGtpke1wqws4au0Ab4qPY\
        KXvMLSPLUp7cfulWvhmZSegr5AdhNw5KNizPqCJT8ZrGvgHypXyiFvvAH5YRtSsc\
        Zvo9GI2e2MaZyo9/lvb+LbLEJZKEQckqRj4P26gmASrZEPStwc+yqy1ShHLA0j6m\
        1QIDAQAB\
        -----END PUBLIC KEY-----" | sed 's/   */\n/g' > "/etc/apk/keys/sgerrand.rsa.pub" && \
    wget -q \
        "$GLIBC_BASE_URL/$GLIBC_PACKAGE_VERSION/$GLIBC_BASE_PACKAGE_FILENAME" \
        "$GLIBC_BASE_URL/$GLIBC_PACKAGE_VERSION/$GLIBC_BIN_PACKAGE_FILENAME" \
        "$GLIBC_BASE_URL/$GLIBC_PACKAGE_VERSION/$GLIBC_I18N_PACKAGE_FILENAME" && \
    xx-apk add -q --no-cache \
        "$GLIBC_BASE_PACKAGE_FILENAME" \
        "$GLIBC_BIN_PACKAGE_FILENAME" \
        "$GLIBC_I18N_PACKAGE_FILENAME" && \
    \
    rm "/etc/apk/keys/sgerrand.rsa.pub" && \
    /usr/glibc-compat/bin/localedef --force --inputfile POSIX --charmap UTF-8 "$LANG" || true && \
    echo "export LANG=$LANG" > /etc/profile.d/locale.sh && \
    \
    xx-apk del -q glibc-i18n && \
    \
    rm "/root/.wget-hsts" && \
    xx-apk del -q .build-dependencies && \
    rm \
        "$GLIBC_BASE_PACKAGE_FILENAME" \
        "$GLIBC_BIN_PACKAGE_FILENAME" \
        "$GLIBC_I18N_PACKAGE_FILENAME"
{% endif %}

{% if "arm64v8" in metadata.arch_ctx %}
{% do cached.append("arm64v8") %}
FROM base as base-arm64

ARG GLIBC_TARGET_ARCH=aarch64

RUN set -xe \
    && xx-apk add --no-cache --purge -uU curl \
    && mkdir -p /glibc \
    && GLIBC_PACKAGE_VERSION="$(curl -SL https://api.github.com/repos/SatoshiPortal/alpine-pkg-glibc/releases/latest | awk '/tag_name/{print $4;exit}' FS='[""]' | sed -e 's_v__')" \
    && echo "Using GLIBC Version: ${GLIBC_PACKAGE_VERSION}" \
    && GLIBC_KEY="https://github.com/SatoshiPortal/alpine-pkg-glibc/releases/download/${GLIBC_PACKAGE_VERSION}/cyphernode@satoshiportal.com.rsa.pub" \
    && GLIBC_BASE_URL='https://github.com/SatoshiPortal/alpine-pkg-glibc/releases/download' \
    && GLIBC_BASE_PACKAGE_FILENAME="glibc-${GLIBC_PACKAGE_VERSION}.apk" \
    && GLIBC_BIN_PACKAGE_FILENAME="glibc-bin-${GLIBC_PACKAGE_VERSION}.apk" \
    && GLIBC_I18N_PACKAGE_FILENAME="glibc-i18n-${GLIBC_PACKAGE_VERSION}.apk" \
    && curl \
        -jkSL ${GLIBC_KEY} \
        -o /etc/apk/keys/cyphernode@satoshiportal.com.rsa.pub \
    && curl \
        -jkSL ${GLIBC_BASE_URL}/${GLIBC_PACKAGE_VERSION}/glibc-${GLIBC_PACKAGE_VERSION}-${GLIBC_TARGET_ARCH}.apk \
        -o /glibc/${GLIBC_BASE_PACKAGE_FILENAME} \
    && curl \
        -jkSL ${GLIBC_BASE_URL}/${GLIBC_PACKAGE_VERSION}/glibc-bin-${GLIBC_PACKAGE_VERSION}-${GLIBC_TARGET_ARCH}.apk \
        -o /glibc/${GLIBC_BIN_PACKAGE_FILENAME} \
    && curl \
        -jkSL ${GLIBC_BASE_URL}/${GLIBC_PACKAGE_VERSION}/glibc-i18n-${GLIBC_PACKAGE_VERSION}-${GLIBC_TARGET_ARCH}.apk \
        -o /glibc/${GLIBC_I18N_PACKAGE_FILENAME} \
    && xx-apk add --update --no-cache /glibc/*.apk; \
    /usr/glibc-compat/bin/localedef --force --inputfile POSIX --charmap UTF-8 C.UTF-8 || true \
    && echo "export LANG=C.UTF-8" > /etc/profile.d/locale.sh \
    && /usr/glibc-compat/sbin/ldconfig /lib /usr/glibc-compat/lib \
    && echo 'hosts: files mdns4_minimal [NOTFOUND=return] dns mdns4' >> /etc/nsswitch.conf \
    && xx-apk del --purge curl glibc-i18n \
    && rm -rf /var/cache/apk/* /tmp/* /glibc /etc/apk/keys/cyphernode@satoshiportal.com.rsa.pub

{% endif %}

{% for key in metadata.arch_ctx if key not in cached %}
    {% if 'arm64' in key %}

FROM base as base-arm64
    {% elif 'arm' in key %}

FROM base as base-arm
    {% elif 'i386' in key %}

FROM base as base-386
    {% else %}

FROM base as base-{{ key }}
    {% endif %}
{% endfor %}

FROM base-${TARGETARCH}

ARG TARGETPLATFORM

ARG TARGETARCH

ENV PATH /opt/conda/bin:/usr/local/bin:$PATH

ENV ENV /root/.bashrc

CMD [ "/bin/bash" ]

LABEL maintainer "BentoML Team <contact@bentoml.com>"

# setup ENV and ARG
{% for key, value in metadata.envars.items() if key != "BENTOML_VERSION"%}
{% if key in ["PYTHON_VERSION"] %}
ARG {{ key }}
{% else %}
ENV {{ key }}={{ value }}
{% endif %}
{% endfor %}

ARG CONDA_VERSION=py39_4.10.3

# Installing miniconda
RUN set -x \
    && UNAME_M="$(uname -m)" \
    && if [ "${UNAME_M}" = "x86_64" ]; then \
        MINICONDA_URL="https://repo.anaconda.com/miniconda/Miniconda3-${CONDA_VERSION}-Linux-x86_64.sh"; \
    elif [ "${UNAME_M}" = "s390x" ]; then \
        MINICONDA_URL="https://repo.anaconda.com/miniconda/Miniconda3-${CONDA_VERSION}-Linux-s390x.sh"; \
    elif [ "${UNAME_M}" = "aarch64" ]; then \
        MINICONDA_URL="https://repo.anaconda.com/miniconda/Miniconda3-${CONDA_VERSION}-Linux-aarch64.sh"; \
    elif [ "${UNAME_M}" = "ppc64le" ]; then \
        MINICONDA_URL="https://repo.anaconda.com/miniconda/Miniconda3-${CONDA_VERSION}-Linux-ppc64le.sh"; \
    fi \
    && xx-apk add --no-cache --virtual .build-dependencies ca-certificates bash procps \
    && wget --quiet ${MINICONDA_URL} -O ~/miniconda.sh \
	&& mkdir -p /opt \
    && chmod +x ~/miniconda.sh \
    && ~/miniconda.sh -b -p /opt/conda \
    \
    && xx-apk del --purge .build-dependencies \
    && rm -f ~/miniconda.sh \
    && find /opt/conda/ -follow -type f \( -iname '*.a' -o -iname '*.pyc' -o -iname '*.js.map' \) -delete \
    && ln -s /opt/conda/etc/profile.d/conda.sh /etc/profile.d/conda.sh \
    && echo ". /opt/conda/etc/profile.d/conda.sh" >> ~/.bashrc \
    && conda clean -afy

RUN xx-apk add --no-cache --update bash gcc libc-dev \
    && conda create -n bentoml-python${PYTHON_VERSION} python=$PYTHON_VERSION \
    && conda install -y pip \
    && conda clean -afy

RUN echo "conda activate bentoml-python${PYTHON_VERSION}" >> ~/.bashrc
