"""
This type stub file was generated by pyright.
"""

from typing import Callable, Dict, Union

import hypothesis.strategies as st
import pydantic

"""
Register Hypothesis strategies for Pydantic custom types.

This enables fully-automatic generation of test data for most Pydantic classes.

Note that this module has *no* runtime impact on Pydantic itself; instead it
is registered as a setuptools entry point and Hypothesis will import it if
Pydantic is installed.  See also:

https://hypothesis.readthedocs.io/en/latest/strategies.html#registering-strategies-via-setuptools-entry-points
https://hypothesis.readthedocs.io/en/latest/data.html#hypothesis.strategies.register_type_strategy
https://hypothesis.readthedocs.io/en/latest/strategies.html#interaction-with-pytest-cov
https://pydantic-docs.helpmanual.io/usage/types/#pydantic-types

Note that because our motivation is to *improve user experience*, the strategies
are always sound (never generate invalid data) but sacrifice completeness for
maintainability (ie may be unable to generate some tricky but valid data).

Finally, this module makes liberal use of `# type: ignore[<code>]` pragmas.
This is because Hypothesis annotates `register_type_strategy()` with
`(T, SearchStrategy[T])`, but in most cases we register e.g. `ConstrainedInt`
to generate instances of the builtin `int` type which match the constraints.
"""
_color_regexes = ...

def add_luhn_digit(card_number: str) -> str: ...

card_patterns = ...
RESOLVERS: Dict[type, Callable[[type], st.SearchStrategy]] = ...

def resolves(
    typ: Union[type, pydantic.types.ConstrainedNumberMeta]
) -> Callable[[Callable[..., st.SearchStrategy]], Callable[..., st.SearchStrategy]]: ...
@resolves(pydantic.JsonWrapper)
def resolve_json(cls): ...
@resolves(pydantic.ConstrainedBytes)
def resolve_conbytes(cls): ...
@resolves(pydantic.ConstrainedDecimal)
def resolve_condecimal(cls): ...
@resolves(pydantic.ConstrainedFloat)
def resolve_confloat(cls): ...
@resolves(pydantic.ConstrainedInt)
def resolve_conint(cls): ...
@resolves(pydantic.ConstrainedStr)
def resolve_constr(cls): ...
