name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  schedule:
    - cron: "0 6 * * 1/2" # Every other day 6AM UTC

concurrency:
  group: ci-${{ github.event.pull_request.number || github.sha }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

env:
  LINES: 200
  COLUMNS: 200
  BENTOML_DO_NOT_TRACK: True
  BENTOML_DEBUG: True

# https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#defaultsrun
defaults:
  run:
    shell: bash --noprofile --norc -exo pipefail {0}

jobs:
  type:
    runs-on: ubuntu-latest
    if: "!github.event.repository.fork" # Don't run on fork repository
    timeout-minutes: 60
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup CI
        uses: ./.github/actions/setup-repo
        with:
          python-version: "3.10"
      - name: Get current branch.
        id: current-branch
        run: echo "branch=${GITHUB_REF##*/}" >> $GITHUB_OUTPUT
      - name: Get workspace directory
        id: get-workspace
        run: echo "workspace=$(bazel info workspace)" >> $GITHUB_OUTPUT
      - name: (pyright) Running type checking.
        if: ${{ steps.current-branch.outputs.branch != 'main' }}
        run: |
          cd ${{ steps.get-workspace.output.workspace }} || exit 1
          git diff --name-only --diff-filter=d "origin/$GITHUB_BASE_REF" -z -- '*.py' | xargs -0 --no-run-if-empty bazel run //:pyright

  lint:
    runs-on: ubuntu-latest
    if: "!github.event.repository.fork" # Don't run on fork repository
    timeout-minutes: 60
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 # fetch all tags and branches
      - name: Setup CI
        uses: ./.github/actions/setup-repo
        with:
          python-version: "3.10"
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2
      - name: Get current branch.
        id: get-current-branch
        run: echo "branch=${GITHUB_REF##*/}" >> $GITHUB_OUTPUT
      - name: Get workspace directory
        id: get-workspace
        run: echo "workspace=$(bazel info workspace)" >> $GITHUB_OUTPUT
        # Running formatter check
      - name: Run style check
        run: |
          bazel run //:buildcheck
          bazel run //:black -- --check "${{ steps.get-workspace.output.workspace }}/src"
          bazel run //:isort -- --check "${{ steps.get-workspace.output.workspace }}/src"
          bazel run //:v1alpha1_proto_lint
          bazel run //:v1_proto_lint
      - name: (pylint) Linting source.
        if: ${{ steps.get-current-branch.output.branch != 'main' }}
        run: git diff --name-only --diff-filter=d "origin/$GITHUB_BASE_REF" -z -- '*.py' | xargs -0 --no-run-if-empty bazel run //:pylint -- --rcfile "${{ steps.get-workspace.output.workspace }}/pyproject.toml" --fail-under 9.0
      # Running spellcheck
      - name: Install libenchant
        run: |
          sudo apt-get update -y
          sudo apt-get install -y libenchant-dev
      - name: Running spellcheck
        run: bazel run //:sphinx-build -- -b spelling "${{ steps.get-workspace.output.workspace }}/docs/source" "${{ steps.get-workspace.output.workspace }}/docs/build"

  tests:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu, macos, windows]
        python-version: ["3.7", "3.10"]
        architecture: [x64]

    if: "!github.event.repository.fork" # Don't run on fork repository
    name: ${{ matrix.os }}-tests-python${{ matrix.python-version }}
    runs-on: ${{ matrix.os }}-latest
    timeout-minutes: 60

    env:
      SETUPTOOLS_USE_DISTUTILS: stdlib
      BENTOML_BUNDLE_LOCAL_BUILD: True

    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup CI
        uses: ./.github/actions/setup-repo
        with:
          python-version: ${{ matrix.python-version }}
          architecture: ${{ matrix.architecture }}
      - name: Run tests
        run: bazel test tests/...
      # - name: Generage coverage
      #   run: coverage xml -o ${{ inputs.coverage-fname }}.xml
      # - name: Upload test coverage to Codecov
      #   uses: codecov/codecov-action@v3
      #   with:
      #     verbose: true
      #     files: ${{ join(steps.coverage-files.outputs.files, ',')  }}
      #     flags: tests
      #     token: ${{ secrets.CODECOV_TOKEN }}
