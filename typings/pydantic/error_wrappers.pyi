"""
This type stub file was generated by pyright.
"""

from typing import (
    TYPE_CHECKING,
    Any,
    Dict,
    Generator,
    List,
    Optional,
    Sequence,
    Tuple,
    Type,
    Union,
)

from .main import BaseConfig
from .types import ModelOrDc
from .typing import ReprArgs
from .utils import Representation

if TYPE_CHECKING:
    Loc = Tuple[Union[int, str], ...]
__all__ = ("ErrorWrapper", "ValidationError")

class ErrorWrapper(Representation):
    __slots__ = ...
    def __init__(self, exc: Exception, loc: Union[str, Loc]) -> None: ...
    def loc_tuple(self) -> Loc: ...
    def __repr_args__(self) -> ReprArgs: ...

ErrorList = Union[Sequence[Any], ErrorWrapper]

class ValidationError(Representation, ValueError):
    __slots__ = ...
    def __init__(self, errors: Sequence[ErrorList], model: ModelOrDc) -> None: ...
    def errors(self) -> List[Dict[str, Any]]: ...
    def json(self, *, indent: Union[None, int, str] = ...) -> str: ...
    def __str__(self) -> str: ...
    def __repr_args__(self) -> ReprArgs: ...

def display_errors(errors: List[Dict[str, Any]]) -> str: ...
def flatten_errors(
    errors: Sequence[Any], config: Type[BaseConfig], loc: Optional[Loc] = ...
) -> Generator[Dict[str, Any], None, None]: ...
def error_dict(
    exc: Exception, config: Type[BaseConfig], loc: Loc
) -> Dict[str, Any]: ...

_EXC_TYPE_CACHE: Dict[Type[Exception], str] = ...

def get_exc_type(cls: Type[Exception]) -> str: ...
