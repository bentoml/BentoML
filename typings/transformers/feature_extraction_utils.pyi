import os
from collections import UserDict
from typing import Any, Dict, Optional, Tuple, Type, Union
from .feature_extraction_sequence_utils import SequenceFeatureExtractor
from .file_utils import TensorType, torch_required

PreTrainedFeatureExtractor: Type[SequenceFeatureExtractor] = ...

class BatchFeature(UserDict[str, Any]):
    def __init__(
        self,
        data: Optional[Dict[str, Any]] = ...,
        tensor_type: Union[None, str, TensorType] = ...,
    ) -> None: ...
    def __getitem__(self, item: str) -> Union[Any]: ...
    def __getattr__(self, item: str): ...
    def __getstate__(self): ...
    def __setstate__(self, state): ...
    def keys(self): ...
    def values(self): ...
    def items(self): ...
    def convert_to_tensors(
        self, tensor_type: Optional[Union[str, TensorType]] = ...
    ): ...
    @torch_required
    def to(self, device: Union[str, torch.device]) -> BatchFeature: ...

class FeatureExtractionMixin:
    def __init__(self, **kwargs) -> None: ...
    @classmethod
    def from_pretrained(
        cls, pretrained_model_name_or_path: Union[str, os.PathLike], **kwargs
    ) -> PreTrainedFeatureExtractor: ...
    def save_pretrained(self, save_directory: Union[str, os.PathLike]): ...
    @classmethod
    def get_feature_extractor_dict(
        cls, pretrained_model_name_or_path: Union[str, os.PathLike], **kwargs
    ) -> Tuple[Dict[str, Any], Dict[str, Any]]: ...
    @classmethod
    def from_dict(
        cls, feature_extractor_dict: Dict[str, Any], **kwargs
    ) -> PreTrainedFeatureExtractor: ...
    def to_dict(self) -> Dict[str, Any]: ...
    @classmethod
    def from_json_file(
        cls, json_file: Union[str, os.PathLike]
    ) -> PreTrainedFeatureExtractor: ...
    def to_json_string(self) -> str: ...
    def to_json_file(self, json_file_path: Union[str, os.PathLike]): ...
    def __repr__(self): ...
