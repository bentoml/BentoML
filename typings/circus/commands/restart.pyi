"""
This type stub file was generated by pyright.
"""

from circus.commands.base import Command

def execute_watcher_start_stop_restart(command, arbiter, props, watcher_function_name, watchers_function, arbiter_function): # -> TransformableFuture | Any:
    """base function to handle start/stop/restart watcher requests.
    since this is always the same procedure except some function names this
    function handles all watcher start/stop commands
    """
    ...

match_options = ...
class Restart(Command):
    """\
        Restart the arbiter or a watcher
        ================================

        This command restart all the process in a watcher or all watchers. This
        funtion simply stop a watcher then restart it.

        ZMQ Message
        -----------

        ::

            {
                "command": "restart",
                "properties": {
                    "name": "<name>",
                    "waiting": False,
                    "match": "[simple|glob|regex]"
                }
            }

        The response return the status "ok".

        If the property name is present, then the reload will be applied
        to the watcher.

        If ``waiting`` is False (default), the call will return immediately
        after calling `stop_signal` on each process.

        If ``waiting`` is True, the call will return only when the restart
        process is completely ended. Because of the
        :ref:`graceful_timeout option <graceful_timeout>`, it can take some
        time.

        The ``match`` parameter can have the value ``simple`` for string
        compare, ``glob`` for wildcard matching (default) or ``regex`` for
        regex matching.


        Command line
        ------------

        ::

            $ circusctl restart [name] [--waiting] [--match=simple|glob|regex]

        Options
        +++++++

        - <name>: name or pattern of the watcher(s)
        - <match>: watcher match method
    """
    name = ...
    options = ...
    def message(self, *args, **opts): # -> dict[str, Unknown | dict[str, Unknown] | None]:
        ...
    
    def execute(self, arbiter, props): # -> TransformableFuture | Any:
        ...
    


