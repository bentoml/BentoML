from typing import TYPE_CHECKING, Any
import numpy as np
from pandas._libs.tslibs import BaseOffset, NaTType, Resolution
from pandas._typing import Callable
from pandas.core.arrays import DatetimeArray, PeriodArray, TimedeltaArray
from pandas.core.arrays.datetimelike import DatetimeLikeArrayMixin
from pandas.core.indexes.base import Index, _index_shared_docs
from pandas.core.indexes.extension import NDArrayBackedExtensionIndex, inherit_names
from pandas.util._decorators import Appender, doc

if TYPE_CHECKING: ...
_index_doc_kwargs = ...
_T = ...

@inherit_names(
    ["inferred_freq", "_resolution_obj", "resolution"],
    DatetimeLikeArrayMixin,
    cache=True,
)
@inherit_names(["mean", "asi8", "freq", "freqstr"], DatetimeLikeArrayMixin)
class DatetimeIndexOpsMixin(NDArrayBackedExtensionIndex):
    _is_numeric_dtype = ...
    _can_hold_strings = ...
    _data: DatetimeArray | TimedeltaArray | PeriodArray
    freq: BaseOffset | None
    freqstr: str | None
    _resolution_obj: Resolution
    _bool_ops: list[str] = ...
    _field_ops: list[str] = ...
    hasnans = ...
    _hasnans = ...
    @property
    def values(self) -> np.ndarray: ...
    def __array_wrap__(self, result, context=...): ...
    def equals(self, other: Any) -> bool: ...
    @Appender(Index.__contains__.__doc__)
    def __contains__(self, key: Any) -> bool: ...
    @Appender(_index_shared_docs["take"] % _index_doc_kwargs)
    def take(self, indices, axis=..., allow_fill=..., fill_value=..., **kwargs): ...
    _can_hold_na = ...
    _na_value: NaTType = ...
    def tolist(self) -> list: ...
    def min(self, axis=..., skipna=..., *args, **kwargs): ...
    def argmin(self, axis=..., skipna=..., *args, **kwargs): ...
    def max(self, axis=..., skipna=..., *args, **kwargs): ...
    def argmax(self, axis=..., skipna=..., *args, **kwargs): ...
    def format(
        self,
        name: bool = ...,
        formatter: Callable | None = ...,
        na_rep: str = ...,
        date_format: str | None = ...,
    ) -> list[str]: ...
    __add__ = ...
    __sub__ = ...
    __radd__ = ...
    __rsub__ = ...
    __pow__ = ...
    __rpow__ = ...
    __mul__ = ...
    __rmul__ = ...
    __floordiv__ = ...
    __rfloordiv__ = ...
    __mod__ = ...
    __rmod__ = ...
    __divmod__ = ...
    __rdivmod__ = ...
    __truediv__ = ...
    __rtruediv__ = ...
    def shift(self: _T, periods: int = ..., freq=...) -> _T: ...
    @doc(NDArrayBackedExtensionIndex.delete)
    def delete(self: _T, loc) -> _T: ...
    @doc(NDArrayBackedExtensionIndex.insert)
    def insert(self, loc: int, item): ...

class DatetimeTimedeltaMixin(DatetimeIndexOpsMixin):
    _data: DatetimeArray | TimedeltaArray
    _comparables = ...
    _attributes = ...
    _is_monotonic_increasing = ...
    _is_monotonic_decreasing = ...
    _is_unique = ...
    def is_type_compatible(self, kind: str) -> bool: ...
    _join_precedence = ...
