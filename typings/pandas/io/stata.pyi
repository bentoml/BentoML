import datetime
from collections import abc
from typing import Any, Hashable, Sequence
import numpy as np
from pandas._typing import CompressionOptions, FilePathOrBuffer, StorageOptions
from pandas.core import generic
from pandas.core.frame import DataFrame
from pandas.core.series import Series
from pandas.util._decorators import Appender, doc

_version_error = ...
_statafile_processing_params1 = ...
_statafile_processing_params2 = ...
_chunksize_params = ...
_compression_params = ...
_iterator_params = ...
_reader_notes = ...
_read_stata_doc = ...
_read_method_doc = ...
_stata_reader_doc = ...
_date_formats = ...
stata_epoch = ...
excessive_string_length_error = ...

class PossiblePrecisionLoss(Warning): ...

precision_loss_doc = ...

class ValueLabelTypeMismatch(Warning): ...

value_label_mismatch_doc = ...

class InvalidColumnName(Warning): ...

invalid_name_doc = ...

class CategoricalConversionWarning(Warning): ...

categorical_conversion_warning = ...

class StataValueLabel:
    def __init__(self, catarray: Series, encoding: str = ...) -> None: ...
    def generate_value_label(self, byteorder: str) -> bytes: ...

class StataMissingValue:
    MISSING_VALUES: dict[float, str] = ...
    bases = ...
    float32_base = ...
    increment = ...
    float64_base = ...
    increment = ...
    BASE_MISSING_VALUES = ...
    def __init__(self, value: int | float) -> None: ...
    @property
    def string(self) -> str: ...
    @property
    def value(self) -> int | float: ...
    def __str__(self) -> str: ...
    def __repr__(self) -> str: ...
    def __eq__(self, other: Any) -> bool: ...
    @classmethod
    def get_base_missing_value(cls, dtype: np.dtype) -> int | float: ...

class StataParser:
    def __init__(self) -> None: ...

class StataReader(StataParser, abc.Iterator):
    __doc__ = ...
    def __init__(
        self,
        path_or_buf: FilePathOrBuffer,
        convert_dates: bool = ...,
        convert_categoricals: bool = ...,
        index_col: str | None = ...,
        convert_missing: bool = ...,
        preserve_dtypes: bool = ...,
        columns: Sequence[str] | None = ...,
        order_categoricals: bool = ...,
        chunksize: int | None = ...,
        compression: CompressionOptions = ...,
        storage_options: StorageOptions = ...,
    ) -> None: ...
    def __enter__(self) -> StataReader: ...
    def __exit__(self, exc_type, exc_value, traceback) -> None: ...
    def close(self) -> None: ...
    def __next__(self) -> DataFrame: ...
    def get_chunk(self, size: int | None = ...) -> DataFrame: ...
    @Appender(_read_method_doc)
    def read(
        self,
        nrows: int | None = ...,
        convert_dates: bool | None = ...,
        convert_categoricals: bool | None = ...,
        index_col: str | None = ...,
        convert_missing: bool | None = ...,
        preserve_dtypes: bool | None = ...,
        columns: Sequence[str] | None = ...,
        order_categoricals: bool | None = ...,
    ) -> DataFrame: ...
    @property
    def data_label(self) -> str: ...
    def variable_labels(self) -> dict[str, str]: ...
    def value_labels(self) -> dict[str, dict[float | int, str]]: ...

@Appender(_read_stata_doc)
def read_stata(
    filepath_or_buffer: FilePathOrBuffer,
    convert_dates: bool = ...,
    convert_categoricals: bool = ...,
    index_col: str | None = ...,
    convert_missing: bool = ...,
    preserve_dtypes: bool = ...,
    columns: Sequence[str] | None = ...,
    order_categoricals: bool = ...,
    chunksize: int | None = ...,
    iterator: bool = ...,
    compression: CompressionOptions = ...,
    storage_options: StorageOptions = ...,
) -> DataFrame | StataReader: ...
@doc(storage_options=generic._shared_docs["storage_options"])
class StataWriter(StataParser):
    _max_string_length = ...
    _encoding = ...
    def __init__(
        self,
        fname: FilePathOrBuffer,
        data: DataFrame,
        convert_dates: dict[Hashable, str] | None = ...,
        write_index: bool = ...,
        byteorder: str | None = ...,
        time_stamp: datetime.datetime | None = ...,
        data_label: str | None = ...,
        variable_labels: dict[Hashable, str] | None = ...,
        compression: CompressionOptions = ...,
        storage_options: StorageOptions = ...,
    ) -> None: ...
    def write_file(self) -> None: ...

class StataStrLWriter:
    def __init__(
        self,
        df: DataFrame,
        columns: Sequence[str],
        version: int = ...,
        byteorder: str | None = ...,
    ) -> None: ...
    def generate_table(self) -> tuple[dict[str, tuple[int, int]], DataFrame]: ...
    def generate_blob(self, gso_table: dict[str, tuple[int, int]]) -> bytes: ...

class StataWriter117(StataWriter):
    _max_string_length = ...
    _dta_version = ...
    def __init__(
        self,
        fname: FilePathOrBuffer,
        data: DataFrame,
        convert_dates: dict[Hashable, str] | None = ...,
        write_index: bool = ...,
        byteorder: str | None = ...,
        time_stamp: datetime.datetime | None = ...,
        data_label: str | None = ...,
        variable_labels: dict[Hashable, str] | None = ...,
        convert_strl: Sequence[Hashable] | None = ...,
        compression: CompressionOptions = ...,
        storage_options: StorageOptions = ...,
    ) -> None: ...

class StataWriterUTF8(StataWriter117):
    _encoding = ...
    def __init__(
        self,
        fname: FilePathOrBuffer,
        data: DataFrame,
        convert_dates: dict[Hashable, str] | None = ...,
        write_index: bool = ...,
        byteorder: str | None = ...,
        time_stamp: datetime.datetime | None = ...,
        data_label: str | None = ...,
        variable_labels: dict[Hashable, str] | None = ...,
        convert_strl: Sequence[Hashable] | None = ...,
        version: int | None = ...,
        compression: CompressionOptions = ...,
        storage_options: StorageOptions = ...,
    ) -> None: ...
