syntax = "proto3";

package bentoml.grpc;

import "bentoml/grpc/payload.proto";
import "bentoml/grpc/verbatim/code.proto";
// imports rpc verbatim
import "bentoml/grpc/verbatim/status.proto";
import "google/protobuf/empty.proto";

// cc_enable_arenas pre-allocate memory for given message to improve speed. (C++ only)
option cc_enable_arenas = true;
option cc_generic_services = true;
option go_package = "github.com/bentoml/grpc/service;service";
option java_multiple_files = true;
option java_outer_classname = "ServiceProto";
// Java namespace
option java_package = "com.bentoml.grpc";
// ObjectiveC namepsace
option objc_class_prefix = "SVC";
// Python specific
option py_generic_services = true;

message Error {
  // Define status code that follows https://grpc.github.io/grpc/core/md_doc_statuscodes.html
  bentoml.grpc.verbatim.Code status_code = 1;

  // Error message. Will only be set if an error was encountered.
  string details = 2;
}

// a gRPC BentoServer.
service BentoService {
  // HealthCheck defines a rpc for service health.
  rpc HealthCheck(google.protobuf.Empty) returns (HealthCheckResponse) {}

  // Call takes a `CallRequest` and returns `CallResponse`.
  rpc Call(CallRequest) returns (CallResponse) {}
}

// CallRequest represents a request payload that user send
// to the BentoService.
message CallRequest {
  // a given API route the rpc request is sent to.
  string api_name = 1;
  bentoml.grpc.Value input = 2;
}

// CallResponse represents response payload that user receive
// from the BentoService.
message CallResponse {
  bentoml.grpc.Value output = 1;
  bentoml.grpc.verbatim.Status status = 2;
  Error error = 3;
}

// HealthCheckResponse returns google.rpc.Status that represents service health.
message HealthCheckResponse {
  bentoml.grpc.verbatim.Status status = 1;
}
