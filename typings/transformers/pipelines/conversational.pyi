import uuid
from typing import List, Union
from ..file_utils import add_end_docstrings, is_tf_available, is_torch_available
from .base import PIPELINE_INIT_ARGS, Pipeline

if is_tf_available(): ...
if is_torch_available(): ...
logger = ...

class Conversation:
    def __init__(
        self,
        text: str = ...,
        conversation_id: uuid.UUID = ...,
        past_user_inputs=...,
        generated_responses=...,
    ) -> None: ...
    def __eq__(self, other) -> bool: ...
    def add_user_input(self, text: str, overwrite: bool = ...): ...
    def mark_processed(self): ...
    def append_response(self, response: str): ...
    def iter_texts(self): ...
    def __repr__(self): ...

@add_end_docstrings(
    PIPELINE_INIT_ARGS,
    r"""
        min_length_for_response (:obj:`int`, `optional`, defaults to 32):
            The minimum length (in number of tokens) for a response.
    """,
)
class ConversationalPipeline(Pipeline):
    def __init__(self, min_length_for_response=..., *args, **kwargs) -> None: ...
