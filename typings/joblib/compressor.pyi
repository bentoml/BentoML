import io

LZ4_NOT_INSTALLED_ERROR = ...
_COMPRESSORS = ...
_ZFILE_PREFIX = ...
_ZLIB_PREFIX = ...
_GZIP_PREFIX = ...
_BZ2_PREFIX = ...
_XZ_PREFIX = ...
_LZMA_PREFIX = ...
_LZ4_PREFIX = ...

def register_compressor(compressor_name, compressor, force=...): ...

class CompressorWrapper:
    def __init__(self, obj, prefix=..., extension=...) -> None: ...
    def compressor_file(self, fileobj, compresslevel=...): ...
    def decompressor_file(self, fileobj): ...

class BZ2CompressorWrapper(CompressorWrapper):
    prefix = ...
    extension = ...
    def __init__(self) -> None: ...
    def compressor_file(self, fileobj, compresslevel=...): ...
    def decompressor_file(self, fileobj): ...

class LZMACompressorWrapper(CompressorWrapper):
    prefix = ...
    extension = ...
    _lzma_format_name = ...
    def __init__(self) -> None: ...
    def compressor_file(self, fileobj, compresslevel=...): ...
    def decompressor_file(self, fileobj): ...

class XZCompressorWrapper(LZMACompressorWrapper):
    prefix = ...
    extension = ...
    _lzma_format_name = ...

class LZ4CompressorWrapper(CompressorWrapper):
    prefix = ...
    extension = ...
    def __init__(self) -> None: ...
    def compressor_file(self, fileobj, compresslevel=...): ...
    def decompressor_file(self, fileobj): ...

_MODE_CLOSED = ...
_MODE_READ = ...
_MODE_READ_EOF = ...
_MODE_WRITE = ...
_BUFFER_SIZE = ...

class BinaryZlibFile(io.BufferedIOBase):
    wbits = ...
    def __init__(self, filename, mode=..., compresslevel=...) -> None: ...
    def close(self): ...
    @property
    def closed(self): ...
    def fileno(self): ...
    def seekable(self): ...
    def readable(self): ...
    def writable(self): ...
    def read(self, size=...): ...
    def readinto(self, b): ...
    def write(self, data): ...
    def seek(self, offset, whence=...): ...
    def tell(self): ...

class ZlibCompressorWrapper(CompressorWrapper):
    def __init__(self) -> None: ...

class BinaryGzipFile(BinaryZlibFile):
    wbits = ...

class GzipCompressorWrapper(CompressorWrapper):
    def __init__(self) -> None: ...
