"""
This type stub file was generated by pyright.
"""

import sys

__all__ = ['Lock', 'RLock', 'Semaphore', 'BoundedSemaphore', 'Condition', 'Event']
if sys.version_info[: 2] < (3, 3):
    FileExistsError = OSError
SEM_VALUE_MAX = ...
class SemLock:
    _rand = ...
    def __init__(self, kind, value, maxvalue, name=...) -> None:
        ...
    
    def __enter__(self):
        ...
    
    def __exit__(self, *args):
        ...
    
    def __getstate__(self): # -> tuple[Unknown, Unknown, Unknown, Unknown]:
        ...
    
    def __setstate__(self, state): # -> None:
        ...
    


class Semaphore(SemLock):
    def __init__(self, value=...) -> None:
        ...
    
    def get_value(self):
        ...
    
    def __repr__(self): # -> str:
        ...
    


class BoundedSemaphore(Semaphore):
    def __init__(self, value=...) -> None:
        ...
    
    def __repr__(self): # -> str:
        ...
    


class Lock(SemLock):
    def __init__(self) -> None:
        ...
    
    def __repr__(self): # -> str:
        ...
    


class RLock(SemLock):
    def __init__(self) -> None:
        ...
    
    def __repr__(self): # -> str:
        ...
    


class Condition:
    def __init__(self, lock=...) -> None:
        ...
    
    def __getstate__(self): # -> tuple[Unknown | RLock, Semaphore | Unknown, Semaphore | Unknown, Semaphore | Unknown]:
        ...
    
    def __setstate__(self, state): # -> None:
        ...
    
    def __enter__(self):
        ...
    
    def __exit__(self, *args):
        ...
    
    def __repr__(self): # -> str:
        ...
    
    def wait(self, timeout=...):
        ...
    
    def notify(self): # -> None:
        ...
    
    def notify_all(self): # -> None:
        ...
    
    def wait_for(self, predicate, timeout=...):
        ...
    


class Event:
    def __init__(self) -> None:
        ...
    
    def is_set(self): # -> bool:
        ...
    
    def set(self): # -> None:
        ...
    
    def clear(self): # -> None:
        ...
    
    def wait(self, timeout=...): # -> bool:
        ...
    


