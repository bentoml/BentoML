syntax = "proto3";
package yatai;

import "google/protobuf/empty.proto";

import "status.proto";
import "bundle.proto";


// Yatai RPC Server
//
// A stateful service that provides a complete BentoML bundle management
//
// It provides API:
//  Bundle: Manages saved Bundle files, and making them available
//                    for serving in production environments
service Yatai {
  // Health check ping endpoint
  rpc HealthCheck (google.protobuf.Empty)
    returns (HealthCheckResponse);

  // Return current service version information
  rpc GetYataiServiceVersion (google.protobuf.Empty)
    returns (GetYataiServiceVersionResponse);

  // Add new saved Bundle to repository by providing the Bundle name and version
  // this will return an upload address that allows client to upload the Bundle files
  rpc AddBundle(AddBundleRequest)
    returns (AddBundleResponse);

  // RPC for updating a previously added Bundle's information, including
  // the BundleService's Metadata(apis, env, artifacts etc) and the upload status.
  // Yatai server expects the client to use this RPC for notifying that, for a
  // previously requested AddBundle call, what's the uploading progress and when the
  // upload is completed
  rpc UpdateBundle(UpdateBundleRequest)
    returns (UpdateBundleResponse);

  // Get a file path to the saved Bundle files, path must be accessible form client
  // machine either through HTTP, FTP, etc
  rpc GetBundle(GetBundleRequest)
    returns (GetBundleResponse);

  // Deleting the Bundle files that was added to this Yatai server earlier, this may
  // break existing deployments or create issues when doing deployment rollback
  rpc DeleteBundle(DeleteBundleRequest)
    returns (DeleteBundleResponse);

  // Get a list of Bundle that are stored in current repository
  rpc ListBundles(ListBundlesRequest)
    returns (ListBundlesResponse);

  rpc UploadBundle(stream UploadBundleRequest)
    returns (UploadBundleResponse);

  rpc DownloadBundle(DownloadBundleRequest)
    returns (stream DownloadBundleResponse);
}

message HealthCheckResponse {
  Status status = 1;
}

message GetYataiServiceVersionResponse {
  Status status = 1;
  string version = 2;
}
