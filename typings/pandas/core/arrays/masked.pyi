from typing import TYPE_CHECKING, Any
import numpy as np
from pandas import Series
from pandas._typing import ArrayLike, Dtype, NpDtype, PositionalIndexer, Scalar, type_t
from pandas.core.arraylike import OpsMixin
from pandas.core.arrays import BooleanArray, ExtensionArray
from pandas.core.dtypes.base import ExtensionDtype
from pandas.util._decorators import cache_readonly, doc

if TYPE_CHECKING: ...
BaseMaskedArrayT = ...

class BaseMaskedDtype(ExtensionDtype):
    name: str
    base = ...
    type: type
    na_value = ...
    @cache_readonly
    def numpy_dtype(self) -> np.dtype: ...
    @cache_readonly
    def kind(self) -> str: ...
    @cache_readonly
    def itemsize(self) -> int: ...
    @classmethod
    def construct_array_type(cls) -> type_t[BaseMaskedArray]: ...

class BaseMaskedArray(OpsMixin, ExtensionArray):
    _internal_fill_value: Scalar
    def __init__(
        self, values: np.ndarray, mask: np.ndarray, copy: bool = ...
    ) -> None: ...
    @property
    def dtype(self) -> BaseMaskedDtype: ...
    def __getitem__(self, item: PositionalIndexer) -> BaseMaskedArray | Any: ...
    @doc(ExtensionArray.fillna)
    def fillna(
        self: BaseMaskedArrayT, value=..., method=..., limit=...
    ) -> BaseMaskedArrayT: ...
    def __setitem__(self, key, value) -> None: ...
    def __iter__(self): ...
    def __len__(self) -> int: ...
    def __invert__(self: BaseMaskedArrayT) -> BaseMaskedArrayT: ...
    def to_numpy(
        self, dtype: NpDtype | None = ..., copy: bool = ..., na_value: Scalar = ...
    ) -> np.ndarray[Any, np.dtype[Any]]: ...
    def astype(self, dtype: Dtype, copy: bool = ...) -> ArrayLike: ...
    __array_priority__ = ...
    def __array__(self, dtype: NpDtype | None = ...) -> np.ndarray: ...
    def __arrow_array__(self, type=...): ...
    def isna(self) -> np.ndarray: ...
    @property
    def nbytes(self) -> int: ...
    def take(
        self: BaseMaskedArrayT,
        indexer,
        *,
        allow_fill: bool = ...,
        fill_value: Scalar | None = ...
    ) -> BaseMaskedArrayT: ...
    def isin(self, values) -> BooleanArray: ...
    def copy(self: BaseMaskedArrayT) -> BaseMaskedArrayT: ...
    @doc(ExtensionArray.factorize)
    def factorize(
        self, na_sentinel: int = ...
    ) -> tuple[np.ndarray, ExtensionArray]: ...
    def value_counts(self, dropna: bool = ...) -> Series: ...
