"""
This type stub file was generated by pyright.
"""

from typing import TYPE_CHECKING, Any, Dict, FrozenSet, NamedTuple, Type

from .main import BaseModel

if TYPE_CHECKING:
    class TypedDict(Dict[str, Any]):
        __annotations__: Dict[str, Type[Any]]
        __total__: bool
        __required_keys__: FrozenSet[str]
        __optional_keys__: FrozenSet[str]
        ...

def create_model_from_typeddict(
    typeddict_cls: Type[TypedDict], **kwargs: Any
) -> Type[BaseModel]:
    """
    Create a `BaseModel` based on the fields of a `TypedDict`.
    Since `typing.TypedDict` in Python 3.8 does not store runtime information about optional keys,
    we raise an error if this happens (see https://bugs.python.org/issue38834).
    """
    ...

def create_model_from_namedtuple(
    namedtuple_cls: Type[NamedTuple], **kwargs: Any
) -> Type[BaseModel]:
    """
    Create a `BaseModel` based on the fields of a named tuple.
    A named tuple can be created with `typing.NamedTuple` and declared annotations
    but also with `collections.namedtuple`, in this case we consider all fields
    to have type `Any`.
    """
    ...
