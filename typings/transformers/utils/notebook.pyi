from typing import Optional
from ..trainer_callback import TrainerCallback

def format_time(t): ...
def html_progress_bar(value, total, prefix, label, width=...): ...
def text_to_html_table(items): ...

class NotebookProgressBar:
    warmup = ...
    update_every = ...
    def __init__(
        self,
        total: int,
        prefix: Optional[str] = ...,
        leave: bool = ...,
        parent: Optional[NotebookTrainingTracker] = ...,
        width: int = ...,
    ) -> None: ...
    def update(self, value: int, force_update: bool = ..., comment: str = ...): ...
    def update_bar(self, value, comment=...): ...
    def display(self): ...
    def close(self): ...

class NotebookTrainingTracker(NotebookProgressBar):
    def __init__(self, num_steps, column_names=...) -> None: ...
    def display(self): ...
    def write_line(self, values): ...
    def add_child(self, total, prefix=..., width=...): ...
    def remove_child(self): ...

class NotebookProgressCallback(TrainerCallback):
    def __init__(self) -> None: ...
    def on_train_begin(self, args, state, control, **kwargs): ...
    def on_step_end(self, args, state, control, **kwargs): ...
    def on_prediction_step(
        self, args, state, control, eval_dataloader=..., **kwargs
    ): ...
    def on_log(self, args, state, control, logs=..., **kwargs): ...
