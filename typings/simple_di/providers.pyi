"""
This type stub file was generated by pyright.
"""

from typing import Any
from typing import Callable as CallableType
from typing import Dict, List, Tuple, Union, overload

from simple_di import VT, Provider, _SentinelClass  # type: ignore[reportPrivateUsage]

__all__ = ["Static", "Callable", "MemoizedCallable", "Factory", "SingletonFactory", "Configuration"]
_StaticType = Union[Any, Dict[Any, Any], List[Any], Tuple[Any,...]]
class Static(Provider[_StaticType]):
    """
    provider that returns static values
    """
    STATE_FIELDS: Tuple[str, ...] = ...
    def __init__(self, value: _StaticType) -> None:
        ...

class Factory(Provider[VT]):
    """
    provider that returns the result of a callable
    """
    STATE_FIELDS: Tuple[str, ...] = ...
    def __init__(self, func: CallableType[..., VT], *args: Any, **kwargs: Any) -> None:
        ...

class SingletonFactory(Factory[VT]):
    """
    provider that returns the result of a callable, but memorize the returns.
    """
    STATE_FIELDS: Tuple[str, ...] = ...
    def __init__(self, func: CallableType[..., VT], *args: Any, **kwargs: Any) -> None:
        ...


Callable = Factory
MemoizedCallable = SingletonFactory
ConfigDictType = Dict[Union[str, int], Any]
PathItemType = Union[int, str, Provider[int], Provider[str]]


class Configuration(Provider[ConfigDictType]):
    """
    special provider that reflects the structure of a configuration dictionary.
    """
    STATE_FIELDS: Tuple[str, ...] = ...
    def __init__(self, data: Union[_SentinelClass, ConfigDictType] = ..., fallback: Any = ...) -> None:
        ...

    @overload
    def set(self, value: Union[_SentinelClass, ConfigDictType]) -> None:
        ...

    @overload
    def set(self, value: Dict[str, Any]) -> None:
        ...

    def get(self) -> Union[ConfigDictType, Any]:
        ...

    def reset(self) -> None:
        ...

    def __getattr__(self, name: str) -> _ConfigurationItem:
        ...

    def __getitem__(self, key: PathItemType) -> _ConfigurationItem:
        ...

    def __repr__(self) -> str:
        ...


class _ConfigurationItem(Provider[Any]):
    STATE_FIELDS: Tuple[str, ...] = ...
    def __init__(self, config: Configuration, path: Tuple[PathItemType, ...]) -> None:
        ...

    def set(self, value: Any) -> None:
        ...

    def get(self) -> Any:
        ...

    def reset(self) -> None:
        ...

    def __getattr__(self, name: str) -> _ConfigurationItem:
        ...

    def __getitem__(self, key: PathItemType) -> _ConfigurationItem:
        ...

    def __repr__(self) -> str:
        ...


