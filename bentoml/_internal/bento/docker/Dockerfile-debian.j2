{{ header }}
{% set cached = ['arm32v5', 'arm32v6'] %}

ARG XX_VERSION=master

FROM --platform=$BUILDPLATFORM tonistiigi/xx:${XX_VERSION} AS xx

{% if user_defined_image != true %}
{% if use_cuda == true %}
{{ setup_cuda }}
{% else %}
FROM {{ base_image }} as cached

FROM {{ base_image }} as base
{% for key in distro_spec.supported_architecture if key not in cached -%}
{% if 'arm64' in key %}

FROM base as base-arm64
{% elif 'arm' in key %}

FROM base as base-arm
{% elif 'i386' in key %}

FROM base as base-386
{% else %}

FROM base as base-{{ key }}
{% endif %}
{% endfor %}

FROM base-${TARGETARCH}
{% endif %}
{% else %}
FROM {{ base_image }} as cached

FROM {{ base_image }}
{% endif %}

{{ base_env }}

ENV DEBIAN_FRONTEND=noninteractive

RUN rm -f /etc/apt/apt.conf.d/docker-clean; echo 'Binary::apt::APT::Keep-Downloaded-Packages "true";' > /etc/apt/apt.conf.d/keep-cache
RUN --mount=type=cache,from=cached,sharing=shared,target=/var/cache/apt \
	--mount=type=cache,from=cached,sharing=shared,target=/var/lib/apt \
	xx-apt-get install -q -y --no-install-recommends --allow-remove-essential \
	bash build-essential \
	&& xx-apt-get clean \
	&& rm -rf /var/lib/apt/lists/*

{{ setup_bento_env }}

# Install bentoml
ENV BENTOML_VERSION={{ bentoml_version }}
RUN --mount=type=cache,mode=0777,target=/root/.cache/pip \
	pip install bentoml==${BENTOML_VERSION} --no-cache-dir

{{ setup_python_package }}

RUN rm -rf /var/lib/{apt,dpkg,cache,log}

{{ setup_entrypoint }}
