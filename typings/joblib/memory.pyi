from .logger import Logger

FIRST_LINE_TEXT = ...

def extract_first_line(func_code): ...

class JobLibCollisionWarning(UserWarning): ...

_STORE_BACKENDS = ...

def register_store_backend(backend_name, backend): ...

_FUNCTION_HASHES = ...

class MemorizedResult(Logger):
    def __init__(
        self,
        location,
        func,
        args_id,
        backend=...,
        mmap_mode=...,
        verbose=...,
        timestamp=...,
        metadata=...,
    ) -> None: ...
    @property
    def argument_hash(self): ...
    def get(self): ...
    def clear(self): ...
    def __repr__(self): ...
    def __getstate__(self): ...

class NotMemorizedResult:
    __slots__ = ...
    def __init__(self, value) -> None: ...
    def get(self): ...
    def clear(self): ...
    def __repr__(self): ...
    def __getstate__(self): ...
    def __setstate__(self, state): ...

class NotMemorizedFunc:
    def __init__(self, func) -> None: ...
    def __call__(self, *args, **kwargs): ...
    def call_and_shelve(self, *args, **kwargs): ...
    def __repr__(self): ...
    def clear(self, warn=...): ...
    def call(self, *args, **kwargs): ...
    def check_call_in_cache(self, *args, **kwargs): ...

class MemorizedFunc(Logger):
    def __init__(
        self,
        func,
        location,
        backend=...,
        ignore=...,
        mmap_mode=...,
        compress=...,
        verbose=...,
        timestamp=...,
    ) -> None: ...
    @property
    def func_code_info(self): ...
    def call_and_shelve(self, *args, **kwargs): ...
    def __call__(self, *args, **kwargs): ...
    def __getstate__(self): ...
    def check_call_in_cache(self, *args, **kwargs): ...
    def clear(self, warn=...): ...
    def call(self, *args, **kwargs): ...
    def __repr__(self): ...

class Memory(Logger):
    def __init__(
        self,
        location=...,
        backend=...,
        cachedir=...,
        mmap_mode=...,
        compress=...,
        verbose=...,
        bytes_limit=...,
        backend_options=...,
    ) -> None: ...
    @property
    def cachedir(self): ...
    def cache(self, func=..., ignore=..., verbose=..., mmap_mode=...): ...
    def clear(self, warn=...): ...
    def reduce_size(self): ...
    def eval(self, func, *args, **kwargs): ...
    def __repr__(self): ...
