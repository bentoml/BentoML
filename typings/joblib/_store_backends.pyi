from abc import ABCMeta, abstractmethod

CacheItemInfo = ...

def concurrency_safe_write(object_to_write, filename, write_func): ...

class StoreBackendBase(metaclass=ABCMeta):
    location = ...
    @abstractmethod
    def create_location(self, location): ...
    @abstractmethod
    def clear_location(self, location): ...
    @abstractmethod
    def get_items(self): ...
    @abstractmethod
    def configure(self, location, verbose=..., backend_options=...): ...

class StoreBackendMixin:
    def load_item(self, path, verbose=..., msg=...): ...
    def dump_item(self, path, item, verbose=...): ...
    def clear_item(self, path): ...
    def contains_item(self, path): ...
    def get_item_info(self, path): ...
    def get_metadata(self, path): ...
    def store_metadata(self, path, metadata): ...
    def contains_path(self, path): ...
    def clear_path(self, path): ...
    def store_cached_func_code(self, path, func_code=...): ...
    def get_cached_func_code(self, path): ...
    def get_cached_func_info(self, path): ...
    def clear(self): ...
    def reduce_store_size(self, bytes_limit): ...
    def __repr__(self): ...

class FileSystemStoreBackend(StoreBackendBase, StoreBackendMixin):
    _open_item = ...
    _item_exists = ...
    _move_item = ...
    def clear_location(self, location): ...
    def create_location(self, location): ...
    def get_items(self): ...
    def configure(self, location, verbose=..., backend_options=...): ...
