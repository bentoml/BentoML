name: Frameworks

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  schedule:
    - cron: "0 0 * * 1/2"

env:
  BENTOML_DO_NOT_TRACK: True
  LINES: 120
  COLUMNS: 120
  PYTEST_PLUGINS: bentoml.testing.pytest.plugin

jobs:
  diff:
    runs-on: ubuntu-latest
    outputs:
      dependencies: ${{ steps.filter.outputs.dependencies }}
      catboost: ${{ steps.filter.outputs.catboost }}
      detectron2: ${{ steps.filter.outputs.detectron2 }}
      easyocr: ${{ steps.filter.outputs.easyocr }}
      evalml: ${{ steps.filter.outputs.evalml }}
      fastai: ${{ steps.filter.outputs.fastai }}
      fasttext: ${{ steps.filter.outputs.fasttext }}
      gluon: ${{ steps.filter.outputs.gluon }}
      h2o: ${{ steps.filter.outputs.h2o }}
      keras_tf2: ${{ steps.filter.outputs.keras_tf2 }}
      lightgbm: ${{ steps.filter.outputs.lightgbm }}
      mlflow: ${{ steps.filter.outputs.mlflow }}
      onnx: ${{ steps.filter.outputs.onnx }}
      onnxmlir: ${{ steps.filter.outputs.onnxmlir }}
      paddle: ${{ steps.filter.outputs.paddle }}
      picklable_model: ${{ steps.filter.outputs.picklable_model }}
      pycaret: ${{ steps.filter.outputs.pycaret }}
      pyspark_mllib: ${{ steps.filter.outputs.pyspark_mllib }}
      pytorch: ${{ steps.filter.outputs.pytorch }}
      pytorch_lightning: ${{ steps.filter.outputs.pytorch_lightning }}
      sklearn: ${{ steps.filter.outputs.sklearn }}
      spacy: ${{ steps.filter.outputs.spacy }}
      statsmodels: ${{ steps.filter.outputs.statsmodels}}
      tf1: ${{ steps.filter.outputs.tf1 }}
      tf2: ${{ steps.filter.outputs.tf2 }}
      torchscript: ${{ steps.filter.outputs.torchscript }}
      transformers: ${{ steps.filter.outputs.transformers }}
      xgboost: ${{ steps.filter.outputs.xgboost }}
    steps:
      - uses: actions/checkout@v3
      - uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            dependencies: &dependencies
              - pyproject.toml
              - scripts/ci/config.yml
              - requirements/tests-requirements.txt
            related: &related
              - *dependencies
              - codecov.yml
              - .github/workflows/frameworks.yml
              - scripts/ci/run_tests.sh
              - tests/integration/frameworks/test_frameworks.py
            runner: &runner
              - *related
              - src/bentoml/_internal/runner/**
              - src/bentoml/_internal/models/**
            catboost:
              - *runner
              - src/bentoml/catboost.py
              - src/bentoml/_internal/frameworks/catboost.py
              - tests/integration/frameworks/models/catboost.py
              - tests/integration/frameworks/test_frameworks.py
            detectron2:
              - *runner
              - src/bentoml/detectron.py
              - src/bentoml/_internal/frameworks/detectron.py
              - tests/integration/frameworks/test_detectron2_impl.py
            easyocr:
              - *runner
              - src/bentoml/easyocr.py
              - src/bentoml/_internal/frameworks/easyocr.py
              - tests/integration/frameworks/test_easyocr_impl.py
            evalml:
              - *runner
              - src/bentoml/evalml.py
              - src/bentoml/_internal/frameworks/evalml.py
              - tests/integration/frameworks/test_evalml_impl.py
            fasttext:
              - *runner
              - src/bentoml/fasttext.py
              - src/bentoml/_internal/frameworks/fasttext.py
              - tests/integration/frameworks/test_fasttext_impl.py
            gluon:
              - *runner
              - src/bentoml/gluon.py
              - src/bentoml/_internal/frameworks/gluon.py
              - tests/integration/frameworks/test_gluon_impl.py
            h2o:
              - *runner
              - src/bentoml/h2o.py
              - src/bentoml/_internal/frameworks/h2o.py
              - tests/integration/frameworks/test_h2o_impl.py
            lightgbm:
              - *runner
              - src/bentoml/lightgbm.py
              - src/bentoml/_internal/frameworks/lightgbm.py
              - tests/integration/frameworks/models/lightgbm.py
              - tests/integration/frameworks/test_frameworks.py
            mlflow:
              - *runner
              - src/bentoml/mlflow.py
              - src/bentoml/_internal/frameworks/mlflow.py
              - tests/integration/frameworks/mlflow
            fastai:
              - *runner
              - src/bentoml/fastai.py
              - src/bentoml/_internal/frameworks/fastai.py
              - src/bentoml/_internal/frameworks/common/pytorch.py
              - tests/integration/frameworks/test_frameworks.py
              - tests/integration/frameworks/test_fastai_unit.py
            onnx:
              - *runner
              - src/bentoml/onnx.py
              - src/bentoml/_internal/frameworks/onnx.py
              - tests/integration/frameworks/models/onnx.py
              - tests/integration/frameworks/test_frameworks.py
            onnxmlir:
              - *runner
              - src/bentoml/onnxmlir.py
              - src/bentoml/_internal/frameworks/onnxmlir.py
              - tests/integration/frameworks/test_onnxmlir_impl.py
            paddle:
              - *runner
              - src/bentoml/paddle.py
              - src/bentoml/_internal/frameworks/paddle.py
              - tests/integration/frameworks/paddle
            picklable_model:
              - *runner
              - src/bentoml/picklable_model.py
              - src/bentoml/_internal/frameworks/picklable_model.py
              - tests/integration/frameworks/picklable_model
            pycaret:
              - *runner
              - src/bentoml/pycaret.py
              - src/bentoml/_internal/frameworks/pycaret.py
              - tests/integration/frameworks/test_pycaret_impl.py
            pyspark_mllib:
              - *runner
              - src/bentoml/pyspark.py
              - src/bentoml/_internal/frameworks/pyspark.py
              - tests/integration/frameworks/test_pyspark_impl.py
            pytorch:
              - *runner
              - src/bentoml/pytorch.py
              - src/bentoml/_internal/frameworks/common/pytorch.py
              - src/bentoml/_internal/frameworks/pytorch.py
              - tests/integration/frameworks/test_pytorch_unit.py
              - tests/integration/frameworks/test_frameworks.py
            torchscript:
              - *runner
              - src/bentoml/torchscript.py
              - src/bentoml/_internal/frameworks/common/pytorch.py
              - src/bentoml/_internal/frameworks/torchscript.py
              - tests/integration/frameworks/test_torchscript_impl.py
            pytorch_lightning:
              - *runner
              - src/bentoml/pytorch.py
              - src/bentoml/pytorch_lightning.py
              - src/bentoml/_internal/frameworks/common/pytorch.py
              - src/bentoml/_internal/frameworks/torchscript.py
              - src/bentoml/_internal/frameworks/pytorch_lightning.py
              - tests/integration/frameworks/test_pytorch_lightning_impl.py
            sklearn:
              - *runner
              - src/bentoml/sklearn.py
              - src/bentoml/_internal/frameworks/sklearn.py
              - tests/integration/frameworks/test_sklearn_impl.py
            spacy:
              - *runner
              - src/bentoml/spacy.py
              - src/bentoml/_internal/frameworks/spacy.py
              - tests/integration/frameworks/spacy
            statsmodels:
              - *runner
              - src/bentoml/statsmodels.py
              - src/bentoml/_internal/frameworks/statsmodels.py
              - tests/integration/frameworks/test_statsmodels_impl.py
            tf1: &tf1
              - *runner
              - src/bentoml/tensorflow.py
              - src/bentoml/_internal/frameworks/tensorflow_v1.py
              - tests/integration/frameworks/test_tensorflow_v1_impl.py
            tf2: &tf2
              - *runner
              - src/bentoml/tensorflow.py
              - src/bentoml/_internal/frameworks/tensorflow_v2.py
              - tests/integration/frameworks/models/tensorflow_v2.py
              - tests/integration/frameworks/tensorflow_v2_unit.py
            keras_tf2:
              - *runner
              - *tf2
              - src/bentoml/keras.py
              - src/bentoml/_internal/frameworks/keras.py
              - tests/integration/frameworks/models/keras.py
              - tests/integration/frameworks/test_frameworks.py
            transformers:
              - *runner
              - src/bentoml/transformers.py
              - src/bentoml/_internal/frameworks/transformers.py
              - tests/integration/frameworks/test_transformers_impl.py
            xgboost:
              - *runner
              - src/bentoml/xgboost.py
              - src/bentoml/_internal/frameworks/xgboost.py
              - tests/integration/frameworks/models/xgboost.py
              - tests/integration/frameworks/test_frameworks.py

  catboost_integration_tests:
    needs: diff
    if: ${{ (github.event_name == 'pull_request' && needs.diff.outputs.catboost == 'true') || github.event_name == 'push' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0 # fetch all tags and branches
      - name: Setup python
        uses: actions/setup-python@v4
        with:
          python-version: 3.8

      - name: Get pip cache dir
        id: cache-dir
        run: |
          echo ::set-output name=dir::$(pip cache dir)

      - name: Cache pip dependencies
        uses: actions/cache@v3
        id: cache-pip
        with:
          path: ${{ steps.cache-dir.outputs.dir }}
          key: ${{ runner.os }}-tests-${{ hashFiles('requirements/tests-requirements.txt') }}

      - name: Install dependencies
        run: |
          pip install .
          pip install -r requirements/tests-requirements.txt

      - name: Run tests and generate coverage report
        run: make tests-catboost
        shell: bash

      - name: Upload test coverage to Codecov
        if: ${{ needs.diff.outputs.catboost == 'true' }}
        uses: codecov/codecov-action@v3
        with:
          directory: ./
          files: ./catboost.xml
          flags: catboost
          verbose: true
          token: ${{ secrets.CODECOV_TOKEN }}

  detectron2_integration_tests:
    needs: diff
    if: ${{ false }}
    #if: ${{ (github.event_name == 'pull_request' && needs.diff.outputs.detectron2 == 'true') || github.event_name == 'push' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0 # fetch all tags and branches
      - name: Setup python
        uses: actions/setup-python@v4
        with:
          python-version: 3.8

      - name: Get pip cache dir
        id: cache-dir
        run: |
          echo ::set-output name=dir::$(pip cache dir)

      - name: Cache pip dependencies
        uses: actions/cache@v3
        id: cache-pip
        with:
          path: ${{ steps.cache-dir.outputs.dir }}
          key: ${{ runner.os }}-tests-${{ hashFiles('requirements/tests-requirements.txt') }}

      - name: Install dependencies
        run: |
          pip install .
          pip install -r requirements/tests-requirements.txt

      - name: Run tests and generate coverage report
        run: make tests-detectron2
        shell: bash

      - name: Upload test coverage to Codecov
        if: ${{ needs.diff.outputs.detectron2 == 'true' }}
        uses: codecov/codecov-action@v3
        with:
          directory: ./
          files: ./detectron2.xml
          flags: detectron
          verbose: true
          token: ${{ secrets.CODECOV_TOKEN }}

  easyocr_integration_tests:
    needs: diff
    #if: ${{ (github.event_name == 'pull_request' && needs.diff.outputs.easyocr == 'true') || github.event_name == 'push' }}
    if: ${{ false }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0 # fetch all tags and branches
      - name: Setup python
        uses: actions/setup-python@v4
        with:
          python-version: 3.8

      - name: Get pip cache dir
        id: cache-dir
        run: |
          echo ::set-output name=dir::$(pip cache dir)

      - name: Cache pip dependencies
        uses: actions/cache@v3
        id: cache-pip
        with:
          path: ${{ steps.cache-dir.outputs.dir }}
          key: ${{ runner.os }}-tests-${{ hashFiles('requirements/tests-requirements.txt') }}

      - name: Install dependencies
        run: |
          pip install .
          pip install -r requirements/tests-requirements.txt

      - name: Run tests and generate coverage report
        run: make tests-easyocr
        shell: bash

      - name: Upload test coverage to Codecov
        if: ${{ needs.diff.outputs.easyocr == 'true' }}
        uses: codecov/codecov-action@v3
        with:
          directory: ./
          files: ./easyocr.xml
          flags: easyocr
          verbose: true
          token: ${{ secrets.CODECOV_TOKEN }}

  # TODO: evalml_integration_tests:
  # TODO: fasttext_integration_tests

  # TODO(aarnphm): add Trax/Flax support

  fastai_integration_tests:
    needs: diff
    if: ${{ (github.event_name == 'pull_request' && needs.diff.outputs.fastai == 'true') || github.event_name == 'push' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0 # fetch all tags and branches
      - name: Setup python
        uses: actions/setup-python@v4
        with:
          python-version: 3.8

      - name: Get pip cache dir
        id: cache-dir
        run: |
          echo ::set-output name=dir::$(pip cache dir)

      - name: Cache pip dependencies
        uses: actions/cache@v3
        id: cache-pip
        with:
          path: ${{ steps.cache-dir.outputs.dir }}
          key: ${{ runner.os }}-tests-${{ hashFiles('requirements/tests-requirements.txt') }}

      - name: Install dependencies
        run: |
          pip install .
          pip install -r requirements/tests-requirements.txt

      - name: Run tests and generate coverage report
        run: make tests-fastai
        shell: bash

      - name: Run unit test for fastai
        shell: bash
        run: |
          OPTS=(--cov=src/bentoml --cov-config=./pyproject.toml --cov-report=xml:"fastai.unit.xml" --cov-report term-missing:skip-covered)
          python -m pytest ./tests/integration/frameworks/test_fastai_unit.py "${OPTS[@]}" || ERR=1
          if [ $ERR -eq 1 ]; then
            echo "unit tests for fastai failed!"
            exit 1
          fi

      - name: Upload test coverage to Codecov
        if: ${{ needs.diff.outputs.fastai == 'true' }}
        uses: codecov/codecov-action@v3
        with:
          directory: ./
          files: ./fastai.xml,./fastai.unit.xml
          flags: fastai
          verbose: true
          token: ${{ secrets.CODECOV_TOKEN }}

  gluon_integration_tests:
    needs: diff
    if: ${{ false }}
    #if: ${{ (github.event_name == 'pull_request' && needs.diff.outputs.gluon == 'true') || github.event_name == 'push' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0 # fetch all tags and branches
      - name: Setup python
        uses: actions/setup-python@v4
        with:
          python-version: 3.8

      - name: Get pip cache dir
        id: cache-dir
        run: |
          echo ::set-output name=dir::$(pip cache dir)

      - name: Cache pip dependencies
        uses: actions/cache@v3
        id: cache-pip
        with:
          path: ${{ steps.cache-dir.outputs.dir }}
          key: ${{ runner.os }}-tests-${{ hashFiles('requirements/tests-requirements.txt') }}

      - name: Install dependencies
        run: |
          pip install .
          pip install -r requirements/tests-requirements.txt

      - name: Run tests and generate coverage report
        run: make tests-gluon
        shell: bash

      - name: Upload test coverage to Codecov
        if: ${{ needs.diff.outputs.gluon == 'true' }}
        uses: codecov/codecov-action@v3
        with:
          directory: ./
          files: ./gluon.xml
          flags: gluon
          verbose: true

  h2o_integration_tests:
    needs: diff
    #if: ${{ (github.event_name == 'pull_request' && needs.diff.outputs.h2o == 'true') || github.event_name == 'push' }}
    if: ${{ false }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0 # fetch all tags and branches
      - name: Setup python
        uses: actions/setup-python@v4
        with:
          python-version: 3.8

      - name: Get pip cache dir
        id: cache-dir
        run: |
          echo ::set-output name=dir::$(pip cache dir)

      - name: Cache pip dependencies
        uses: actions/cache@v3
        id: cache-pip
        with:
          path: ${{ steps.cache-dir.outputs.dir }}
          key: ${{ runner.os }}-tests-${{ hashFiles('requirements/tests-requirements.txt') }}

      - name: Install dependencies
        run: |
          pip install .
          pip install -r requirements/tests-requirements.txt

      - name: Run tests and generate coverage report
        run: make tests-h2o
        shell: bash

      - name: Upload test coverage to Codecov
        if: ${{ needs.diff.outputs.h2o == 'true' }}
        uses: codecov/codecov-action@v3
        with:
          directory: ./
          files: ./h2o.xml
          flags: h2o
          verbose: true

  # keras_with_tf1_integration_tests:
  #   needs: diff
  #   if: ${{ (github.event_name == 'pull_request' && needs.diff.outputs.keras_tf1 == 'true') || github.event_name == 'push' }}
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v3
  #       with:
  #         fetch-depth: 0 # fetch all tags and branches
  #     - name: Setup python
  #       uses: actions/setup-python@v4
  #       with:
  #         python-version: 3.7.10

  #     - name: Get pip cache dir
  #       id: cache-dir
  #       run: |
  #         echo ::set-output name=dir::$(pip cache dir)

  #     - name: Cache pip dependencies
  #       uses: actions/cache@v3
  #       id: cache-pip
  #       with:
  #         path: ${{ steps.cache-dir.outputs.dir }}
  #         key: ${{ runner.os }}-tests-${{ hashFiles('requirements/tests-requirements.txt') }}

  #     - name: Install dependencies
  #       run: |
  #         pip install .
  #         pip install -r requirements/tests-requirements.txt

  #     - name: Run tests and generate coverage report
  #       run: make tests-keras_tf1
  #       shell: bash

  #     - name: Upload test coverage to Codecov
  #       if: ${{ needs.diff.outputs.keras_tf1 == 'true' }}
  #       uses: codecov/codecov-action@v3
  #       with:
  #         directory: ./
  #         files: ./keras_tf1.xml
  #         flags: keras
  #         verbose: true

  keras_with_tf2_integration_tests:
    needs: diff
    if: ${{ (github.event_name == 'pull_request' && needs.diff.outputs.keras_tf2 == 'true') || github.event_name == 'push' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0 # fetch all tags and branches
      - name: Setup python
        uses: actions/setup-python@v4
        with:
          python-version: 3.7.10

      - name: Get pip cache dir
        id: cache-dir
        run: |
          echo ::set-output name=dir::$(pip cache dir)

      - name: Cache pip dependencies
        uses: actions/cache@v3
        id: cache-pip
        with:
          path: ${{ steps.cache-dir.outputs.dir }}
          key: ${{ runner.os }}-tests-${{ hashFiles('requirements/tests-requirements.txt') }}

      - name: Install dependencies
        run: |
          pip install .
          pip install -r requirements/tests-requirements.txt

      - name: Run tests and generate coverage report
        run: make tests-keras_tf2
        shell: bash

      - name: Upload test coverage to Codecov
        if: ${{ needs.diff.outputs.keras_tf2 == 'true' }}
        uses: codecov/codecov-action@v3
        with:
          directory: ./
          files: ./keras_tf2.xml
          flags: keras
          verbose: true
          token: ${{ secrets.CODECOV_TOKEN }}

  lightgbm_integration_tests:
    needs: diff
    if: ${{ (github.event_name == 'pull_request' && needs.diff.outputs.lightgbm == 'true') || github.event_name == 'push' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0 # fetch all tags and branches
      - name: Setup python
        uses: actions/setup-python@v4
        with:
          python-version: 3.8

      - name: Get pip cache dir
        id: cache-dir
        run: |
          echo ::set-output name=dir::$(pip cache dir)

      - name: Cache pip dependencies
        uses: actions/cache@v3
        id: cache-pip
        with:
          path: ${{ steps.cache-dir.outputs.dir }}
          key: ${{ runner.os }}-tests-${{ hashFiles('requirements/tests-requirements.txt') }}

      - name: Install dependencies
        run: |
          pip install .
          pip install -r requirements/tests-requirements.txt

      - name: Run tests and generate coverage report
        run: make tests-lightgbm
        shell: bash

      - name: Upload test coverage to Codecov
        if: ${{ needs.diff.outputs.lightgbm == 'true' }}
        uses: codecov/codecov-action@v3
        with:
          directory: ./
          files: ./lightgbm.xml
          flags: lightgbm
          verbose: true
          token: ${{ secrets.CODECOV_TOKEN }}

  mlflow_integration_tests:
    needs: diff
    if: ${{ (github.event_name == 'pull_request' && needs.diff.outputs.mlflow == 'true') || github.event_name == 'push' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0 # fetch all tags and branches
      - name: Setup python
        uses: actions/setup-python@v4
        with:
          python-version: 3.8

      - name: Get pip cache dir
        id: cache-dir
        run: |
          echo ::set-output name=dir::$(pip cache dir)

      - name: Cache pip dependencies
        uses: actions/cache@v3
        id: cache-pip
        with:
          path: ${{ steps.cache-dir.outputs.dir }}
          key: ${{ runner.os }}-tests-${{ hashFiles('requirements/tests-requirements.txt') }}

      - name: Install dependencies
        run: |
          pip install .
          pip install -r requirements/tests-requirements.txt

      - name: Run tests and generate coverage report
        run: make tests-mlflow
        shell: bash

      - name: Upload test coverage to Codecov
        if: ${{ needs.diff.outputs.mlflow == 'true' }}
        uses: codecov/codecov-action@v3
        with:
          directory: ./
          files: ./mlflow.xml
          flags: mlflow
          verbose: true
          token: ${{ secrets.CODECOV_TOKEN }}

  onnx_integration_tests:
    needs: diff
    if: ${{ (github.event_name == 'pull_request' && needs.diff.outputs.onnx == 'true') || github.event_name == 'push' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0 # fetch all tags and branches
      - name: Setup python
        uses: actions/setup-python@v4
        with:
          python-version: 3.8

      - name: Get pip cache dir
        id: cache-dir
        run: |
          echo ::set-output name=dir::$(pip cache dir)

      - name: Cache pip dependencies
        uses: actions/cache@v3
        id: cache-pip
        with:
          path: ${{ steps.cache-dir.outputs.dir }}
          key: ${{ runner.os }}-tests-${{ hashFiles('requirements/tests-requirements.txt') }}

      - name: Install dependencies
        run: |
          pip install .
          pip install -r requirements/tests-requirements.txt

      - name: Run tests and generate coverage report
        run: make tests-onnx
        shell: bash

      - name: Upload test coverage to Codecov
        if: ${{ needs.diff.outputs.onnx == 'true' }}
        uses: codecov/codecov-action@v3
        with:
          directory: ./
          files: ./onnx.xml
          flags: onnx
          verbose: true
          token: ${{ secrets.CODECOV_TOKEN }}

  # TODO:onnxmlir_integration_tests

  paddle_integration_tests:
    needs: diff
    #if: ${{ (github.event_name == 'pull_request' && needs.diff.outputs.paddle == 'true') || github.event_name == 'push' }}
    if: ${{ false }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0 # fetch all tags and branches
      - name: Setup python
        uses: actions/setup-python@v4
        with:
          python-version: 3.8

      - name: Get pip cache dir
        id: cache-dir
        run: |
          echo ::set-output name=dir::$(pip cache dir)

      - name: Cache pip dependencies
        uses: actions/cache@v3
        id: cache-pip
        with:
          path: ${{ steps.cache-dir.outputs.dir }}
          key: ${{ runner.os }}-tests-${{ hashFiles('requirements/tests-requirements.txt') }}

      - name: Install dependencies
        run: |
          pip install .
          pip install -r requirements/tests-requirements.txt

      - name: Run tests and generate coverage report
        run: make tests-paddle
        shell: bash

      - name: Upload test coverage to Codecov
        if: ${{ needs.diff.outputs.paddle == 'true' }}
        uses: codecov/codecov-action@v3
        with:
          directory: ./
          files: ./paddle.xml
          flags: paddle
          verbose: true

  picklable_model_integration_tests:
    needs: diff
    if: ${{ (github.event_name == 'pull_request' && needs.diff.outputs.picklable_model == 'true') || github.event_name == 'push' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0 # fetch all tags and branches
      - name: Setup python
        uses: actions/setup-python@v4
        with:
          python-version: 3.8

      - name: Get pip cache dir
        id: cache-dir
        run: |
          echo ::set-output name=dir::$(pip cache dir)

      - name: Cache pip dependencies
        uses: actions/cache@v3
        id: cache-pip
        with:
          path: ${{ steps.cache-dir.outputs.dir }}
          key: ${{ runner.os }}-tests-${{ hashFiles('requirements/tests-requirements.txt') }}

      - name: Install dependencies
        run: |
          pip install .
          pip install -r requirements/tests-requirements.txt

      - name: Run tests and generate coverage report
        run: make tests-picklable_model
        shell: bash

      - name: Upload test coverage to Codecov
        if: ${{ needs.diff.outputs.paddle == 'true' }}
        uses: codecov/codecov-action@v3
        with:
          directory: ./
          files: ./picklable_model.xml
          flags: picklable_model
          verbose: true
          token: ${{ secrets.CODECOV_TOKEN }}

  pycaret_integration_tests:
    needs: diff
    #if: ${{ (github.event_name == 'pull_request' && needs.diff.outputs.pycaret == 'true') || github.event_name == 'push' }}
    if: ${{ false }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0 # fetch all tags and branches
      - name: Setup python
        uses: actions/setup-python@v4
        with:
          python-version: 3.8

      - name: Get pip cache dir
        id: cache-dir
        run: |
          echo ::set-output name=dir::$(pip cache dir)

      - name: Cache pip dependencies
        uses: actions/cache@v3
        id: cache-pip
        with:
          path: ${{ steps.cache-dir.outputs.dir }}
          key: ${{ runner.os }}-tests-${{ hashFiles('requirements/tests-requirements.txt') }}

      - name: Install dependencies
        run: |
          pip install .
          pip install -r requirements/tests-requirements.txt

      - name: Run tests and generate coverage report
        run: make tests-pycaret
        shell: bash

      - name: Upload test coverage to Codecov
        if: ${{ needs.diff.outputs.pycaret == 'true' }}
        uses: codecov/codecov-action@v3
        with:
          directory: ./
          files: ./pycaret.xml
          flags: pycaret
          verbose: true

  # TODO: pyspark_mllib_integration_tests

  pytorch_integration_tests:
    needs: diff
    if: ${{ (github.event_name == 'pull_request' && needs.diff.outputs.pytorch == 'true') || github.event_name == 'push' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0 # fetch all tags and branches
      - name: Setup python
        uses: actions/setup-python@v4
        with:
          python-version: 3.8

      - name: Get pip cache dir
        id: cache-dir
        run: |
          echo ::set-output name=dir::$(pip cache dir)

      - name: Cache pip dependencies
        uses: actions/cache@v3
        id: cache-pip
        with:
          path: ${{ steps.cache-dir.outputs.dir }}
          key: ${{ runner.os }}-tests-${{ hashFiles('requirements/tests-requirements.txt') }}

      - name: Install dependencies
        run: |
          pip install .
          pip install -r requirements/tests-requirements.txt

      - name: Run tests and generate coverage report
        run: make tests-pytorch
        shell: bash

      - name: Run unit test for pytorch
        shell: bash
        run: |
          OPTS=(--cov=src/bentoml --cov-config=./pyproject.toml --cov-report=xml:"pytorch.unit.xml" --cov-report term-missing:skip-covered)
          python -m pytest ./tests/integration/frameworks/test_pytorch_unit.py "${OPTS[@]}" || ERR=1
          if [ $ERR -eq 1 ]; then
            echo "unit tests for pytorch failed!"
            exit 1
          fi

      - name: Upload test coverage to Codecov
        if: ${{ needs.diff.outputs.pytorch == 'true' }}
        uses: codecov/codecov-action@v3
        with:
          directory: ./
          files: ./pytorch.xml,./pytorch.unit.xml
          flags: pytorch
          verbose: true
          token: ${{ secrets.CODECOV_TOKEN }}

  pytorch_lightning_integration_tests:
    needs: diff
    if: ${{ (github.event_name == 'pull_request' && needs.diff.outputs.pytorch_lightning == 'true') || github.event_name == 'push' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0 # fetch all tags and branches
      - name: Setup python
        uses: actions/setup-python@v4
        with:
          python-version: 3.8

      - name: Get pip cache dir
        id: cache-dir
        run: |
          echo ::set-output name=dir::$(pip cache dir)

      - name: Cache pip dependencies
        uses: actions/cache@v3
        id: cache-pip
        with:
          path: ${{ steps.cache-dir.outputs.dir }}
          key: ${{ runner.os }}-tests-${{ hashFiles('requirements/tests-requirements.txt') }}

      - name: Install dependencies
        run: |
          pip install .
          pip install -r requirements/tests-requirements.txt

      - name: Run tests and generate coverage report
        run: make tests-pytorch_lightning
        shell: bash

      - name: Upload test coverage to Codecov
        if: ${{ needs.diff.outputs.pytorch_lightning == 'true' }}
        uses: codecov/codecov-action@v3
        with:
          directory: ./
          files: ./pytorch_lightning.xml
          flags: pytorch_lightning
          verbose: true
          token: ${{ secrets.CODECOV_TOKEN }}

  torchscript_integration_tests:
    needs: diff
    if: ${{ (github.event_name == 'pull_request' && needs.diff.outputs.torchscript == 'true') || github.event_name == 'push' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0 # fetch all tags and branches
      - name: Setup python
        uses: actions/setup-python@v4
        with:
          python-version: 3.8

      - name: Get pip cache dir
        id: cache-dir
        run: |
          echo ::set-output name=dir::$(pip cache dir)

      - name: Cache pip dependencies
        uses: actions/cache@v3
        id: cache-pip
        with:
          path: ${{ steps.cache-dir.outputs.dir }}
          key: ${{ runner.os }}-tests-${{ hashFiles('requirements/tests-requirements.txt') }}

      - name: Install dependencies
        run: |
          pip install .
          pip install -r requirements/tests-requirements.txt

      - name: Run tests and generate coverage report
        run: make tests-torchscript
        shell: bash

      - name: Upload test coverage to Codecov
        if: ${{ needs.diff.outputs.torchscript == 'true' }}
        uses: codecov/codecov-action@v3
        with:
          directory: ./
          files: ./torchscript.xml
          flags: torchscript
          verbose: true
          token: ${{ secrets.CODECOV_TOKEN }}

  sklearn_integration_tests:
    needs: diff
    if: ${{ (github.event_name == 'pull_request' && needs.diff.outputs.sklearn == 'true') || github.event_name == 'push' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0 # fetch all tags and branches
      - name: Setup python
        uses: actions/setup-python@v4
        with:
          python-version: 3.8

      - name: Get pip cache dir
        id: cache-dir
        run: |
          echo ::set-output name=dir::$(pip cache dir)

      - name: Cache pip dependencies
        uses: actions/cache@v3
        id: cache-pip
        with:
          path: ${{ steps.cache-dir.outputs.dir }}
          key: ${{ runner.os }}-tests-${{ hashFiles('requirements/tests-requirements.txt') }}

      - name: Install dependencies
        run: |
          pip install .
          pip install -r requirements/tests-requirements.txt

      - name: Run tests and generate coverage report
        run: make tests-sklearn
        shell: bash

      - name: Upload test coverage to Codecov
        if: ${{ needs.diff.outputs.sklearn == 'true' }}
        uses: codecov/codecov-action@v3
        with:
          directory: ./
          files: ./sklearn.xml
          flags: sklearn
          verbose: true
          token: ${{ secrets.CODECOV_TOKEN }}

  spacy_integration_tests:
    needs: diff
    #if: ${{ (github.event_name == 'pull_request' && needs.diff.outputs.spacy == 'true') || github.event_name == 'push' }}
    if: ${{ false }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0 # fetch all tags and branches
      - name: Setup python
        uses: actions/setup-python@v4
        with:
          python-version: 3.8

      - name: Get pip cache dir
        id: cache-dir
        run: |
          echo ::set-output name=dir::$(pip cache dir)

      - name: Cache pip dependencies
        uses: actions/cache@v3
        id: cache-pip
        with:
          path: ${{ steps.cache-dir.outputs.dir }}
          key: ${{ runner.os }}-tests-${{ hashFiles('requirements/tests-requirements.txt') }}

      - name: Install dependencies
        run: |
          pip install .
          pip install -r requirements/tests-requirements.txt

      - name: Run tests and generate coverage report
        run: make tests-spacy
        shell: bash

      - name: Upload test coverage to Codecov
        if: ${{ needs.diff.outputs.spacy == 'true' }}
        uses: codecov/codecov-action@v3
        with:
          directory: ./
          files: ./spacy.xml
          flags: spacy
          verbose: true

  statsmodels_integration_tests:
    needs: diff
    #if: ${{ (github.event_name == 'pull_request' && needs.diff.outputs.statsmodels == 'true') || github.event_name == 'push' }}
    if: ${{ false }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0 # fetch all tags and branches
      - name: Setup python
        uses: actions/setup-python@v4
        with:
          python-version: 3.8

      - name: Get pip cache dir
        id: cache-dir
        run: |
          echo ::set-output name=dir::$(pip cache dir)

      - name: Cache pip dependencies
        uses: actions/cache@v3
        id: cache-pip
        with:
          path: ${{ steps.cache-dir.outputs.dir }}
          key: ${{ runner.os }}-tests-${{ hashFiles('requirements/tests-requirements.txt') }}

      - name: Install dependencies
        run: |
          pip install .
          pip install -r requirements/tests-requirements.txt

      - name: Run tests and generate coverage report
        run: make tests-statsmodels
        shell: bash

      - name: Upload test coverage to Codecov
        if: ${{ needs.diff.outputs.statsmodels == 'true' }}
        uses: codecov/codecov-action@v3
        with:
          directory: ./
          files: ./statsmodels.xml
          flags: statsmodels
          verbose: true

  tensorflow_v1_integration_tests:
    needs: diff
    #if: ${{ (github.event_name == 'pull_request' && needs.diff.outputs.tf1 == 'true') || github.event_name == 'push' }}
    if: ${{ false }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0 # fetch all tags and branches
      - name: Setup python
        uses: actions/setup-python@v4
        with:
          python-version: 3.7

      - name: Get pip cache dir
        id: cache-dir
        run: |
          echo ::set-output name=dir::$(pip cache dir)

      - name: Cache pip dependencies
        uses: actions/cache@v3
        id: cache-pip
        with:
          path: ${{ steps.cache-dir.outputs.dir }}
          key: ${{ runner.os }}-tests-${{ hashFiles('requirements/tests-requirements.txt') }}

      - name: Install dependencies
        run: |
          pip install .
          pip install -r requirements/tests-requirements.txt

      - name: Run tests and generate coverage report
        run: make tests-tf1
        shell: bash

      - name: Upload test coverage to Codecov
        if: ${{ needs.diff.outputs.tf1 == 'true' }}
        uses: codecov/codecov-action@v3
        with:
          directory: ./
          files: ./tf1.xml
          flags: tensorflow
          verbose: true

  tensorflow_v2_integration_tests:
    needs: diff
    if: ${{ (github.event_name == 'pull_request' && needs.diff.outputs.tf2 == 'true') || github.event_name == 'push' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0 # fetch all tags and branches
      - name: Setup python
        uses: actions/setup-python@v4
        with:
          python-version: 3.8

      - name: Get pip cache dir
        id: cache-dir
        run: |
          echo ::set-output name=dir::$(pip cache dir)

      - name: Cache pip dependencies
        uses: actions/cache@v3
        id: cache-pip
        with:
          path: ${{ steps.cache-dir.outputs.dir }}
          key: ${{ runner.os }}-tests-${{ hashFiles('requirements/tests-requirements.txt') }}

      - name: Install dependencies
        run: |
          pip install .
          pip install -r requirements/tests-requirements.txt

      - name: Run tests and generate coverage report
        run: make tests-tensorflow_v2
        shell: bash

      - name: Run unit test for tensorflow_v2
        shell: bash
        run: |
          OPTS=(--cov=src/bentoml --cov-config=./pyproject.toml --cov-report=xml:"tf2.unit.xml" --cov-report term-missing:skip-covered)
          python -m pytest ./tests/integration/frameworks/test_tensorflow_v2_unit.py "${OPTS[@]}" || ERR=1
          if [ $ERR -eq 1 ]; then
            echo "unit tests for tensorflow_v2 failed!"
            exit 1
          fi

      - name: Run tensorflow_v2 without eager execution
        shell: bash
        run: |
          OPTS=(--cov=src/bentoml --cov-config=./pyproject.toml --cov-report=xml:"tf2.unit.no_eager.xml" --cov-report term-missing:skip-covered --disable-tf-eager-execution)
          python -m pytest ./tests/integration/frameworks/test_tensorflow_v2_unit.py "${OPTS[@]}" || ERR=1
          if [ $ERR -eq 1 ]; then
            echo "unit tests for tensorflow_v2 failed!"
            exit 1
          fi

      - name: Upload test coverage to Codecov
        if: ${{ needs.diff.outputs.tf2 == 'true' }}
        uses: codecov/codecov-action@v3
        with:
          directory: ./
          files: ./tf2.xml,./tf2.unit.xml,./tf2.unit.no_eager.xml
          flags: tensorflow
          verbose: true
          token: ${{ secrets.CODECOV_TOKEN }}

  transformers_integration_tests:
    needs: diff
    if: ${{ (github.event_name == 'pull_request' && needs.diff.outputs.transformers == 'true') || github.event_name == 'push' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0 # fetch all tags and branches
      - name: Setup python
        uses: actions/setup-python@v4
        with:
          python-version: 3.8

      - name: Get pip cache dir
        id: cache-dir
        run: |
          echo ::set-output name=dir::$(pip cache dir)

      - name: Cache pip dependencies
        uses: actions/cache@v3
        id: cache-pip
        with:
          path: ${{ steps.cache-dir.outputs.dir }}
          key: ${{ runner.os }}-tests-${{ hashFiles('requirements/tests-requirements.txt') }}

      - name: Install dependencies
        run: |
          pip install .
          pip install -r requirements/tests-requirements.txt

      - name: Run tests and generate coverage report
        run: make tests-transformers
        shell: bash

      - name: Run unit test for transformers
        shell: bash
        run: |
          OPTS=(--cov=src/bentoml --cov-config=./pyproject.toml --cov-report=xml:"transformers.unit.xml" --cov-report term-missing:skip-covered)
          python -m pytest ./tests/integration/frameworks/test_transformers_unit.py "${OPTS[@]}" || ERR=1
          if [ $ERR -eq 1 ]; then
            echo "unit tests for transformers failed!"
            exit 1
          fi

      - name: Upload test coverage to Codecov
        if: ${{ needs.diff.outputs.transformers == 'true' }}
        uses: codecov/codecov-action@v3
        with:
          directory: ./
          files: ./transformers.xml
          flags: transformers
          verbose: true
          token: ${{ secrets.CODECOV_TOKEN }}

  xgboost_integration_tests:
    needs: diff
    if: ${{ (github.event_name == 'pull_request' && needs.diff.outputs.xgboost == 'true') || github.event_name == 'push' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0 # fetch all tags and branches
      - name: Setup python
        uses: actions/setup-python@v4
        with:
          python-version: 3.8

      - name: Get pip cache dir
        id: cache-dir
        run: |
          echo ::set-output name=dir::$(pip cache dir)

      - name: Cache pip dependencies
        uses: actions/cache@v3
        id: cache-pip
        with:
          path: ${{ steps.cache-dir.outputs.dir }}
          key: ${{ runner.os }}-tests-${{ hashFiles('requirements/tests-requirements.txt') }}

      - name: Install dependencies
        run: |
          pip install .
          pip install -r requirements/tests-requirements.txt

      - name: Run tests and generate coverage report
        run: make tests-xgboost
        shell: bash

      - name: Upload test coverage to Codecov
        if: ${{ needs.diff.outputs.xgboost == 'true' }}
        uses: codecov/codecov-action@v3
        with:
          directory: ./
          files: ./xgboost.xml
          flags: xgboost
          verbose: true
          token: ${{ secrets.CODECOV_TOKEN }}

concurrency:
  group: frameworks${{ github.event.pull_request.number || github.sha }}
  cancel-in-progress: true
